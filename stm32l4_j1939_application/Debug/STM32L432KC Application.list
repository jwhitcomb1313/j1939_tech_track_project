
STM32L432KC Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054c0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08005650  08005650  00006650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058b8  080058b8  000070ac  2**0
                  CONTENTS
  4 .ARM          00000008  080058b8  080058b8  000068b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058c0  080058c0  000070ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058c0  080058c0  000068c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080058c4  080058c4  000068c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  080058c8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000468  200000ac  08005974  000070ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000514  08005974  00007514  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000070ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e418  00000000  00000000  000070dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000264e  00000000  00000000  000154f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  00017b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000995  00000000  00000000  000187c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021979  00000000  00000000  0001915d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001051c  00000000  00000000  0003aad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c297d  00000000  00000000  0004aff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010d96f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003704  00000000  00000000  0010d9b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  001110b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000ac 	.word	0x200000ac
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005638 	.word	0x08005638

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b0 	.word	0x200000b0
 80001cc:	08005638 	.word	0x08005638

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <application_MainLoopFunction>:

/******************** ******************** ***********************/
/******************** Function Definitions ***********************/
/******************** ******************** ***********************/
void application_MainLoopFunction(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
    // Always ready to receive data 
    j1939_RxReceivePacket(); 
 8000564:	f000 fd60 	bl	8001028 <j1939_RxReceivePacket>

    // Manage state machine
    application_StateMachine();         
 8000568:	f000 f81e 	bl	80005a8 <application_StateMachine>

    if(txPeriodCounter == TX_TRANSMIT_PERIOD)
 800056c:	4b0c      	ldr	r3, [pc, #48]	@ (80005a0 <application_MainLoopFunction+0x40>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 8000574:	d104      	bne.n	8000580 <application_MainLoopFunction+0x20>
    {
        // Send the packet for the current state every 100 ms
        j1939_TxSendPacket(); 
 8000576:	f000 fd05 	bl	8000f84 <j1939_TxSendPacket>
        txPeriodCounter = 0; 
 800057a:	4b09      	ldr	r3, [pc, #36]	@ (80005a0 <application_MainLoopFunction+0x40>)
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
    } 
    if(serialPrintCounter == SERIAL_PRINT_PERIOD)
 8000580:	4b08      	ldr	r3, [pc, #32]	@ (80005a4 <application_MainLoopFunction+0x44>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000588:	d102      	bne.n	8000590 <application_MainLoopFunction+0x30>
    {
        serialPrintCounter = 0; 
 800058a:	4b06      	ldr	r3, [pc, #24]	@ (80005a4 <application_MainLoopFunction+0x44>)
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
    }
    txPeriodCounter ++;   
 8000590:	4b03      	ldr	r3, [pc, #12]	@ (80005a0 <application_MainLoopFunction+0x40>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	3301      	adds	r3, #1
 8000596:	4a02      	ldr	r2, [pc, #8]	@ (80005a0 <application_MainLoopFunction+0x40>)
 8000598:	6013      	str	r3, [r2, #0]
}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	200000cc 	.word	0x200000cc
 80005a4:	200000d0 	.word	0x200000d0

080005a8 <application_StateMachine>:

void application_StateMachine(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08e      	sub	sp, #56	@ 0x38
 80005ac:	af00      	add	r7, sp, #0
    char buf[30]; 
    memset(buf, '\0', sizeof(buf));
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	221e      	movs	r2, #30
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f004 fbbe 	bl	8004d38 <memset>
    j1939_message_t newMessage; 
    if(j1939_PullMessageFromTable(&newMessage))
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 fc58 	bl	8000e74 <j1939_PullMessageFromTable>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	f000 81c7 	beq.w	800095a <application_StateMachine+0x3b2>
    { 
        switch(applicationState)
 80005cc:	4bd8      	ldr	r3, [pc, #864]	@ (8000930 <application_StateMachine+0x388>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b05      	cmp	r3, #5
 80005d2:	f200 81c2 	bhi.w	800095a <application_StateMachine+0x3b2>
 80005d6:	a201      	add	r2, pc, #4	@ (adr r2, 80005dc <application_StateMachine+0x34>)
 80005d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005dc:	080005f5 	.word	0x080005f5
 80005e0:	0800068b 	.word	0x0800068b
 80005e4:	08000721 	.word	0x08000721
 80005e8:	080007bd 	.word	0x080007bd
 80005ec:	08000867 	.word	0x08000867
 80005f0:	0800091f 	.word	0x0800091f
        {
            case APP_STATE_NOT_STARTED:
                // Determine if the message has the correct pgn for the state
                if(j1939_PGNCompare(newMessage.message_id.PGN, STATE_0_PGN))
 80005f4:	88bb      	ldrh	r3, [r7, #4]
 80005f6:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fd1a 	bl	8001034 <j1939_PGNCompare>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	f000 818f 	beq.w	8000926 <application_StateMachine+0x37e>
                {
                    // Determine if the data is valid and in the correct position
                    if(newMessage.data_buffer[STATE_0_RX_POS] == STATE_0_RX_DATA)
 8000608:	7afb      	ldrb	r3, [r7, #11]
 800060a:	2b05      	cmp	r3, #5
 800060c:	f040 818b 	bne.w	8000926 <application_StateMachine+0x37e>
                    {
                        applicationState = APP_STATE_1;
 8000610:	4bc7      	ldr	r3, [pc, #796]	@ (8000930 <application_StateMachine+0x388>)
 8000612:	2201      	movs	r2, #1
 8000614:	701a      	strb	r2, [r3, #0]
                        sprintf(buf, "*******************\r\n" ); 
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	49c6      	ldr	r1, [pc, #792]	@ (8000934 <application_StateMachine+0x38c>)
 800061c:	4618      	mov	r0, r3
 800061e:	f004 fb6b 	bl	8004cf8 <siprintf>
                        uart_serial_print(buf, sizeof(buf));
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	211e      	movs	r1, #30
 8000628:	4618      	mov	r0, r3
 800062a:	f001 fa7f 	bl	8001b2c <uart_serial_print>
                        memset(buf, '\0', sizeof(buf));
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	221e      	movs	r2, #30
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f004 fb7e 	bl	8004d38 <memset>
                        sprintf(buf, "App State 1\r\n"); 
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	49bd      	ldr	r1, [pc, #756]	@ (8000938 <application_StateMachine+0x390>)
 8000642:	4618      	mov	r0, r3
 8000644:	f004 fb58 	bl	8004cf8 <siprintf>
                        uart_serial_print(buf, sizeof(buf));
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	211e      	movs	r1, #30
 800064e:	4618      	mov	r0, r3
 8000650:	f001 fa6c 	bl	8001b2c <uart_serial_print>
                        memset(buf, '\0', sizeof(buf));
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	221e      	movs	r2, #30
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f004 fb6b 	bl	8004d38 <memset>
                        sprintf(buf, "*******************\r\n" ); 
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	49b3      	ldr	r1, [pc, #716]	@ (8000934 <application_StateMachine+0x38c>)
 8000668:	4618      	mov	r0, r3
 800066a:	f004 fb45 	bl	8004cf8 <siprintf>
                        uart_serial_print(buf, sizeof(buf));
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	211e      	movs	r1, #30
 8000674:	4618      	mov	r0, r3
 8000676:	f001 fa59 	bl	8001b2c <uart_serial_print>
                        memset(buf, '\0', sizeof(buf));
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	221e      	movs	r2, #30
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f004 fb58 	bl	8004d38 <memset>
                    }
                }
                break; 
 8000688:	e14d      	b.n	8000926 <application_StateMachine+0x37e>
            case APP_STATE_1: 
                // Determine if the message has the correct pgn for the state
                if(j1939_PGNCompare(newMessage.message_id.PGN, STATE_1_PGN))
 800068a:	88bb      	ldrh	r3, [r7, #4]
 800068c:	f64f 7101 	movw	r1, #65281	@ 0xff01
 8000690:	4618      	mov	r0, r3
 8000692:	f000 fccf 	bl	8001034 <j1939_PGNCompare>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	f000 8146 	beq.w	800092a <application_StateMachine+0x382>
                {
                    // Determine if the data is valid and in the correct position
                    if(newMessage.data_buffer[STATE_1_RX_POS] == STATE_1_RX_DATA)
 800069e:	7afb      	ldrb	r3, [r7, #11]
 80006a0:	2b41      	cmp	r3, #65	@ 0x41
 80006a2:	f040 8142 	bne.w	800092a <application_StateMachine+0x382>
                    {
                        applicationState = APP_STATE_2;
 80006a6:	4ba2      	ldr	r3, [pc, #648]	@ (8000930 <application_StateMachine+0x388>)
 80006a8:	2202      	movs	r2, #2
 80006aa:	701a      	strb	r2, [r3, #0]

                        sprintf(buf, "*******************\r\n" ); 
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	49a0      	ldr	r1, [pc, #640]	@ (8000934 <application_StateMachine+0x38c>)
 80006b2:	4618      	mov	r0, r3
 80006b4:	f004 fb20 	bl	8004cf8 <siprintf>
                        uart_serial_print(buf, sizeof(buf));
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	211e      	movs	r1, #30
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 fa34 	bl	8001b2c <uart_serial_print>
                        memset(buf, '\0', sizeof(buf));
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	221e      	movs	r2, #30
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f004 fb33 	bl	8004d38 <memset>
                        sprintf(buf, "App State 2\r\n"); 
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	4999      	ldr	r1, [pc, #612]	@ (800093c <application_StateMachine+0x394>)
 80006d8:	4618      	mov	r0, r3
 80006da:	f004 fb0d 	bl	8004cf8 <siprintf>
                        uart_serial_print(buf, sizeof(buf));
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	211e      	movs	r1, #30
 80006e4:	4618      	mov	r0, r3
 80006e6:	f001 fa21 	bl	8001b2c <uart_serial_print>
                        memset(buf, '\0', sizeof(buf));
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	221e      	movs	r2, #30
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f004 fb20 	bl	8004d38 <memset>
                        sprintf(buf, "*******************\r\n" ); 
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	498d      	ldr	r1, [pc, #564]	@ (8000934 <application_StateMachine+0x38c>)
 80006fe:	4618      	mov	r0, r3
 8000700:	f004 fafa 	bl	8004cf8 <siprintf>
                        uart_serial_print(buf, sizeof(buf));
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	211e      	movs	r1, #30
 800070a:	4618      	mov	r0, r3
 800070c:	f001 fa0e 	bl	8001b2c <uart_serial_print>
                        memset(buf, '\0', sizeof(buf));
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	221e      	movs	r2, #30
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f004 fb0d 	bl	8004d38 <memset>
                    } 
                }
                break;
 800071e:	e104      	b.n	800092a <application_StateMachine+0x382>
            case APP_STATE_2:   
                // Determine if the message has the correct pgn for the state
                if(j1939_PGNCompare(newMessage.message_id.PGN, STATE_2_PGN))
 8000720:	88bb      	ldrh	r3, [r7, #4]
 8000722:	f64f 7102 	movw	r1, #65282	@ 0xff02
 8000726:	4618      	mov	r0, r3
 8000728:	f000 fc84 	bl	8001034 <j1939_PGNCompare>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	f000 810e 	beq.w	8000950 <application_StateMachine+0x3a8>
                {
                    // Determine if the data is valid and in the correct position
                    if(((newMessage.data_buffer[STATE_2_RX_POS] & (0x0F)) >> 2) == STATE_2_RX_DATA)
 8000734:	7b7b      	ldrb	r3, [r7, #13]
 8000736:	109b      	asrs	r3, r3, #2
 8000738:	f003 0303 	and.w	r3, r3, #3
 800073c:	2b02      	cmp	r3, #2
 800073e:	f040 8107 	bne.w	8000950 <application_StateMachine+0x3a8>
                    {
                        applicationState = APP_STATE_3;
 8000742:	4b7b      	ldr	r3, [pc, #492]	@ (8000930 <application_StateMachine+0x388>)
 8000744:	2203      	movs	r2, #3
 8000746:	701a      	strb	r2, [r3, #0]

                        sprintf(buf, "*******************\r\n" ); 
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	4979      	ldr	r1, [pc, #484]	@ (8000934 <application_StateMachine+0x38c>)
 800074e:	4618      	mov	r0, r3
 8000750:	f004 fad2 	bl	8004cf8 <siprintf>
                        uart_serial_print(buf, sizeof(buf));
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	211e      	movs	r1, #30
 800075a:	4618      	mov	r0, r3
 800075c:	f001 f9e6 	bl	8001b2c <uart_serial_print>
                        memset(buf, '\0', sizeof(buf));
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	221e      	movs	r2, #30
 8000766:	2100      	movs	r1, #0
 8000768:	4618      	mov	r0, r3
 800076a:	f004 fae5 	bl	8004d38 <memset>
                        sprintf(buf, "App State 3\r\n"); 
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	4973      	ldr	r1, [pc, #460]	@ (8000940 <application_StateMachine+0x398>)
 8000774:	4618      	mov	r0, r3
 8000776:	f004 fabf 	bl	8004cf8 <siprintf>
                        uart_serial_print(buf, sizeof(buf));
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	211e      	movs	r1, #30
 8000780:	4618      	mov	r0, r3
 8000782:	f001 f9d3 	bl	8001b2c <uart_serial_print>
                        memset(buf, '\0', sizeof(buf));
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	221e      	movs	r2, #30
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f004 fad2 	bl	8004d38 <memset>
                        sprintf(buf, "*******************\r\n" ); 
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	4966      	ldr	r1, [pc, #408]	@ (8000934 <application_StateMachine+0x38c>)
 800079a:	4618      	mov	r0, r3
 800079c:	f004 faac 	bl	8004cf8 <siprintf>
                        uart_serial_print(buf, sizeof(buf));
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	211e      	movs	r1, #30
 80007a6:	4618      	mov	r0, r3
 80007a8:	f001 f9c0 	bl	8001b2c <uart_serial_print>
                        memset(buf, '\0', sizeof(buf));
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	221e      	movs	r2, #30
 80007b2:	2100      	movs	r1, #0
 80007b4:	4618      	mov	r0, r3
 80007b6:	f004 fabf 	bl	8004d38 <memset>
                    } 
                }
                break;
 80007ba:	e0c9      	b.n	8000950 <application_StateMachine+0x3a8>
            case APP_STATE_3: 
                // Determine if the message has the correct pgn for the state
                if(j1939_PGNCompare(newMessage.message_id.PGN, STATE_3_PGN))
 80007bc:	88bb      	ldrh	r3, [r7, #4]
 80007be:	f64f 7103 	movw	r1, #65283	@ 0xff03
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 fc36 	bl	8001034 <j1939_PGNCompare>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	f000 80c2 	beq.w	8000954 <application_StateMachine+0x3ac>
                {
                    uint16_t data = newMessage.data_buffer[6] << 8; 
 80007d0:	7c3b      	ldrb	r3, [r7, #16]
 80007d2:	021b      	lsls	r3, r3, #8
 80007d4:	867b      	strh	r3, [r7, #50]	@ 0x32
                    data |= newMessage.data_buffer[5]; 
 80007d6:	7bfb      	ldrb	r3, [r7, #15]
 80007d8:	461a      	mov	r2, r3
 80007da:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80007dc:	4313      	orrs	r3, r2
 80007de:	867b      	strh	r3, [r7, #50]	@ 0x32
                    // Determine if the data is valid and in the correct position
                    if(data == STATE_3_RX_DATA)
 80007e0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80007e2:	f241 0223 	movw	r2, #4131	@ 0x1023
 80007e6:	4293      	cmp	r3, r2
 80007e8:	f040 80b4 	bne.w	8000954 <application_StateMachine+0x3ac>
                    {
                        applicationState = APP_STATE_4;
 80007ec:	4b50      	ldr	r3, [pc, #320]	@ (8000930 <application_StateMachine+0x388>)
 80007ee:	2204      	movs	r2, #4
 80007f0:	701a      	strb	r2, [r3, #0]

                        sprintf(buf, "*******************\r\n" ); 
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	494f      	ldr	r1, [pc, #316]	@ (8000934 <application_StateMachine+0x38c>)
 80007f8:	4618      	mov	r0, r3
 80007fa:	f004 fa7d 	bl	8004cf8 <siprintf>
                        uart_serial_print(buf, sizeof(buf));
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	211e      	movs	r1, #30
 8000804:	4618      	mov	r0, r3
 8000806:	f001 f991 	bl	8001b2c <uart_serial_print>
                        memset(buf, '\0', sizeof(buf));
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	221e      	movs	r2, #30
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f004 fa90 	bl	8004d38 <memset>
                        sprintf(buf, "App State 4\r\n"); 
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4949      	ldr	r1, [pc, #292]	@ (8000944 <application_StateMachine+0x39c>)
 800081e:	4618      	mov	r0, r3
 8000820:	f004 fa6a 	bl	8004cf8 <siprintf>
                        uart_serial_print(buf, sizeof(buf));
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	211e      	movs	r1, #30
 800082a:	4618      	mov	r0, r3
 800082c:	f001 f97e 	bl	8001b2c <uart_serial_print>
                        memset(buf, '\0', sizeof(buf));
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	221e      	movs	r2, #30
 8000836:	2100      	movs	r1, #0
 8000838:	4618      	mov	r0, r3
 800083a:	f004 fa7d 	bl	8004d38 <memset>
                        sprintf(buf, "*******************\r\n" ); 
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	493c      	ldr	r1, [pc, #240]	@ (8000934 <application_StateMachine+0x38c>)
 8000844:	4618      	mov	r0, r3
 8000846:	f004 fa57 	bl	8004cf8 <siprintf>
                        uart_serial_print(buf, sizeof(buf));
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	211e      	movs	r1, #30
 8000850:	4618      	mov	r0, r3
 8000852:	f001 f96b 	bl	8001b2c <uart_serial_print>
                        memset(buf, '\0', sizeof(buf));
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	221e      	movs	r2, #30
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f004 fa6a 	bl	8004d38 <memset>
                    } 
                }
                break;
 8000864:	e076      	b.n	8000954 <application_StateMachine+0x3ac>
            case APP_STATE_4: 
                // Determine if the message has the correct pgn for the state
                if(j1939_PGNCompare(newMessage.message_id.PGN, STATE_4_PGN))
 8000866:	88bb      	ldrh	r3, [r7, #4]
 8000868:	f64f 7104 	movw	r1, #65284	@ 0xff04
 800086c:	4618      	mov	r0, r3
 800086e:	f000 fbe1 	bl	8001034 <j1939_PGNCompare>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d06f      	beq.n	8000958 <application_StateMachine+0x3b0>
                {
                    uint32_t data = newMessage.data_buffer[7] << 24; 
 8000878:	7c7b      	ldrb	r3, [r7, #17]
 800087a:	061b      	lsls	r3, r3, #24
 800087c:	637b      	str	r3, [r7, #52]	@ 0x34
                    data |= (newMessage.data_buffer[6] << 16); 
 800087e:	7c3b      	ldrb	r3, [r7, #16]
 8000880:	041b      	lsls	r3, r3, #16
 8000882:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000884:	4313      	orrs	r3, r2
 8000886:	637b      	str	r3, [r7, #52]	@ 0x34
                    data |= (newMessage.data_buffer[5] << 8);
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	021b      	lsls	r3, r3, #8
 800088c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800088e:	4313      	orrs	r3, r2
 8000890:	637b      	str	r3, [r7, #52]	@ 0x34
                    data |= (newMessage.data_buffer[4] << 0);
 8000892:	7bbb      	ldrb	r3, [r7, #14]
 8000894:	461a      	mov	r2, r3
 8000896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000898:	4313      	orrs	r3, r2
 800089a:	637b      	str	r3, [r7, #52]	@ 0x34
                    // Determine if the data is valid and in the correct position
                    if(data == STATE_4_RX_DATA)
 800089c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800089e:	4a2a      	ldr	r2, [pc, #168]	@ (8000948 <application_StateMachine+0x3a0>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d159      	bne.n	8000958 <application_StateMachine+0x3b0>
                    {
                        applicationState = APP_STATE_NOT_STARTED;
 80008a4:	4b22      	ldr	r3, [pc, #136]	@ (8000930 <application_StateMachine+0x388>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]

                        sprintf(buf, "*******************\r\n" ); 
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	4921      	ldr	r1, [pc, #132]	@ (8000934 <application_StateMachine+0x38c>)
 80008b0:	4618      	mov	r0, r3
 80008b2:	f004 fa21 	bl	8004cf8 <siprintf>
                        uart_serial_print(buf, sizeof(buf));
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	211e      	movs	r1, #30
 80008bc:	4618      	mov	r0, r3
 80008be:	f001 f935 	bl	8001b2c <uart_serial_print>
                        memset(buf, '\0', sizeof(buf));
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	221e      	movs	r2, #30
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f004 fa34 	bl	8004d38 <memset>
                        sprintf(buf, "App State Success\r\n"); 
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	491d      	ldr	r1, [pc, #116]	@ (800094c <application_StateMachine+0x3a4>)
 80008d6:	4618      	mov	r0, r3
 80008d8:	f004 fa0e 	bl	8004cf8 <siprintf>
                        uart_serial_print(buf, sizeof(buf));
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	211e      	movs	r1, #30
 80008e2:	4618      	mov	r0, r3
 80008e4:	f001 f922 	bl	8001b2c <uart_serial_print>
                        memset(buf, '\0', sizeof(buf));
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	221e      	movs	r2, #30
 80008ee:	2100      	movs	r1, #0
 80008f0:	4618      	mov	r0, r3
 80008f2:	f004 fa21 	bl	8004d38 <memset>
                        sprintf(buf, "*******************\r\n" ); 
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	490e      	ldr	r1, [pc, #56]	@ (8000934 <application_StateMachine+0x38c>)
 80008fc:	4618      	mov	r0, r3
 80008fe:	f004 f9fb 	bl	8004cf8 <siprintf>
                        uart_serial_print(buf, sizeof(buf));
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	211e      	movs	r1, #30
 8000908:	4618      	mov	r0, r3
 800090a:	f001 f90f 	bl	8001b2c <uart_serial_print>
                        memset(buf, '\0', sizeof(buf));
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	221e      	movs	r2, #30
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f004 fa0e 	bl	8004d38 <memset>
                    } 
                }
                break;
 800091c:	e01c      	b.n	8000958 <application_StateMachine+0x3b0>
            case APP_STATE_SUCCESS:
                applicationState = APP_STATE_NOT_STARTED; 
 800091e:	4b04      	ldr	r3, [pc, #16]	@ (8000930 <application_StateMachine+0x388>)
 8000920:	2200      	movs	r2, #0
 8000922:	701a      	strb	r2, [r3, #0]
                break;
 8000924:	e019      	b.n	800095a <application_StateMachine+0x3b2>
                break; 
 8000926:	bf00      	nop
 8000928:	e017      	b.n	800095a <application_StateMachine+0x3b2>
                break;
 800092a:	bf00      	nop
 800092c:	e015      	b.n	800095a <application_StateMachine+0x3b2>
 800092e:	bf00      	nop
 8000930:	200000c8 	.word	0x200000c8
 8000934:	08005650 	.word	0x08005650
 8000938:	08005668 	.word	0x08005668
 800093c:	08005678 	.word	0x08005678
 8000940:	08005688 	.word	0x08005688
 8000944:	08005698 	.word	0x08005698
 8000948:	1234669b 	.word	0x1234669b
 800094c:	080056a8 	.word	0x080056a8
                break;
 8000950:	bf00      	nop
 8000952:	e002      	b.n	800095a <application_StateMachine+0x3b2>
                break;
 8000954:	bf00      	nop
 8000956:	e000      	b.n	800095a <application_StateMachine+0x3b2>
                break;
 8000958:	bf00      	nop
        }
    }
}
 800095a:	bf00      	nop
 800095c:	3738      	adds	r7, #56	@ 0x38
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop

08000964 <GetApplicationState>:

app_state_machine_t GetApplicationState(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
    return applicationState; 
 8000968:	4b03      	ldr	r3, [pc, #12]	@ (8000978 <GetApplicationState+0x14>)
 800096a:	781b      	ldrb	r3, [r3, #0]
}
 800096c:	4618      	mov	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	200000c8 	.word	0x200000c8

0800097c <canspi_Init>:

    @{
*/
/******************************************************************************/
bool canspi_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
    // {
    //     return false;
    // }
        
    /* Change mode as configuration mode */
    if(!MCP2515_SetConfigurationMode())
 8000980:	f000 fdde 	bl	8001540 <MCP2515_SetConfigurationMode>
 8000984:	4603      	mov	r3, r0
 8000986:	f083 0301 	eor.w	r3, r3, #1
 800098a:	b2db      	uxtb	r3, r3
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <canspi_Init+0x18>
    {
        return false;
 8000990:	2300      	movs	r3, #0
 8000992:	e012      	b.n	80009ba <canspi_Init+0x3e>
    * 16tq = 2us = 500kbps
    */
    
    // MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
    /* 00(SJW 1tq) 000000 */  
    MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 8000994:	2100      	movs	r1, #0
 8000996:	202a      	movs	r0, #42	@ 0x2a
 8000998:	f000 fe7e 	bl	8001698 <MCP2515_WriteByte>
    
    /* 1 1 100(5tq) 101(6tq) */  
    MCP2515_WriteByte(MCP2515_CNF2, 0xBF);
 800099c:	21bf      	movs	r1, #191	@ 0xbf
 800099e:	2029      	movs	r0, #41	@ 0x29
 80009a0:	f000 fe7a 	bl	8001698 <MCP2515_WriteByte>
    
    /* 1 0 000 011(4tq) */  
    MCP2515_WriteByte(MCP2515_CNF3, 0x02);   
 80009a4:	2102      	movs	r1, #2
 80009a6:	2028      	movs	r0, #40	@ 0x28
 80009a8:	f000 fe76 	bl	8001698 <MCP2515_WriteByte>

    MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 80009ac:	2100      	movs	r1, #0
 80009ae:	200f      	movs	r0, #15
 80009b0:	f000 fe72 	bl	8001698 <MCP2515_WriteByte>
    MCP2515_SetNormalMode(); 
 80009b4:	f000 fe1c 	bl	80015f0 <MCP2515_SetNormalMode>
    return true; 
 80009b8:	2301      	movs	r3, #1
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	bd80      	pop	{r7, pc}

080009be <canspi_TransmitMessage>:

    @{
*/
/******************************************************************************/
uint8_t canspi_TransmitMessage(can_msg_t *can_message)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b086      	sub	sp, #24
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
    // char buf[30]; 
    uint8_t retVal = 0; 
 80009c6:	2300      	movs	r3, #0
 80009c8:	75fb      	strb	r3, [r7, #23]
    id_reg_t regId;
    regId.SIDH = 0; 
 80009ca:	2300      	movs	r3, #0
 80009cc:	743b      	strb	r3, [r7, #16]
    regId.SIDL = 0; 
 80009ce:	2300      	movs	r3, #0
 80009d0:	747b      	strb	r3, [r7, #17]
    regId.EID8 = 0; 
 80009d2:	2300      	movs	r3, #0
 80009d4:	74bb      	strb	r3, [r7, #18]
    regId.EID0 = 0;  
 80009d6:	2300      	movs	r3, #0
 80009d8:	74fb      	strb	r3, [r7, #19]

    ctrl_status_t control_status = MCP2515_GetControlStatus(); 
 80009da:	f000 feed 	bl	80017b8 <MCP2515_GetControlStatus>
 80009de:	4603      	mov	r3, r0
 80009e0:	60fb      	str	r3, [r7, #12]

    canspi_ConvertIDToReg(can_message->frame.canId, &regId); 
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f107 0210 	add.w	r2, r7, #16
 80009ea:	4611      	mov	r1, r2
 80009ec:	4618      	mov	r0, r3
 80009ee:	f000 f92a 	bl	8000c46 <canspi_ConvertIDToReg>

    if(control_status.TXB0REQ != 1)
 80009f2:	7b3b      	ldrb	r3, [r7, #12]
 80009f4:	f003 0304 	and.w	r3, r3, #4
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d10e      	bne.n	8000a1c <canspi_TransmitMessage+0x5e>
    {
        //Load data into the buffer
        MCP2515_WriteTxBuffer(MCP2515_LOAD_TXB0SIDH, &(regId.SIDH), &(can_message->frame.data0), can_message->frame.dlc); 
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	1d5a      	adds	r2, r3, #5
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	791b      	ldrb	r3, [r3, #4]
 8000a06:	f107 0110 	add.w	r1, r7, #16
 8000a0a:	2040      	movs	r0, #64	@ 0x40
 8000a0c:	f000 fe68 	bl	80016e0 <MCP2515_WriteTxBuffer>
        MCP2515_RequestToSend(MCP2515_RTS_TX0);
 8000a10:	2081      	movs	r0, #129	@ 0x81
 8000a12:	f000 feed 	bl	80017f0 <MCP2515_RequestToSend>
        retVal = 1;  
 8000a16:	2301      	movs	r3, #1
 8000a18:	75fb      	strb	r3, [r7, #23]
 8000a1a:	e028      	b.n	8000a6e <canspi_TransmitMessage+0xb0>
    }

    else if(control_status.TXB1REQ != 1)
 8000a1c:	7b3b      	ldrb	r3, [r7, #12]
 8000a1e:	f003 0310 	and.w	r3, r3, #16
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d10e      	bne.n	8000a46 <canspi_TransmitMessage+0x88>
    {
        //Load data into the buffer
        MCP2515_WriteTxBuffer(MCP2515_LOAD_TXB1SIDH, &(regId.SIDH), &(can_message->frame.data0), can_message->frame.dlc);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	1d5a      	adds	r2, r3, #5
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	791b      	ldrb	r3, [r3, #4]
 8000a30:	f107 0110 	add.w	r1, r7, #16
 8000a34:	2042      	movs	r0, #66	@ 0x42
 8000a36:	f000 fe53 	bl	80016e0 <MCP2515_WriteTxBuffer>
        MCP2515_RequestToSend(MCP2515_RTS_TX1);
 8000a3a:	2082      	movs	r0, #130	@ 0x82
 8000a3c:	f000 fed8 	bl	80017f0 <MCP2515_RequestToSend>
        retVal = 1; 
 8000a40:	2301      	movs	r3, #1
 8000a42:	75fb      	strb	r3, [r7, #23]
 8000a44:	e013      	b.n	8000a6e <canspi_TransmitMessage+0xb0>
    }

    else if(control_status.TXB2REQ != 1)
 8000a46:	7b3b      	ldrb	r3, [r7, #12]
 8000a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d10d      	bne.n	8000a6e <canspi_TransmitMessage+0xb0>
    {
        //Load data into the buffer
        MCP2515_WriteTxBuffer(MCP2515_LOAD_TXB2SIDH, &(regId.SIDH), &(can_message->frame.data0), can_message->frame.dlc);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	1d5a      	adds	r2, r3, #5
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	791b      	ldrb	r3, [r3, #4]
 8000a5a:	f107 0110 	add.w	r1, r7, #16
 8000a5e:	2044      	movs	r0, #68	@ 0x44
 8000a60:	f000 fe3e 	bl	80016e0 <MCP2515_WriteTxBuffer>
        MCP2515_RequestToSend(MCP2515_RTS_TX2);
 8000a64:	2084      	movs	r0, #132	@ 0x84
 8000a66:	f000 fec3 	bl	80017f0 <MCP2515_RequestToSend>
        retVal = 1; 
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	75fb      	strb	r3, [r7, #23]
    }

    return retVal;
 8000a6e:	7dfb      	ldrb	r3, [r7, #23]
}    
 8000a70:	4618      	mov	r0, r3
 8000a72:	3718      	adds	r7, #24
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <canspi_ReceiveMessage>:

    @{
*/
/******************************************************************************/
uint8_t canspi_ReceiveMessage(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08e      	sub	sp, #56	@ 0x38
 8000a7c:	af00      	add	r7, sp, #0
    uint8_t retVal = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    id_reg_t idReg;
    uint32_t idExt; 
    j1939_message_t message; 
    // char buf[30]; 

    uint8_t bufferByte = (REG_MASK_RX_BUFFER & MCP2515_ReadByte(MCP2515_CANINTF));
 8000a84:	202c      	movs	r0, #44	@ 0x2c
 8000a86:	f000 fe57 	bl	8001738 <MCP2515_ReadByte>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	f003 0303 	and.w	r3, r3, #3
 8000a90:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    // bufferByte &= REG_MASK_RX_BUFFER;

    rxStatus = MCP2515_GetRxStatus();
 8000a94:	f000 fe74 	bl	8001780 <MCP2515_GetRxStatus>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	623b      	str	r3, [r7, #32]
    /* Check receive buffer */
    if (rxStatus.rxBuffer != 0)
 8000a9c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000aa0:	f003 0303 	and.w	r3, r3, #3
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d07c      	beq.n	8000ba4 <canspi_ReceiveMessage+0x12c>
        // uart_serial_print(buf, sizeof(buf));
        // memset(buf, '\0', sizeof(buf));

        /* finding buffer which has a message */
        //if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
        if((bufferByte == MSG_IN_RXB0) | (bufferByte == MSG_IN_BOTH_BUFFERS))
 8000aaa:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	bf0c      	ite	eq
 8000ab2:	2301      	moveq	r3, #1
 8000ab4:	2300      	movne	r3, #0
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000abc:	2b03      	cmp	r3, #3
 8000abe:	bf0c      	ite	eq
 8000ac0:	2301      	moveq	r3, #1
 8000ac2:	2300      	movne	r3, #0
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d005      	beq.n	8000ada <canspi_ReceiveMessage+0x62>
        {
            canspi_readRxBuffer(&rxReg, 0);
 8000ace:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 f927 	bl	8000d28 <canspi_readRxBuffer>
        }
        if (rxStatus.rxBuffer == MSG_IN_RXB1)
 8000ada:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ade:	f003 0303 	and.w	r3, r3, #3
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d105      	bne.n	8000af4 <canspi_ReceiveMessage+0x7c>
        {
            canspi_readRxBuffer(&rxReg, 1);
 8000ae8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aec:	2101      	movs	r1, #1
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 f91a 	bl	8000d28 <canspi_readRxBuffer>
        }

        idReg.SIDH = rxReg.RXBnSIDH; 
 8000af4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000af8:	773b      	strb	r3, [r7, #28]
        idReg.SIDL = rxReg.RXBnSIDL; 
 8000afa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000afe:	777b      	strb	r3, [r7, #29]
        idReg.EID8 = rxReg.RXBnEID8; 
 8000b00:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000b04:	77bb      	strb	r3, [r7, #30]
        idReg.EID0 = rxReg.RXBnEID0; 
 8000b06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000b0a:	77fb      	strb	r3, [r7, #31]
         
        canspi_ConvertRegToID(idReg, &idExt); 
 8000b0c:	f107 0318 	add.w	r3, r7, #24
 8000b10:	4619      	mov	r1, r3
 8000b12:	69f8      	ldr	r0, [r7, #28]
 8000b14:	f000 f84c 	bl	8000bb0 <canspi_ConvertRegToID>
        can_ext_id_t canId;
        canId.id = idExt;  
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	607b      	str	r3, [r7, #4]
   
        uint16_t pgn = canId.frame.pf; 
 8000b1c:	88bb      	ldrh	r3, [r7, #4]
 8000b1e:	f3c3 1347 	ubfx	r3, r3, #5, #8
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	86bb      	strh	r3, [r7, #52]	@ 0x34
        pgn = (pgn << 8) | canId.frame.ps; 
 8000b26:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000b28:	021b      	lsls	r3, r3, #8
 8000b2a:	b21a      	sxth	r2, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f3c3 3347 	ubfx	r3, r3, #13, #8
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	b21b      	sxth	r3, r3
 8000b36:	4313      	orrs	r3, r2
 8000b38:	b21b      	sxth	r3, r3
 8000b3a:	86bb      	strh	r3, [r7, #52]	@ 0x34

        message.message_id.PGN = pgn; 
 8000b3c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000b3e:	813b      	strh	r3, [r7, #8]
        message.message_id.destination_address = canId.frame.ps; 
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f3c3 3347 	ubfx	r3, r3, #13, #8
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	72bb      	strb	r3, [r7, #10]
        message.message_id.source_address = canId.frame.source_address;
 8000b4a:	88fb      	ldrh	r3, [r7, #6]
 8000b4c:	f3c3 1347 	ubfx	r3, r3, #5, #8
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	72fb      	strb	r3, [r7, #11]
        message.message_id.priority = canId.frame.priority; 
 8000b54:	793b      	ldrb	r3, [r7, #4]
 8000b56:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	733b      	strb	r3, [r7, #12]

        message.length = rxReg.RXBnDLC;
 8000b5e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000b62:	75bb      	strb	r3, [r7, #22]
        message.data_buffer[0] = rxReg.RXBnD0;; 
 8000b64:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000b68:	73bb      	strb	r3, [r7, #14]
        message.data_buffer[1] = rxReg.RXBnD1;
 8000b6a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000b6e:	73fb      	strb	r3, [r7, #15]
        message.data_buffer[2] = rxReg.RXBnD2;
 8000b70:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000b74:	743b      	strb	r3, [r7, #16]
        message.data_buffer[3] = rxReg.RXBnD3;
 8000b76:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000b7a:	747b      	strb	r3, [r7, #17]
        message.data_buffer[4] = rxReg.RXBnD4;
 8000b7c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000b80:	74bb      	strb	r3, [r7, #18]
        message.data_buffer[5] = rxReg.RXBnD5;
 8000b82:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000b86:	74fb      	strb	r3, [r7, #19]
        message.data_buffer[6] = rxReg.RXBnD6;
 8000b88:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b8c:	753b      	strb	r3, [r7, #20]
        message.data_buffer[7] = rxReg.RXBnD7;
 8000b8e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000b92:	757b      	strb	r3, [r7, #21]

        j1939_AddMessageToTable(message);
 8000b94:	f107 0308 	add.w	r3, r7, #8
 8000b98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b9a:	f000 f923 	bl	8000de4 <j1939_AddMessageToTable>
        retVal = 1;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        
    }
    return retVal; 
 8000ba4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3738      	adds	r7, #56	@ 0x38
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <canspi_ConvertRegToID>:

    @{
*/
/******************************************************************************/
void canspi_ConvertRegToID(id_reg_t regId, uint32_t *canId)
{   
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
    // Temp variable type for unpacking the registers
    can_ext_id_t extId;  
    // Ext ID 28:24
    extId.frame.priority = ((regId.SIDH & ID_MASK_PRIORITY) >> 5); 
 8000bba:	793b      	ldrb	r3, [r7, #4]
 8000bbc:	095b      	lsrs	r3, r3, #5
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	f003 0307 	and.w	r3, r3, #7
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	7b3b      	ldrb	r3, [r7, #12]
 8000bc8:	f362 0302 	bfi	r3, r2, #0, #3
 8000bcc:	733b      	strb	r3, [r7, #12]
    extId.frame.edp = ((regId.SIDH & ID_MASK_EDP) >> 4);
 8000bce:	793b      	ldrb	r3, [r7, #4]
 8000bd0:	111b      	asrs	r3, r3, #4
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	7b3b      	ldrb	r3, [r7, #12]
 8000bda:	f362 03c3 	bfi	r3, r2, #3, #1
 8000bde:	733b      	strb	r3, [r7, #12]
    extId.frame.dp = ((regId.SIDH & ID_MASK_DP) >> 3);  
 8000be0:	793b      	ldrb	r3, [r7, #4]
 8000be2:	10db      	asrs	r3, r3, #3
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	7b3b      	ldrb	r3, [r7, #12]
 8000bec:	f362 1304 	bfi	r3, r2, #4, #1
 8000bf0:	733b      	strb	r3, [r7, #12]

    // Ext ID 23:16
    extId.frame.pf = ((((regId.SIDH & ID_MASK_PF_MSB) << 5)    |
 8000bf2:	793b      	ldrb	r3, [r7, #4]
 8000bf4:	015b      	lsls	r3, r3, #5
 8000bf6:	b25a      	sxtb	r2, r3
                        (regId.SIDL & ID_MASK_PF_LSBUB) >> 3)   |
 8000bf8:	797b      	ldrb	r3, [r7, #5]
 8000bfa:	10db      	asrs	r3, r3, #3
 8000bfc:	b25b      	sxtb	r3, r3
 8000bfe:	f003 031c 	and.w	r3, r3, #28
 8000c02:	b25b      	sxtb	r3, r3
    extId.frame.pf = ((((regId.SIDH & ID_MASK_PF_MSB) << 5)    |
 8000c04:	4313      	orrs	r3, r2
 8000c06:	b25a      	sxtb	r2, r3
                        (regId.SIDL & ID_MASK_PF_LSBLB));
 8000c08:	797b      	ldrb	r3, [r7, #5]
 8000c0a:	b25b      	sxtb	r3, r3
 8000c0c:	f003 0303 	and.w	r3, r3, #3
 8000c10:	b25b      	sxtb	r3, r3
                        (regId.SIDL & ID_MASK_PF_LSBUB) >> 3)   |
 8000c12:	4313      	orrs	r3, r2
 8000c14:	b25b      	sxtb	r3, r3
 8000c16:	b2da      	uxtb	r2, r3
    extId.frame.pf = ((((regId.SIDH & ID_MASK_PF_MSB) << 5)    |
 8000c18:	89bb      	ldrh	r3, [r7, #12]
 8000c1a:	f362 134c 	bfi	r3, r2, #5, #8
 8000c1e:	81bb      	strh	r3, [r7, #12]
    // Ext ID 15:8
    extId.frame.ps = regId.EID8; 
 8000c20:	79ba      	ldrb	r2, [r7, #6]
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	f362 3354 	bfi	r3, r2, #13, #8
 8000c28:	60fb      	str	r3, [r7, #12]
    // Ext ID 7:0
    extId.frame.source_address = regId.EID0; 
 8000c2a:	79fa      	ldrb	r2, [r7, #7]
 8000c2c:	89fb      	ldrh	r3, [r7, #14]
 8000c2e:	f362 134c 	bfi	r3, r2, #5, #8
 8000c32:	81fb      	strh	r3, [r7, #14]

    *canId = extId.id; 
 8000c34:	68fa      	ldr	r2, [r7, #12]
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	601a      	str	r2, [r3, #0]
}
 8000c3a:	bf00      	nop
 8000c3c:	3714      	adds	r7, #20
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <canspi_ConvertIDToReg>:

    @{
*/
/******************************************************************************/
void canspi_ConvertIDToReg(uint32_t canId, id_reg_t *regId)
{
 8000c46:	b480      	push	{r7}
 8000c48:	b085      	sub	sp, #20
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
 8000c4e:	6039      	str	r1, [r7, #0]
    can_ext_id_t extId; 
    extId.id = canId; 
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	60fb      	str	r3, [r7, #12]
    // SIDH 7:5
    regId->SIDH = (extId.frame.priority << 5); 
 8000c54:	7b3b      	ldrb	r3, [r7, #12]
 8000c56:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	015b      	lsls	r3, r3, #5
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	701a      	strb	r2, [r3, #0]
    // SIDH 4:4 
    regId->SIDH |= (extId.frame.edp << 4);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	b25a      	sxtb	r2, r3
 8000c6a:	7b3b      	ldrb	r3, [r7, #12]
 8000c6c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	011b      	lsls	r3, r3, #4
 8000c74:	b25b      	sxtb	r3, r3
 8000c76:	4313      	orrs	r3, r2
 8000c78:	b25b      	sxtb	r3, r3
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	701a      	strb	r2, [r3, #0]
    // SIDH 3:3
    regId->SIDH |= (extId.frame.dp << 3);
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	b25a      	sxtb	r2, r3
 8000c86:	7b3b      	ldrb	r3, [r7, #12]
 8000c88:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	00db      	lsls	r3, r3, #3
 8000c90:	b25b      	sxtb	r3, r3
 8000c92:	4313      	orrs	r3, r2
 8000c94:	b25b      	sxtb	r3, r3
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	701a      	strb	r2, [r3, #0]
    // SIDH 2:0 
    regId->SIDH |= ((extId.frame.pf & REG_MASK_PF_MSB) >> 5);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	781a      	ldrb	r2, [r3, #0]
 8000ca0:	89bb      	ldrh	r3, [r7, #12]
 8000ca2:	f3c3 1347 	ubfx	r3, r3, #5, #8
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	095b      	lsrs	r3, r3, #5
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	4313      	orrs	r3, r2
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	701a      	strb	r2, [r3, #0]

    // SIDL 7:5 
    regId->SIDL |= ((extId.frame.pf & REG_MASK_PF_LSBUB) << 3); 
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	785b      	ldrb	r3, [r3, #1]
 8000cb8:	b25a      	sxtb	r2, r3
 8000cba:	89bb      	ldrh	r3, [r7, #12]
 8000cbc:	f3c3 1347 	ubfx	r3, r3, #5, #8
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	b25b      	sxtb	r3, r3
 8000cc6:	f023 031f 	bic.w	r3, r3, #31
 8000cca:	b25b      	sxtb	r3, r3
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	b25b      	sxtb	r3, r3
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	705a      	strb	r2, [r3, #1]
    // SIDL 3:3 Always set the Ext ID bit high
    regId->SIDL |= REG_MASK_IDE; 
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	785b      	ldrb	r3, [r3, #1]
 8000cda:	f043 0308 	orr.w	r3, r3, #8
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	705a      	strb	r2, [r3, #1]
    // SIDL 2:0 
    regId->SIDL |= ((extId.frame.pf & REG_MASK_PF_LSBLB));
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	785b      	ldrb	r3, [r3, #1]
 8000ce8:	b25a      	sxtb	r2, r3
 8000cea:	89bb      	ldrh	r3, [r7, #12]
 8000cec:	f3c3 1347 	ubfx	r3, r3, #5, #8
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	b25b      	sxtb	r3, r3
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	b25b      	sxtb	r3, r3
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	b25b      	sxtb	r3, r3
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	705a      	strb	r2, [r3, #1]
    
    // EID8 7:0
    regId->EID8 = extId.frame.ps; 
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f3c3 3347 	ubfx	r3, r3, #13, #8
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	709a      	strb	r2, [r3, #2]

    // EID0 7:0
    regId->EID0 = extId.frame.source_address;
 8000d10:	89fb      	ldrh	r3, [r7, #14]
 8000d12:	f3c3 1347 	ubfx	r3, r3, #5, #8
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	70da      	strb	r2, [r3, #3]
}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <canspi_readRxBuffer>:
    canspi_ReceiveMessage();
 
}

void canspi_readRxBuffer(rx_reg_t *rxData, uint8_t regPosition)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	70fb      	strb	r3, [r7, #3]
    uint8_t readByte = 0; 
 8000d34:	2300      	movs	r3, #0
 8000d36:	73fb      	strb	r3, [r7, #15]

    if(regPosition == 0)
 8000d38:	78fb      	ldrb	r3, [r7, #3]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d125      	bne.n	8000d8a <canspi_readRxBuffer+0x62>
    {
        for(int i = 0; i < 13; i++)
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
 8000d42:	e010      	b.n	8000d66 <canspi_readRxBuffer+0x3e>
        {
            rxData->rx_reg_array[i] = MCP2515_ReadByte(MCP2515_RXB0SIDH + i); 
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	3361      	adds	r3, #97	@ 0x61
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 fcf3 	bl	8001738 <MCP2515_ReadByte>
 8000d52:	4603      	mov	r3, r0
 8000d54:	4619      	mov	r1, r3
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	460a      	mov	r2, r1
 8000d5e:	701a      	strb	r2, [r3, #0]
        for(int i = 0; i < 13; i++)
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	3301      	adds	r3, #1
 8000d64:	617b      	str	r3, [r7, #20]
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	2b0c      	cmp	r3, #12
 8000d6a:	ddeb      	ble.n	8000d44 <canspi_readRxBuffer+0x1c>
        }
        //Clear interrupt flag: bit 0
        readByte = MCP2515_ReadByte(MCP2515_CANINTF);
 8000d6c:	202c      	movs	r0, #44	@ 0x2c
 8000d6e:	f000 fce3 	bl	8001738 <MCP2515_ReadByte>
 8000d72:	4603      	mov	r3, r0
 8000d74:	73fb      	strb	r3, [r7, #15]
        readByte &= ~(1 << 0);
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	f023 0301 	bic.w	r3, r3, #1
 8000d7c:	73fb      	strb	r3, [r7, #15]
        MCP2515_WriteByte(MCP2515_CANINTF, readByte);
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	4619      	mov	r1, r3
 8000d82:	202c      	movs	r0, #44	@ 0x2c
 8000d84:	f000 fc88 	bl	8001698 <MCP2515_WriteByte>
        //Clear interrupt flag: bit 1
        readByte = MCP2515_ReadByte(MCP2515_CANINTF);
        readByte &= ~(1 << 1);
        MCP2515_WriteByte(MCP2515_CANINTF, readByte);
    }
}
 8000d88:	e027      	b.n	8000dda <canspi_readRxBuffer+0xb2>
    else if(regPosition == 1)
 8000d8a:	78fb      	ldrb	r3, [r7, #3]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d124      	bne.n	8000dda <canspi_readRxBuffer+0xb2>
        for(int i = 0; i < 13; i++)
 8000d90:	2300      	movs	r3, #0
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	e010      	b.n	8000db8 <canspi_readRxBuffer+0x90>
            rxData->rx_reg_array[i] = MCP2515_ReadByte(MCP2515_RXB1SIDH + i); 
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	3371      	adds	r3, #113	@ 0x71
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 fcca 	bl	8001738 <MCP2515_ReadByte>
 8000da4:	4603      	mov	r3, r0
 8000da6:	4619      	mov	r1, r3
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	4413      	add	r3, r2
 8000dae:	460a      	mov	r2, r1
 8000db0:	701a      	strb	r2, [r3, #0]
        for(int i = 0; i < 13; i++)
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	3301      	adds	r3, #1
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	2b0c      	cmp	r3, #12
 8000dbc:	ddeb      	ble.n	8000d96 <canspi_readRxBuffer+0x6e>
        readByte = MCP2515_ReadByte(MCP2515_CANINTF);
 8000dbe:	202c      	movs	r0, #44	@ 0x2c
 8000dc0:	f000 fcba 	bl	8001738 <MCP2515_ReadByte>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	73fb      	strb	r3, [r7, #15]
        readByte &= ~(1 << 1);
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
 8000dca:	f023 0302 	bic.w	r3, r3, #2
 8000dce:	73fb      	strb	r3, [r7, #15]
        MCP2515_WriteByte(MCP2515_CANINTF, readByte);
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	202c      	movs	r0, #44	@ 0x2c
 8000dd6:	f000 fc5f 	bl	8001698 <MCP2515_WriteByte>
}
 8000dda:	bf00      	nop
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <j1939_AddMessageToTable>:
        rxMsgCircBuffer.message[i].isMessageNew = false; 
    }
}

void j1939_AddMessageToTable(j1939_message_t newMessage)
{
 8000de4:	b490      	push	{r4, r7}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	463c      	mov	r4, r7
 8000dec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if(rxMsgCircBuffer.tail != (J1939_MAX_BUFFER_SIZE - 1))
 8000df0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e70 <j1939_AddMessageToTable+0x8c>)
 8000df2:	f893 31e1 	ldrb.w	r3, [r3, #481]	@ 0x1e1
 8000df6:	2b1d      	cmp	r3, #29
 8000df8:	d01c      	beq.n	8000e34 <j1939_AddMessageToTable+0x50>
    {   
        rxMsgCircBuffer.message[rxMsgCircBuffer.tail] = newMessage;
 8000dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8000e70 <j1939_AddMessageToTable+0x8c>)
 8000dfc:	f893 31e1 	ldrb.w	r3, [r3, #481]	@ 0x1e1
 8000e00:	4a1b      	ldr	r2, [pc, #108]	@ (8000e70 <j1939_AddMessageToTable+0x8c>)
 8000e02:	011b      	lsls	r3, r3, #4
 8000e04:	4413      	add	r3, r2
 8000e06:	461c      	mov	r4, r3
 8000e08:	463b      	mov	r3, r7
 8000e0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        rxMsgCircBuffer.message[rxMsgCircBuffer.tail].isMessageNew = true; 
 8000e10:	4b17      	ldr	r3, [pc, #92]	@ (8000e70 <j1939_AddMessageToTable+0x8c>)
 8000e12:	f893 31e1 	ldrb.w	r3, [r3, #481]	@ 0x1e1
 8000e16:	4a16      	ldr	r2, [pc, #88]	@ (8000e70 <j1939_AddMessageToTable+0x8c>)
 8000e18:	011b      	lsls	r3, r3, #4
 8000e1a:	4413      	add	r3, r2
 8000e1c:	330f      	adds	r3, #15
 8000e1e:	2201      	movs	r2, #1
 8000e20:	701a      	strb	r2, [r3, #0]
        rxMsgCircBuffer.tail++;  
 8000e22:	4b13      	ldr	r3, [pc, #76]	@ (8000e70 <j1939_AddMessageToTable+0x8c>)
 8000e24:	f893 31e1 	ldrb.w	r3, [r3, #481]	@ 0x1e1
 8000e28:	3301      	adds	r3, #1
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	4b10      	ldr	r3, [pc, #64]	@ (8000e70 <j1939_AddMessageToTable+0x8c>)
 8000e2e:	f883 21e1 	strb.w	r2, [r3, #481]	@ 0x1e1
    {
        rxMsgCircBuffer.message[rxMsgCircBuffer.tail] = newMessage;
        rxMsgCircBuffer.message[rxMsgCircBuffer.tail].isMessageNew = true; 
        rxMsgCircBuffer.tail = 0; 
    }
}
 8000e32:	e017      	b.n	8000e64 <j1939_AddMessageToTable+0x80>
        rxMsgCircBuffer.message[rxMsgCircBuffer.tail] = newMessage;
 8000e34:	4b0e      	ldr	r3, [pc, #56]	@ (8000e70 <j1939_AddMessageToTable+0x8c>)
 8000e36:	f893 31e1 	ldrb.w	r3, [r3, #481]	@ 0x1e1
 8000e3a:	4a0d      	ldr	r2, [pc, #52]	@ (8000e70 <j1939_AddMessageToTable+0x8c>)
 8000e3c:	011b      	lsls	r3, r3, #4
 8000e3e:	4413      	add	r3, r2
 8000e40:	461c      	mov	r4, r3
 8000e42:	463b      	mov	r3, r7
 8000e44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        rxMsgCircBuffer.message[rxMsgCircBuffer.tail].isMessageNew = true; 
 8000e4a:	4b09      	ldr	r3, [pc, #36]	@ (8000e70 <j1939_AddMessageToTable+0x8c>)
 8000e4c:	f893 31e1 	ldrb.w	r3, [r3, #481]	@ 0x1e1
 8000e50:	4a07      	ldr	r2, [pc, #28]	@ (8000e70 <j1939_AddMessageToTable+0x8c>)
 8000e52:	011b      	lsls	r3, r3, #4
 8000e54:	4413      	add	r3, r2
 8000e56:	330f      	adds	r3, #15
 8000e58:	2201      	movs	r2, #1
 8000e5a:	701a      	strb	r2, [r3, #0]
        rxMsgCircBuffer.tail = 0; 
 8000e5c:	4b04      	ldr	r3, [pc, #16]	@ (8000e70 <j1939_AddMessageToTable+0x8c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 21e1 	strb.w	r2, [r3, #481]	@ 0x1e1
}
 8000e64:	bf00      	nop
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc90      	pop	{r4, r7}
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	200000d4 	.word	0x200000d4

08000e74 <j1939_PullMessageFromTable>:

bool j1939_PullMessageFromTable(j1939_message_t *storedMessage)
{
 8000e74:	b5b0      	push	{r4, r5, r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
    bool retVal = false; 
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	73fb      	strb	r3, [r7, #15]
    if(j1939_AnyNewMessages())
 8000e80:	f000 f85e 	bl	8000f40 <j1939_AnyNewMessages>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d053      	beq.n	8000f32 <j1939_PullMessageFromTable+0xbe>
    {
        if(rxMsgCircBuffer.head != (J1939_MAX_BUFFER_SIZE - 1))
 8000e8a:	4b2c      	ldr	r3, [pc, #176]	@ (8000f3c <j1939_PullMessageFromTable+0xc8>)
 8000e8c:	f893 31e0 	ldrb.w	r3, [r3, #480]	@ 0x1e0
 8000e90:	2b1d      	cmp	r3, #29
 8000e92:	d028      	beq.n	8000ee6 <j1939_PullMessageFromTable+0x72>
        {
            *storedMessage = rxMsgCircBuffer.message[rxMsgCircBuffer.head]; 
 8000e94:	4b29      	ldr	r3, [pc, #164]	@ (8000f3c <j1939_PullMessageFromTable+0xc8>)
 8000e96:	f893 31e0 	ldrb.w	r3, [r3, #480]	@ 0x1e0
 8000e9a:	6879      	ldr	r1, [r7, #4]
 8000e9c:	4a27      	ldr	r2, [pc, #156]	@ (8000f3c <j1939_PullMessageFromTable+0xc8>)
 8000e9e:	011b      	lsls	r3, r3, #4
 8000ea0:	4413      	add	r3, r2
 8000ea2:	460c      	mov	r4, r1
 8000ea4:	461d      	mov	r5, r3
 8000ea6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ea8:	6020      	str	r0, [r4, #0]
 8000eaa:	6061      	str	r1, [r4, #4]
 8000eac:	60a2      	str	r2, [r4, #8]
 8000eae:	60e3      	str	r3, [r4, #12]
            rxMsgCircBuffer.message[rxMsgCircBuffer.head].isMessageNew = false; 
 8000eb0:	4b22      	ldr	r3, [pc, #136]	@ (8000f3c <j1939_PullMessageFromTable+0xc8>)
 8000eb2:	f893 31e0 	ldrb.w	r3, [r3, #480]	@ 0x1e0
 8000eb6:	4a21      	ldr	r2, [pc, #132]	@ (8000f3c <j1939_PullMessageFromTable+0xc8>)
 8000eb8:	011b      	lsls	r3, r3, #4
 8000eba:	4413      	add	r3, r2
 8000ebc:	330f      	adds	r3, #15
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	701a      	strb	r2, [r3, #0]
            canspi_CanLoopTest(rxMsgCircBuffer.message[rxMsgCircBuffer.head]);
 8000ec2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f3c <j1939_PullMessageFromTable+0xc8>)
 8000ec4:	f893 31e0 	ldrb.w	r3, [r3, #480]	@ 0x1e0
 8000ec8:	4a1c      	ldr	r2, [pc, #112]	@ (8000f3c <j1939_PullMessageFromTable+0xc8>)
 8000eca:	011b      	lsls	r3, r3, #4
 8000ecc:	4413      	add	r3, r2
 8000ece:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ed0:	f000 f8c8 	bl	8001064 <canspi_CanLoopTest>
            rxMsgCircBuffer.head++;  
 8000ed4:	4b19      	ldr	r3, [pc, #100]	@ (8000f3c <j1939_PullMessageFromTable+0xc8>)
 8000ed6:	f893 31e0 	ldrb.w	r3, [r3, #480]	@ 0x1e0
 8000eda:	3301      	adds	r3, #1
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4b17      	ldr	r3, [pc, #92]	@ (8000f3c <j1939_PullMessageFromTable+0xc8>)
 8000ee0:	f883 21e0 	strb.w	r2, [r3, #480]	@ 0x1e0
 8000ee4:	e023      	b.n	8000f2e <j1939_PullMessageFromTable+0xba>
        }
        else
        {
            *storedMessage = rxMsgCircBuffer.message[rxMsgCircBuffer.head]; 
 8000ee6:	4b15      	ldr	r3, [pc, #84]	@ (8000f3c <j1939_PullMessageFromTable+0xc8>)
 8000ee8:	f893 31e0 	ldrb.w	r3, [r3, #480]	@ 0x1e0
 8000eec:	6879      	ldr	r1, [r7, #4]
 8000eee:	4a13      	ldr	r2, [pc, #76]	@ (8000f3c <j1939_PullMessageFromTable+0xc8>)
 8000ef0:	011b      	lsls	r3, r3, #4
 8000ef2:	4413      	add	r3, r2
 8000ef4:	460c      	mov	r4, r1
 8000ef6:	461d      	mov	r5, r3
 8000ef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000efa:	6020      	str	r0, [r4, #0]
 8000efc:	6061      	str	r1, [r4, #4]
 8000efe:	60a2      	str	r2, [r4, #8]
 8000f00:	60e3      	str	r3, [r4, #12]
            rxMsgCircBuffer.message[rxMsgCircBuffer.head].isMessageNew = false;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	@ (8000f3c <j1939_PullMessageFromTable+0xc8>)
 8000f04:	f893 31e0 	ldrb.w	r3, [r3, #480]	@ 0x1e0
 8000f08:	4a0c      	ldr	r2, [pc, #48]	@ (8000f3c <j1939_PullMessageFromTable+0xc8>)
 8000f0a:	011b      	lsls	r3, r3, #4
 8000f0c:	4413      	add	r3, r2
 8000f0e:	330f      	adds	r3, #15
 8000f10:	2200      	movs	r2, #0
 8000f12:	701a      	strb	r2, [r3, #0]
            canspi_CanLoopTest(rxMsgCircBuffer.message[rxMsgCircBuffer.head]); 
 8000f14:	4b09      	ldr	r3, [pc, #36]	@ (8000f3c <j1939_PullMessageFromTable+0xc8>)
 8000f16:	f893 31e0 	ldrb.w	r3, [r3, #480]	@ 0x1e0
 8000f1a:	4a08      	ldr	r2, [pc, #32]	@ (8000f3c <j1939_PullMessageFromTable+0xc8>)
 8000f1c:	011b      	lsls	r3, r3, #4
 8000f1e:	4413      	add	r3, r2
 8000f20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f22:	f000 f89f 	bl	8001064 <canspi_CanLoopTest>
            rxMsgCircBuffer.head = 0;   
 8000f26:	4b05      	ldr	r3, [pc, #20]	@ (8000f3c <j1939_PullMessageFromTable+0xc8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 21e0 	strb.w	r2, [r3, #480]	@ 0x1e0
        }
        retVal = true;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	73fb      	strb	r3, [r7, #15]
    }
    return retVal;
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f3c:	200000d4 	.word	0x200000d4

08000f40 <j1939_AnyNewMessages>:

bool j1939_AnyNewMessages(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
    bool retVal = false; 
 8000f46:	2300      	movs	r3, #0
 8000f48:	71fb      	strb	r3, [r7, #7]

    for(int i = 0; i < J1939_MAX_BUFFER_SIZE; i++)
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	603b      	str	r3, [r7, #0]
 8000f4e:	e00d      	b.n	8000f6c <j1939_AnyNewMessages+0x2c>
    {
        if(rxMsgCircBuffer.message[i].isMessageNew == true)
 8000f50:	4a0b      	ldr	r2, [pc, #44]	@ (8000f80 <j1939_AnyNewMessages+0x40>)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	011b      	lsls	r3, r3, #4
 8000f56:	4413      	add	r3, r2
 8000f58:	330f      	adds	r3, #15
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d002      	beq.n	8000f66 <j1939_AnyNewMessages+0x26>
        {
            retVal = true; 
 8000f60:	2301      	movs	r3, #1
 8000f62:	71fb      	strb	r3, [r7, #7]
            break; 
 8000f64:	e005      	b.n	8000f72 <j1939_AnyNewMessages+0x32>
    for(int i = 0; i < J1939_MAX_BUFFER_SIZE; i++)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	2b1d      	cmp	r3, #29
 8000f70:	ddee      	ble.n	8000f50 <j1939_AnyNewMessages+0x10>
        }
    }
    return retVal; 
 8000f72:	79fb      	ldrb	r3, [r7, #7]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	200000d4 	.word	0x200000d4

08000f84 <j1939_TxSendPacket>:

void j1939_TxSendPacket(void)
{
 8000f84:	b590      	push	{r4, r7, lr}
 8000f86:	b08b      	sub	sp, #44	@ 0x2c
 8000f88:	af00      	add	r7, sp, #0
    can_msg_t canMsg; 
    can_ext_id_t canId; 
    app_state_machine_t state = GetApplicationState(); 
 8000f8a:	f7ff fceb 	bl	8000964 <GetApplicationState>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    j1939_message_t txPacket = txPacketList[state];
 8000f94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f98:	4a22      	ldr	r2, [pc, #136]	@ (8001024 <j1939_TxSendPacket+0xa0>)
 8000f9a:	011b      	lsls	r3, r3, #4
 8000f9c:	4413      	add	r3, r2
 8000f9e:	463c      	mov	r4, r7
 8000fa0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fa2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    // Load up the ID
    canId.frame.priority = 6; 
 8000fa6:	7c3b      	ldrb	r3, [r7, #16]
 8000fa8:	2206      	movs	r2, #6
 8000faa:	f362 0302 	bfi	r3, r2, #0, #3
 8000fae:	743b      	strb	r3, [r7, #16]
    canId.frame.edp = 0;
 8000fb0:	7c3b      	ldrb	r3, [r7, #16]
 8000fb2:	f36f 03c3 	bfc	r3, #3, #1
 8000fb6:	743b      	strb	r3, [r7, #16]
    canId.frame.dp = 0; 
 8000fb8:	7c3b      	ldrb	r3, [r7, #16]
 8000fba:	f36f 1304 	bfc	r3, #4, #1
 8000fbe:	743b      	strb	r3, [r7, #16]
    canId.frame.pf = ((txPacket.message_id.PGN & 0xFF00) >> 8);
 8000fc0:	883b      	ldrh	r3, [r7, #0]
 8000fc2:	0a1b      	lsrs	r3, r3, #8
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	8a3b      	ldrh	r3, [r7, #16]
 8000fca:	f362 134c 	bfi	r3, r2, #5, #8
 8000fce:	823b      	strh	r3, [r7, #16]
    canId.frame.ps = ((txPacket.message_id.PGN & 0x00FF) >> 0);
 8000fd0:	883b      	ldrh	r3, [r7, #0]
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	f362 3354 	bfi	r3, r2, #13, #8
 8000fda:	613b      	str	r3, [r7, #16]
    canId.frame.source_address = txPacket.message_id.source_address; 
 8000fdc:	78fa      	ldrb	r2, [r7, #3]
 8000fde:	8a7b      	ldrh	r3, [r7, #18]
 8000fe0:	f362 134c 	bfi	r3, r2, #5, #8
 8000fe4:	827b      	strh	r3, [r7, #18]
    // Load up the data
    canMsg.frame.canId = canId.id;
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	617b      	str	r3, [r7, #20]
    canMsg.frame.dlc = txPacket.length;  
 8000fea:	7bbb      	ldrb	r3, [r7, #14]
 8000fec:	763b      	strb	r3, [r7, #24]
    canMsg.frame.data0 = txPacket.data_buffer[0]; 
 8000fee:	79bb      	ldrb	r3, [r7, #6]
 8000ff0:	767b      	strb	r3, [r7, #25]
    canMsg.frame.data1 = txPacket.data_buffer[1];
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	76bb      	strb	r3, [r7, #26]
    canMsg.frame.data2 = txPacket.data_buffer[2];
 8000ff6:	7a3b      	ldrb	r3, [r7, #8]
 8000ff8:	76fb      	strb	r3, [r7, #27]
    canMsg.frame.data3 = txPacket.data_buffer[3];
 8000ffa:	7a7b      	ldrb	r3, [r7, #9]
 8000ffc:	773b      	strb	r3, [r7, #28]
    canMsg.frame.data4 = txPacket.data_buffer[4];
 8000ffe:	7abb      	ldrb	r3, [r7, #10]
 8001000:	777b      	strb	r3, [r7, #29]
    canMsg.frame.data5 = txPacket.data_buffer[5];
 8001002:	7afb      	ldrb	r3, [r7, #11]
 8001004:	77bb      	strb	r3, [r7, #30]
    canMsg.frame.data6 = txPacket.data_buffer[6];
 8001006:	7b3b      	ldrb	r3, [r7, #12]
 8001008:	77fb      	strb	r3, [r7, #31]
    canMsg.frame.data7 = txPacket.data_buffer[7];
 800100a:	7b7b      	ldrb	r3, [r7, #13]
 800100c:	f887 3020 	strb.w	r3, [r7, #32]

    canspi_TransmitMessage(&canMsg);
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fcd2 	bl	80009be <canspi_TransmitMessage>
}
 800101a:	bf00      	nop
 800101c:	372c      	adds	r7, #44	@ 0x2c
 800101e:	46bd      	mov	sp, r7
 8001020:	bd90      	pop	{r4, r7, pc}
 8001022:	bf00      	nop
 8001024:	20000000 	.word	0x20000000

08001028 <j1939_RxReceivePacket>:

void j1939_RxReceivePacket(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
    canspi_ReceiveMessage(); 
 800102c:	f7ff fd24 	bl	8000a78 <canspi_ReceiveMessage>
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}

08001034 <j1939_PGNCompare>:

bool j1939_PGNCompare(uint16_t pgn1, uint16_t pgn2)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	460a      	mov	r2, r1
 800103e:	80fb      	strh	r3, [r7, #6]
 8001040:	4613      	mov	r3, r2
 8001042:	80bb      	strh	r3, [r7, #4]
    bool retVal = false; 
 8001044:	2300      	movs	r3, #0
 8001046:	73fb      	strb	r3, [r7, #15]
    if(pgn1 == pgn2)
 8001048:	88fa      	ldrh	r2, [r7, #6]
 800104a:	88bb      	ldrh	r3, [r7, #4]
 800104c:	429a      	cmp	r2, r3
 800104e:	d101      	bne.n	8001054 <j1939_PGNCompare+0x20>
    {
        retVal = true; 
 8001050:	2301      	movs	r3, #1
 8001052:	73fb      	strb	r3, [r7, #15]
    }
    return retVal; 
 8001054:	7bfb      	ldrb	r3, [r7, #15]
}
 8001056:	4618      	mov	r0, r3
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <canspi_CanLoopTest>:
        uart_serial_print(buf, sizeof(buf));
        memset(buf, '\0', sizeof(buf));
    }
}
void canspi_CanLoopTest(j1939_message_t canMsg)
{
 8001064:	b590      	push	{r4, r7, lr}
 8001066:	b08f      	sub	sp, #60	@ 0x3c
 8001068:	af00      	add	r7, sp, #0
 800106a:	463c      	mov	r4, r7
 800106c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    char printStr[30]; 

    sprintf(printStr, "**** CAN ID ****\r\n"); 
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	499a      	ldr	r1, [pc, #616]	@ (80012e0 <canspi_CanLoopTest+0x27c>)
 8001076:	4618      	mov	r0, r3
 8001078:	f003 fe3e 	bl	8004cf8 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	211e      	movs	r1, #30
 8001082:	4618      	mov	r0, r3
 8001084:	f000 fd52 	bl	8001b2c <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	221e      	movs	r2, #30
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f003 fe51 	bl	8004d38 <memset>

    sprintf(printStr, "pgn = %x\r\n", canMsg.message_id.PGN); 
 8001096:	883b      	ldrh	r3, [r7, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4991      	ldr	r1, [pc, #580]	@ (80012e4 <canspi_CanLoopTest+0x280>)
 80010a0:	4618      	mov	r0, r3
 80010a2:	f003 fe29 	bl	8004cf8 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	211e      	movs	r1, #30
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 fd3d 	bl	8001b2c <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	221e      	movs	r2, #30
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f003 fe3c 	bl	8004d38 <memset>

    sprintf(printStr, "source address = %x\r\n", canMsg.message_id.source_address); 
 80010c0:	78fb      	ldrb	r3, [r7, #3]
 80010c2:	461a      	mov	r2, r3
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4987      	ldr	r1, [pc, #540]	@ (80012e8 <canspi_CanLoopTest+0x284>)
 80010ca:	4618      	mov	r0, r3
 80010cc:	f003 fe14 	bl	8004cf8 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	211e      	movs	r1, #30
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 fd28 	bl	8001b2c <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	221e      	movs	r2, #30
 80010e2:	2100      	movs	r1, #0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f003 fe27 	bl	8004d38 <memset>

    sprintf(printStr, "**** DATA ****\r\n"); 
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	497f      	ldr	r1, [pc, #508]	@ (80012ec <canspi_CanLoopTest+0x288>)
 80010f0:	4618      	mov	r0, r3
 80010f2:	f003 fe01 	bl	8004cf8 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	211e      	movs	r1, #30
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 fd15 	bl	8001b2c <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr)); 
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	221e      	movs	r2, #30
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f003 fe14 	bl	8004d38 <memset>

    sprintf(printStr, "dlc = %x\r\n", canMsg.length); 
 8001110:	7bbb      	ldrb	r3, [r7, #14]
 8001112:	461a      	mov	r2, r3
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4975      	ldr	r1, [pc, #468]	@ (80012f0 <canspi_CanLoopTest+0x28c>)
 800111a:	4618      	mov	r0, r3
 800111c:	f003 fdec 	bl	8004cf8 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	211e      	movs	r1, #30
 8001126:	4618      	mov	r0, r3
 8001128:	f000 fd00 	bl	8001b2c <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	221e      	movs	r2, #30
 8001132:	2100      	movs	r1, #0
 8001134:	4618      	mov	r0, r3
 8001136:	f003 fdff 	bl	8004d38 <memset>

    sprintf(printStr, "data0 = %x\r\n", canMsg.data_buffer[0]); 
 800113a:	79bb      	ldrb	r3, [r7, #6]
 800113c:	461a      	mov	r2, r3
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	496c      	ldr	r1, [pc, #432]	@ (80012f4 <canspi_CanLoopTest+0x290>)
 8001144:	4618      	mov	r0, r3
 8001146:	f003 fdd7 	bl	8004cf8 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	211e      	movs	r1, #30
 8001150:	4618      	mov	r0, r3
 8001152:	f000 fceb 	bl	8001b2c <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	221e      	movs	r2, #30
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f003 fdea 	bl	8004d38 <memset>

    sprintf(printStr, "data1 = %x\r\n", canMsg.data_buffer[1]); 
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	461a      	mov	r2, r3
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4962      	ldr	r1, [pc, #392]	@ (80012f8 <canspi_CanLoopTest+0x294>)
 800116e:	4618      	mov	r0, r3
 8001170:	f003 fdc2 	bl	8004cf8 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	211e      	movs	r1, #30
 800117a:	4618      	mov	r0, r3
 800117c:	f000 fcd6 	bl	8001b2c <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	221e      	movs	r2, #30
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f003 fdd5 	bl	8004d38 <memset>

    sprintf(printStr, "data2 = %x\r\n", canMsg.data_buffer[2]); 
 800118e:	7a3b      	ldrb	r3, [r7, #8]
 8001190:	461a      	mov	r2, r3
 8001192:	f107 0314 	add.w	r3, r7, #20
 8001196:	4959      	ldr	r1, [pc, #356]	@ (80012fc <canspi_CanLoopTest+0x298>)
 8001198:	4618      	mov	r0, r3
 800119a:	f003 fdad 	bl	8004cf8 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	211e      	movs	r1, #30
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 fcc1 	bl	8001b2c <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	221e      	movs	r2, #30
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f003 fdc0 	bl	8004d38 <memset>

    sprintf(printStr, "data3 = %x\r\n", canMsg.data_buffer[3]); 
 80011b8:	7a7b      	ldrb	r3, [r7, #9]
 80011ba:	461a      	mov	r2, r3
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	494f      	ldr	r1, [pc, #316]	@ (8001300 <canspi_CanLoopTest+0x29c>)
 80011c2:	4618      	mov	r0, r3
 80011c4:	f003 fd98 	bl	8004cf8 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	211e      	movs	r1, #30
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 fcac 	bl	8001b2c <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	221e      	movs	r2, #30
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f003 fdab 	bl	8004d38 <memset>

    sprintf(printStr, "data4 = %x\r\n", canMsg.data_buffer[4]); 
 80011e2:	7abb      	ldrb	r3, [r7, #10]
 80011e4:	461a      	mov	r2, r3
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	4946      	ldr	r1, [pc, #280]	@ (8001304 <canspi_CanLoopTest+0x2a0>)
 80011ec:	4618      	mov	r0, r3
 80011ee:	f003 fd83 	bl	8004cf8 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	211e      	movs	r1, #30
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 fc97 	bl	8001b2c <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	221e      	movs	r2, #30
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f003 fd96 	bl	8004d38 <memset>

    sprintf(printStr, "data5 = %x\r\n", canMsg.data_buffer[5]); 
 800120c:	7afb      	ldrb	r3, [r7, #11]
 800120e:	461a      	mov	r2, r3
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	493c      	ldr	r1, [pc, #240]	@ (8001308 <canspi_CanLoopTest+0x2a4>)
 8001216:	4618      	mov	r0, r3
 8001218:	f003 fd6e 	bl	8004cf8 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	211e      	movs	r1, #30
 8001222:	4618      	mov	r0, r3
 8001224:	f000 fc82 	bl	8001b2c <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	221e      	movs	r2, #30
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f003 fd81 	bl	8004d38 <memset>

    sprintf(printStr, "data6 = %x\r\n", canMsg.data_buffer[6]); 
 8001236:	7b3b      	ldrb	r3, [r7, #12]
 8001238:	461a      	mov	r2, r3
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4933      	ldr	r1, [pc, #204]	@ (800130c <canspi_CanLoopTest+0x2a8>)
 8001240:	4618      	mov	r0, r3
 8001242:	f003 fd59 	bl	8004cf8 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	211e      	movs	r1, #30
 800124c:	4618      	mov	r0, r3
 800124e:	f000 fc6d 	bl	8001b2c <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	221e      	movs	r2, #30
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f003 fd6c 	bl	8004d38 <memset>

    sprintf(printStr, "data7 = %x\r\n\r\n", canMsg.data_buffer[7]); 
 8001260:	7b7b      	ldrb	r3, [r7, #13]
 8001262:	461a      	mov	r2, r3
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4929      	ldr	r1, [pc, #164]	@ (8001310 <canspi_CanLoopTest+0x2ac>)
 800126a:	4618      	mov	r0, r3
 800126c:	f003 fd44 	bl	8004cf8 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	211e      	movs	r1, #30
 8001276:	4618      	mov	r0, r3
 8001278:	f000 fc58 	bl	8001b2c <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	221e      	movs	r2, #30
 8001282:	2100      	movs	r1, #0
 8001284:	4618      	mov	r0, r3
 8001286:	f003 fd57 	bl	8004d38 <memset>

    unsigned int    data = canMsg.data_buffer[4] << 24; 
 800128a:	7abb      	ldrb	r3, [r7, #10]
 800128c:	061b      	lsls	r3, r3, #24
 800128e:	637b      	str	r3, [r7, #52]	@ 0x34
                    data |= (canMsg.data_buffer[5] << 16); 
 8001290:	7afb      	ldrb	r3, [r7, #11]
 8001292:	041b      	lsls	r3, r3, #16
 8001294:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001296:	4313      	orrs	r3, r2
 8001298:	637b      	str	r3, [r7, #52]	@ 0x34
                    data |= (canMsg.data_buffer[6] << 8);
 800129a:	7b3b      	ldrb	r3, [r7, #12]
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80012a0:	4313      	orrs	r3, r2
 80012a2:	637b      	str	r3, [r7, #52]	@ 0x34
                    data |= (canMsg.data_buffer[7] << 0);
 80012a4:	7b7b      	ldrb	r3, [r7, #13]
 80012a6:	461a      	mov	r2, r3
 80012a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012aa:	4313      	orrs	r3, r2
 80012ac:	637b      	str	r3, [r7, #52]	@ 0x34

    sprintf(printStr, "Data base 10 = %u\r\n\r\n", data); 
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80012b4:	4917      	ldr	r1, [pc, #92]	@ (8001314 <canspi_CanLoopTest+0x2b0>)
 80012b6:	4618      	mov	r0, r3
 80012b8:	f003 fd1e 	bl	8004cf8 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	211e      	movs	r1, #30
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 fc32 	bl	8001b2c <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	221e      	movs	r2, #30
 80012ce:	2100      	movs	r1, #0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f003 fd31 	bl	8004d38 <memset>

 80012d6:	bf00      	nop
 80012d8:	373c      	adds	r7, #60	@ 0x3c
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd90      	pop	{r4, r7, pc}
 80012de:	bf00      	nop
 80012e0:	08005704 	.word	0x08005704
 80012e4:	08005718 	.word	0x08005718
 80012e8:	08005724 	.word	0x08005724
 80012ec:	0800573c 	.word	0x0800573c
 80012f0:	08005750 	.word	0x08005750
 80012f4:	0800575c 	.word	0x0800575c
 80012f8:	0800576c 	.word	0x0800576c
 80012fc:	0800577c 	.word	0x0800577c
 8001300:	0800578c 	.word	0x0800578c
 8001304:	0800579c 	.word	0x0800579c
 8001308:	080057ac 	.word	0x080057ac
 800130c:	080057bc 	.word	0x080057bc
 8001310:	080057cc 	.word	0x080057cc
 8001314:	080057dc 	.word	0x080057dc

08001318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800131c:	f000 fc43 	bl	8001ba6 <HAL_Init>
  
  /*************** ****************/
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001320:	f000 f80b 	bl	800133a <SystemClock_Config>

  /*************** ****************/
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001324:	f000 f8bc 	bl	80014a0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001328:	f000 f84c 	bl	80013c4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800132c:	f000 f888 	bl	8001440 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /*************** ****************/
  canspi_Init(); 
 8001330:	f7ff fb24 	bl	800097c <canspi_Init>
  { 

    // MCP_test_loopback_function(); 
    // test_circ_buf(); 
    // HAL_Delay(1000);
    application_MainLoopFunction();
 8001334:	f7ff f914 	bl	8000560 <application_MainLoopFunction>
 8001338:	e7fc      	b.n	8001334 <main+0x1c>

0800133a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b096      	sub	sp, #88	@ 0x58
 800133e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	2244      	movs	r2, #68	@ 0x44
 8001346:	2100      	movs	r1, #0
 8001348:	4618      	mov	r0, r3
 800134a:	f003 fcf5 	bl	8004d38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800134e:	463b      	mov	r3, r7
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800135c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001360:	f000 ff0c 	bl	800217c <HAL_PWREx_ControlVoltageScaling>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <SystemClock_Config+0x34>
  {
    Error_Handler();
 800136a:	f000 f8e3 	bl	8001534 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800136e:	2302      	movs	r3, #2
 8001370:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001372:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001376:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001378:	2310      	movs	r3, #16
 800137a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800137c:	2300      	movs	r3, #0
 800137e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4618      	mov	r0, r3
 8001386:	f000 ff4f 	bl	8002228 <HAL_RCC_OscConfig>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8001390:	f000 f8d0 	bl	8001534 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001394:	230f      	movs	r3, #15
 8001396:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001398:	2301      	movs	r3, #1
 800139a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800139c:	2300      	movs	r3, #0
 800139e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a4:	2300      	movs	r3, #0
 80013a6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013a8:	463b      	mov	r3, r7
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f001 fb4f 	bl	8002a50 <HAL_RCC_ClockConfig>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <SystemClock_Config+0x82>
  {
    Error_Handler();
 80013b8:	f000 f8bc 	bl	8001534 <Error_Handler>
  }
}
 80013bc:	bf00      	nop
 80013be:	3758      	adds	r7, #88	@ 0x58
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001438 <MX_SPI1_Init+0x74>)
 80013ca:	4a1c      	ldr	r2, [pc, #112]	@ (800143c <MX_SPI1_Init+0x78>)
 80013cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001438 <MX_SPI1_Init+0x74>)
 80013d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013d6:	4b18      	ldr	r3, [pc, #96]	@ (8001438 <MX_SPI1_Init+0x74>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013dc:	4b16      	ldr	r3, [pc, #88]	@ (8001438 <MX_SPI1_Init+0x74>)
 80013de:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80013e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013e4:	4b14      	ldr	r3, [pc, #80]	@ (8001438 <MX_SPI1_Init+0x74>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013ea:	4b13      	ldr	r3, [pc, #76]	@ (8001438 <MX_SPI1_Init+0x74>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013f0:	4b11      	ldr	r3, [pc, #68]	@ (8001438 <MX_SPI1_Init+0x74>)
 80013f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001438 <MX_SPI1_Init+0x74>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001438 <MX_SPI1_Init+0x74>)
 8001400:	2200      	movs	r2, #0
 8001402:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001404:	4b0c      	ldr	r3, [pc, #48]	@ (8001438 <MX_SPI1_Init+0x74>)
 8001406:	2200      	movs	r2, #0
 8001408:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800140a:	4b0b      	ldr	r3, [pc, #44]	@ (8001438 <MX_SPI1_Init+0x74>)
 800140c:	2200      	movs	r2, #0
 800140e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001410:	4b09      	ldr	r3, [pc, #36]	@ (8001438 <MX_SPI1_Init+0x74>)
 8001412:	2207      	movs	r2, #7
 8001414:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001416:	4b08      	ldr	r3, [pc, #32]	@ (8001438 <MX_SPI1_Init+0x74>)
 8001418:	2200      	movs	r2, #0
 800141a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800141c:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <MX_SPI1_Init+0x74>)
 800141e:	2208      	movs	r2, #8
 8001420:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001422:	4805      	ldr	r0, [pc, #20]	@ (8001438 <MX_SPI1_Init+0x74>)
 8001424:	f002 f820 	bl	8003468 <HAL_SPI_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800142e:	f000 f881 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200002b8 	.word	0x200002b8
 800143c:	40013000 	.word	0x40013000

08001440 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001444:	4b14      	ldr	r3, [pc, #80]	@ (8001498 <MX_USART2_UART_Init+0x58>)
 8001446:	4a15      	ldr	r2, [pc, #84]	@ (800149c <MX_USART2_UART_Init+0x5c>)
 8001448:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800144a:	4b13      	ldr	r3, [pc, #76]	@ (8001498 <MX_USART2_UART_Init+0x58>)
 800144c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001450:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001452:	4b11      	ldr	r3, [pc, #68]	@ (8001498 <MX_USART2_UART_Init+0x58>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001458:	4b0f      	ldr	r3, [pc, #60]	@ (8001498 <MX_USART2_UART_Init+0x58>)
 800145a:	2200      	movs	r2, #0
 800145c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800145e:	4b0e      	ldr	r3, [pc, #56]	@ (8001498 <MX_USART2_UART_Init+0x58>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001464:	4b0c      	ldr	r3, [pc, #48]	@ (8001498 <MX_USART2_UART_Init+0x58>)
 8001466:	220c      	movs	r2, #12
 8001468:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146a:	4b0b      	ldr	r3, [pc, #44]	@ (8001498 <MX_USART2_UART_Init+0x58>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001470:	4b09      	ldr	r3, [pc, #36]	@ (8001498 <MX_USART2_UART_Init+0x58>)
 8001472:	2200      	movs	r2, #0
 8001474:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001476:	4b08      	ldr	r3, [pc, #32]	@ (8001498 <MX_USART2_UART_Init+0x58>)
 8001478:	2200      	movs	r2, #0
 800147a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800147c:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <MX_USART2_UART_Init+0x58>)
 800147e:	2200      	movs	r2, #0
 8001480:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001482:	4805      	ldr	r0, [pc, #20]	@ (8001498 <MX_USART2_UART_Init+0x58>)
 8001484:	f002 ff1e 	bl	80042c4 <HAL_UART_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800148e:	f000 f851 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	2000031c 	.word	0x2000031c
 800149c:	40004400 	.word	0x40004400

080014a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a6:	f107 030c 	add.w	r3, r7, #12
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b6:	4b1d      	ldr	r3, [pc, #116]	@ (800152c <MX_GPIO_Init+0x8c>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ba:	4a1c      	ldr	r2, [pc, #112]	@ (800152c <MX_GPIO_Init+0x8c>)
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014c2:	4b1a      	ldr	r3, [pc, #104]	@ (800152c <MX_GPIO_Init+0x8c>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	4b17      	ldr	r3, [pc, #92]	@ (800152c <MX_GPIO_Init+0x8c>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d2:	4a16      	ldr	r2, [pc, #88]	@ (800152c <MX_GPIO_Init+0x8c>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014da:	4b14      	ldr	r3, [pc, #80]	@ (800152c <MX_GPIO_Init+0x8c>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e6:	4b11      	ldr	r3, [pc, #68]	@ (800152c <MX_GPIO_Init+0x8c>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ea:	4a10      	ldr	r2, [pc, #64]	@ (800152c <MX_GPIO_Init+0x8c>)
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f2:	4b0e      	ldr	r3, [pc, #56]	@ (800152c <MX_GPIO_Init+0x8c>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	603b      	str	r3, [r7, #0]
 80014fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, GPIO_PIN_SET);
 80014fe:	2201      	movs	r2, #1
 8001500:	2180      	movs	r1, #128	@ 0x80
 8001502:	480b      	ldr	r0, [pc, #44]	@ (8001530 <MX_GPIO_Init+0x90>)
 8001504:	f000 fe14 	bl	8002130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SP1_CS_Pin */
  GPIO_InitStruct.Pin = SP1_CS_Pin;
 8001508:	2380      	movs	r3, #128	@ 0x80
 800150a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150c:	2301      	movs	r3, #1
 800150e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	2300      	movs	r3, #0
 8001516:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SP1_CS_GPIO_Port, &GPIO_InitStruct);
 8001518:	f107 030c 	add.w	r3, r7, #12
 800151c:	4619      	mov	r1, r3
 800151e:	4804      	ldr	r0, [pc, #16]	@ (8001530 <MX_GPIO_Init+0x90>)
 8001520:	f000 fc9c 	bl	8001e5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001524:	bf00      	nop
 8001526:	3720      	adds	r7, #32
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40021000 	.word	0x40021000
 8001530:	48000400 	.word	0x48000400

08001534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001538:	b672      	cpsid	i
}
 800153a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800153c:	bf00      	nop
 800153e:	e7fd      	b.n	800153c <Error_Handler+0x8>

08001540 <MCP2515_SetConfigurationMode>:

    @{
*/
/******************************************************************************/
bool MCP2515_SetConfigurationMode(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
  uint8_t retVal = false; 
 8001546:	2300      	movs	r3, #0
 8001548:	73fb      	strb	r3, [r7, #15]
  uint8_t mode; 
  mode = MCP2515_ReadByte(MCP2515_CANCTRL); 
 800154a:	200f      	movs	r0, #15
 800154c:	f000 f8f4 	bl	8001738 <MCP2515_ReadByte>
 8001550:	4603      	mov	r3, r0
 8001552:	71fb      	strb	r3, [r7, #7]
  mode |= MODE_CONFIGURATION; 
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800155a:	71fb      	strb	r3, [r7, #7]
  MCP2515_WriteByte(MCP2515_CANCTRL, mode); 
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	4619      	mov	r1, r3
 8001560:	200f      	movs	r0, #15
 8001562:	f000 f899 	bl	8001698 <MCP2515_WriteByte>

  for(int i = 0; i < 10; i ++)
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	e02e      	b.n	80015ca <MCP2515_SetConfigurationMode+0x8a>
  {
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & MCP2515_OPMODE_MASK) == MODE_CONFIGURATION)
 800156c:	200e      	movs	r0, #14
 800156e:	f000 f8e3 	bl	8001738 <MCP2515_ReadByte>
 8001572:	4603      	mov	r3, r0
 8001574:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8001578:	2b80      	cmp	r3, #128	@ 0x80
 800157a:	d10f      	bne.n	800159c <MCP2515_SetConfigurationMode+0x5c>
    {
      sprintf(test, "config mode\r\n"); 
 800157c:	4919      	ldr	r1, [pc, #100]	@ (80015e4 <MCP2515_SetConfigurationMode+0xa4>)
 800157e:	481a      	ldr	r0, [pc, #104]	@ (80015e8 <MCP2515_SetConfigurationMode+0xa8>)
 8001580:	f003 fbba 	bl	8004cf8 <siprintf>
      uart_serial_print(test, sizeof(test));
 8001584:	211e      	movs	r1, #30
 8001586:	4818      	ldr	r0, [pc, #96]	@ (80015e8 <MCP2515_SetConfigurationMode+0xa8>)
 8001588:	f000 fad0 	bl	8001b2c <uart_serial_print>
      memset(test, '\0', sizeof(test));
 800158c:	221e      	movs	r2, #30
 800158e:	2100      	movs	r1, #0
 8001590:	4815      	ldr	r0, [pc, #84]	@ (80015e8 <MCP2515_SetConfigurationMode+0xa8>)
 8001592:	f003 fbd1 	bl	8004d38 <memset>
      retVal = true; 
 8001596:	2301      	movs	r3, #1
 8001598:	73fb      	strb	r3, [r7, #15]
      break;
 800159a:	e019      	b.n	80015d0 <MCP2515_SetConfigurationMode+0x90>
    } 
    else
    {
      mode = MCP2515_ReadByte(MCP2515_CANSTAT); 
 800159c:	200e      	movs	r0, #14
 800159e:	f000 f8cb 	bl	8001738 <MCP2515_ReadByte>
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
      sprintf(test, "mode = %x\r\n", mode); 
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	461a      	mov	r2, r3
 80015aa:	4910      	ldr	r1, [pc, #64]	@ (80015ec <MCP2515_SetConfigurationMode+0xac>)
 80015ac:	480e      	ldr	r0, [pc, #56]	@ (80015e8 <MCP2515_SetConfigurationMode+0xa8>)
 80015ae:	f003 fba3 	bl	8004cf8 <siprintf>
      uart_serial_print(test, sizeof(test));
 80015b2:	211e      	movs	r1, #30
 80015b4:	480c      	ldr	r0, [pc, #48]	@ (80015e8 <MCP2515_SetConfigurationMode+0xa8>)
 80015b6:	f000 fab9 	bl	8001b2c <uart_serial_print>
      memset(test, '\0', sizeof(test));
 80015ba:	221e      	movs	r2, #30
 80015bc:	2100      	movs	r1, #0
 80015be:	480a      	ldr	r0, [pc, #40]	@ (80015e8 <MCP2515_SetConfigurationMode+0xa8>)
 80015c0:	f003 fbba 	bl	8004d38 <memset>
  for(int i = 0; i < 10; i ++)
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	3301      	adds	r3, #1
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	2b09      	cmp	r3, #9
 80015ce:	ddcd      	ble.n	800156c <MCP2515_SetConfigurationMode+0x2c>
    }
  }
  return retVal;
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	bf14      	ite	ne
 80015d6:	2301      	movne	r3, #1
 80015d8:	2300      	moveq	r3, #0
 80015da:	b2db      	uxtb	r3, r3
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	08005800 	.word	0x08005800
 80015e8:	200003a4 	.word	0x200003a4
 80015ec:	08005810 	.word	0x08005810

080015f0 <MCP2515_SetNormalMode>:

    @{
*/
/******************************************************************************/
bool MCP2515_SetNormalMode(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
  bool retVal = false; 
 80015f6:	2300      	movs	r3, #0
 80015f8:	73fb      	strb	r3, [r7, #15]
  uint8_t mode; 
  mode = MCP2515_ReadByte(MCP2515_CANCTRL); 
 80015fa:	200f      	movs	r0, #15
 80015fc:	f000 f89c 	bl	8001738 <MCP2515_ReadByte>
 8001600:	4603      	mov	r3, r0
 8001602:	71fb      	strb	r3, [r7, #7]
  mode &= MODE_MASK_NORMAL; 
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	f003 031f 	and.w	r3, r3, #31
 800160a:	71fb      	strb	r3, [r7, #7]
  MCP2515_WriteByte(MCP2515_CANCTRL, mode); 
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	4619      	mov	r1, r3
 8001610:	200f      	movs	r0, #15
 8001612:	f000 f841 	bl	8001698 <MCP2515_WriteByte>
  
  for(int i = 0; i < 10; i ++)
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	e02e      	b.n	800167a <MCP2515_SetNormalMode+0x8a>
  {
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & MCP2515_OPMODE_MASK) == MODE_NORMAL)
 800161c:	200e      	movs	r0, #14
 800161e:	f000 f88b 	bl	8001738 <MCP2515_ReadByte>
 8001622:	4603      	mov	r3, r0
 8001624:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d10f      	bne.n	800164c <MCP2515_SetNormalMode+0x5c>
    {
      sprintf(test, "normal mode\r\n"); 
 800162c:	4917      	ldr	r1, [pc, #92]	@ (800168c <MCP2515_SetNormalMode+0x9c>)
 800162e:	4818      	ldr	r0, [pc, #96]	@ (8001690 <MCP2515_SetNormalMode+0xa0>)
 8001630:	f003 fb62 	bl	8004cf8 <siprintf>
      uart_serial_print(test, sizeof(test));
 8001634:	211e      	movs	r1, #30
 8001636:	4816      	ldr	r0, [pc, #88]	@ (8001690 <MCP2515_SetNormalMode+0xa0>)
 8001638:	f000 fa78 	bl	8001b2c <uart_serial_print>
      memset(test, '\0', sizeof(test));
 800163c:	221e      	movs	r2, #30
 800163e:	2100      	movs	r1, #0
 8001640:	4813      	ldr	r0, [pc, #76]	@ (8001690 <MCP2515_SetNormalMode+0xa0>)
 8001642:	f003 fb79 	bl	8004d38 <memset>
      retVal = true; 
 8001646:	2301      	movs	r3, #1
 8001648:	73fb      	strb	r3, [r7, #15]
      break; 
 800164a:	e019      	b.n	8001680 <MCP2515_SetNormalMode+0x90>
    }
    else
    {
      mode = MCP2515_ReadByte(MCP2515_CANSTAT); 
 800164c:	200e      	movs	r0, #14
 800164e:	f000 f873 	bl	8001738 <MCP2515_ReadByte>
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
      sprintf(test, "mode = %x\r\n", mode); 
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	461a      	mov	r2, r3
 800165a:	490e      	ldr	r1, [pc, #56]	@ (8001694 <MCP2515_SetNormalMode+0xa4>)
 800165c:	480c      	ldr	r0, [pc, #48]	@ (8001690 <MCP2515_SetNormalMode+0xa0>)
 800165e:	f003 fb4b 	bl	8004cf8 <siprintf>
      uart_serial_print(test, sizeof(test));
 8001662:	211e      	movs	r1, #30
 8001664:	480a      	ldr	r0, [pc, #40]	@ (8001690 <MCP2515_SetNormalMode+0xa0>)
 8001666:	f000 fa61 	bl	8001b2c <uart_serial_print>
      memset(test, '\0', sizeof(test));
 800166a:	221e      	movs	r2, #30
 800166c:	2100      	movs	r1, #0
 800166e:	4808      	ldr	r0, [pc, #32]	@ (8001690 <MCP2515_SetNormalMode+0xa0>)
 8001670:	f003 fb62 	bl	8004d38 <memset>
  for(int i = 0; i < 10; i ++)
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	3301      	adds	r3, #1
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	2b09      	cmp	r3, #9
 800167e:	ddcd      	ble.n	800161c <MCP2515_SetNormalMode+0x2c>
    } 
  }
  return retVal;
 8001680:	7bfb      	ldrb	r3, [r7, #15]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	0800581c 	.word	0x0800581c
 8001690:	200003a4 	.word	0x200003a4
 8001694:	08005810 	.word	0x08005810

08001698 <MCP2515_WriteByte>:

    @{
*/
/******************************************************************************/
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	460a      	mov	r2, r1
 80016a2:	71fb      	strb	r3, [r7, #7]
 80016a4:	4613      	mov	r3, r2
 80016a6:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();  
 80016a8:	2200      	movs	r2, #0
 80016aa:	2180      	movs	r1, #128	@ 0x80
 80016ac:	480b      	ldr	r0, [pc, #44]	@ (80016dc <MCP2515_WriteByte+0x44>)
 80016ae:	f000 fd3f 	bl	8002130 <HAL_GPIO_WritePin>

  SPI_Tx((uint8_t)INSTRUCTION_WRITE);
 80016b2:	2002      	movs	r0, #2
 80016b4:	f000 f8b6 	bl	8001824 <SPI_Tx>
  SPI_Tx(address);
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 f8b2 	bl	8001824 <SPI_Tx>
  SPI_Tx(data);  
 80016c0:	79bb      	ldrb	r3, [r7, #6]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 f8ae 	bl	8001824 <SPI_Tx>
  
  MCP2515_CS_HIGH();
 80016c8:	2201      	movs	r2, #1
 80016ca:	2180      	movs	r1, #128	@ 0x80
 80016cc:	4803      	ldr	r0, [pc, #12]	@ (80016dc <MCP2515_WriteByte+0x44>)
 80016ce:	f000 fd2f 	bl	8002130 <HAL_GPIO_WritePin>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	48000400 	.word	0x48000400

080016e0 <MCP2515_WriteTxBuffer>:

    @{
*/
/******************************************************************************/
void MCP2515_WriteTxBuffer(load_tx_buf_instr_t instruction, uint8_t* idReg, uint8_t* data, uint8_t dlc)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
 80016ea:	461a      	mov	r2, r3
 80016ec:	4603      	mov	r3, r0
 80016ee:	73fb      	strb	r3, [r7, #15]
 80016f0:	4613      	mov	r3, r2
 80016f2:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 80016f4:	2200      	movs	r2, #0
 80016f6:	2180      	movs	r1, #128	@ 0x80
 80016f8:	480e      	ldr	r0, [pc, #56]	@ (8001734 <MCP2515_WriteTxBuffer+0x54>)
 80016fa:	f000 fd19 	bl	8002130 <HAL_GPIO_WritePin>

  SPI_Tx((uint8_t)instruction);
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	4618      	mov	r0, r3
 8001702:	f000 f88f 	bl	8001824 <SPI_Tx>
  SPI_TxBuffer(idReg, 4); 
 8001706:	2104      	movs	r1, #4
 8001708:	68b8      	ldr	r0, [r7, #8]
 800170a:	f000 f89d 	bl	8001848 <SPI_TxBuffer>
  SPI_Tx(dlc); 
 800170e:	7bbb      	ldrb	r3, [r7, #14]
 8001710:	4618      	mov	r0, r3
 8001712:	f000 f887 	bl	8001824 <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 8001716:	7bbb      	ldrb	r3, [r7, #14]
 8001718:	4619      	mov	r1, r3
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 f894 	bl	8001848 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 8001720:	2201      	movs	r2, #1
 8001722:	2180      	movs	r1, #128	@ 0x80
 8001724:	4803      	ldr	r0, [pc, #12]	@ (8001734 <MCP2515_WriteTxBuffer+0x54>)
 8001726:	f000 fd03 	bl	8002130 <HAL_GPIO_WritePin>
}
 800172a:	bf00      	nop
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	48000400 	.word	0x48000400

08001738 <MCP2515_ReadByte>:

    @{
*/
/******************************************************************************/
uint8_t MCP2515_ReadByte(uint8_t address)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
    uint8_t retVal = 0; 
 8001742:	2300      	movs	r3, #0
 8001744:	73fb      	strb	r3, [r7, #15]

    MCP2515_CS_LOW();
 8001746:	2200      	movs	r2, #0
 8001748:	2180      	movs	r1, #128	@ 0x80
 800174a:	480c      	ldr	r0, [pc, #48]	@ (800177c <MCP2515_ReadByte+0x44>)
 800174c:	f000 fcf0 	bl	8002130 <HAL_GPIO_WritePin>
  
    SPI_Tx((uint8_t)INSTRUCTION_READ);
 8001750:	2003      	movs	r0, #3
 8001752:	f000 f867 	bl	8001824 <SPI_Tx>
    SPI_Tx(address);
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	4618      	mov	r0, r3
 800175a:	f000 f863 	bl	8001824 <SPI_Tx>
    retVal = SPI_Rx();
 800175e:	f000 f887 	bl	8001870 <SPI_Rx>
 8001762:	4603      	mov	r3, r0
 8001764:	73fb      	strb	r3, [r7, #15]
  
    MCP2515_CS_HIGH();
 8001766:	2201      	movs	r2, #1
 8001768:	2180      	movs	r1, #128	@ 0x80
 800176a:	4804      	ldr	r0, [pc, #16]	@ (800177c <MCP2515_ReadByte+0x44>)
 800176c:	f000 fce0 	bl	8002130 <HAL_GPIO_WritePin>

    return retVal;
 8001770:	7bfb      	ldrb	r3, [r7, #15]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	48000400 	.word	0x48000400

08001780 <MCP2515_GetRxStatus>:

    @{
*/
/******************************************************************************/
rx_status_t MCP2515_GetRxStatus(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
  rx_status_t retVal;
  
  MCP2515_CS_LOW();
 8001786:	2200      	movs	r2, #0
 8001788:	2180      	movs	r1, #128	@ 0x80
 800178a:	480a      	ldr	r0, [pc, #40]	@ (80017b4 <MCP2515_GetRxStatus+0x34>)
 800178c:	f000 fcd0 	bl	8002130 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_RX_STATUS);
 8001790:	20b0      	movs	r0, #176	@ 0xb0
 8001792:	f000 f847 	bl	8001824 <SPI_Tx>
  retVal.ctrl_rx_status = SPI_Rx();
 8001796:	f000 f86b 	bl	8001870 <SPI_Rx>
 800179a:	4603      	mov	r3, r0
 800179c:	713b      	strb	r3, [r7, #4]
        
  MCP2515_CS_HIGH();
 800179e:	2201      	movs	r2, #1
 80017a0:	2180      	movs	r1, #128	@ 0x80
 80017a2:	4804      	ldr	r0, [pc, #16]	@ (80017b4 <MCP2515_GetRxStatus+0x34>)
 80017a4:	f000 fcc4 	bl	8002130 <HAL_GPIO_WritePin>
  
  return retVal;
 80017a8:	687b      	ldr	r3, [r7, #4]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	48000400 	.word	0x48000400

080017b8 <MCP2515_GetControlStatus>:

    @{
*/
/******************************************************************************/
ctrl_status_t MCP2515_GetControlStatus(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
  ctrl_status_t retVal;
  
  MCP2515_CS_LOW();
 80017be:	2200      	movs	r2, #0
 80017c0:	2180      	movs	r1, #128	@ 0x80
 80017c2:	480a      	ldr	r0, [pc, #40]	@ (80017ec <MCP2515_GetControlStatus+0x34>)
 80017c4:	f000 fcb4 	bl	8002130 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_READ_STATUS);
 80017c8:	20a0      	movs	r0, #160	@ 0xa0
 80017ca:	f000 f82b 	bl	8001824 <SPI_Tx>
  retVal.ctrl_status = SPI_Rx();
 80017ce:	f000 f84f 	bl	8001870 <SPI_Rx>
 80017d2:	4603      	mov	r3, r0
 80017d4:	713b      	strb	r3, [r7, #4]
        
  MCP2515_CS_HIGH();
 80017d6:	2201      	movs	r2, #1
 80017d8:	2180      	movs	r1, #128	@ 0x80
 80017da:	4804      	ldr	r0, [pc, #16]	@ (80017ec <MCP2515_GetControlStatus+0x34>)
 80017dc:	f000 fca8 	bl	8002130 <HAL_GPIO_WritePin>
  
  return retVal;
 80017e0:	687b      	ldr	r3, [r7, #4]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	48000400 	.word	0x48000400

080017f0 <MCP2515_RequestToSend>:

/* request to send */
void MCP2515_RequestToSend(uint8_t instruction)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 80017fa:	2200      	movs	r2, #0
 80017fc:	2180      	movs	r1, #128	@ 0x80
 80017fe:	4808      	ldr	r0, [pc, #32]	@ (8001820 <MCP2515_RequestToSend+0x30>)
 8001800:	f000 fc96 	bl	8002130 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	4618      	mov	r0, r3
 8001808:	f000 f80c 	bl	8001824 <SPI_Tx>
      
  MCP2515_CS_HIGH();
 800180c:	2201      	movs	r2, #1
 800180e:	2180      	movs	r1, #128	@ 0x80
 8001810:	4803      	ldr	r0, [pc, #12]	@ (8001820 <MCP2515_RequestToSend+0x30>)
 8001812:	f000 fc8d 	bl	8002130 <HAL_GPIO_WritePin>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	48000400 	.word	0x48000400

08001824 <SPI_Tx>:

    @{
*/
/******************************************************************************/
static void SPI_Tx(uint8_t data)
{ 
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	71fb      	strb	r3, [r7, #7]

  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);  
 800182e:	1df9      	adds	r1, r7, #7
 8001830:	2364      	movs	r3, #100	@ 0x64
 8001832:	2201      	movs	r2, #1
 8001834:	4803      	ldr	r0, [pc, #12]	@ (8001844 <SPI_Tx+0x20>)
 8001836:	f001 feba 	bl	80035ae <HAL_SPI_Transmit>

}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200002b8 	.word	0x200002b8

08001848 <SPI_TxBuffer>:

    @{
*/
/******************************************************************************/
void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(&hspi1, buffer, length, SPI_TIMEOUT);    
 8001854:	78fb      	ldrb	r3, [r7, #3]
 8001856:	b29a      	uxth	r2, r3
 8001858:	2364      	movs	r3, #100	@ 0x64
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	4803      	ldr	r0, [pc, #12]	@ (800186c <SPI_TxBuffer+0x24>)
 800185e:	f001 fea6 	bl	80035ae <HAL_SPI_Transmit>
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	200002b8 	.word	0x200002b8

08001870 <SPI_Rx>:

    @{
*/
/******************************************************************************/
static uint8_t SPI_Rx(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  read_error = (uint8_t) HAL_SPI_Receive(&hspi1, &retVal, 1, SPI_TIMEOUT);
 8001876:	1df9      	adds	r1, r7, #7
 8001878:	2364      	movs	r3, #100	@ 0x64
 800187a:	2201      	movs	r2, #1
 800187c:	4805      	ldr	r0, [pc, #20]	@ (8001894 <SPI_Rx+0x24>)
 800187e:	f002 f80b 	bl	8003898 <HAL_SPI_Receive>
 8001882:	4603      	mov	r3, r0
 8001884:	461a      	mov	r2, r3
 8001886:	4b04      	ldr	r3, [pc, #16]	@ (8001898 <SPI_Rx+0x28>)
 8001888:	701a      	strb	r2, [r3, #0]

  return retVal;
 800188a:	79fb      	ldrb	r3, [r7, #7]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	200002b8 	.word	0x200002b8
 8001898:	200003c2 	.word	0x200003c2

0800189c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a2:	4b0f      	ldr	r3, [pc, #60]	@ (80018e0 <HAL_MspInit+0x44>)
 80018a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018a6:	4a0e      	ldr	r2, [pc, #56]	@ (80018e0 <HAL_MspInit+0x44>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80018ae:	4b0c      	ldr	r3, [pc, #48]	@ (80018e0 <HAL_MspInit+0x44>)
 80018b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ba:	4b09      	ldr	r3, [pc, #36]	@ (80018e0 <HAL_MspInit+0x44>)
 80018bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018be:	4a08      	ldr	r2, [pc, #32]	@ (80018e0 <HAL_MspInit+0x44>)
 80018c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80018c6:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <HAL_MspInit+0x44>)
 80018c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ce:	603b      	str	r3, [r7, #0]
 80018d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	40021000 	.word	0x40021000

080018e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08a      	sub	sp, #40	@ 0x28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a17      	ldr	r2, [pc, #92]	@ (8001960 <HAL_SPI_MspInit+0x7c>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d128      	bne.n	8001958 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001906:	4b17      	ldr	r3, [pc, #92]	@ (8001964 <HAL_SPI_MspInit+0x80>)
 8001908:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800190a:	4a16      	ldr	r2, [pc, #88]	@ (8001964 <HAL_SPI_MspInit+0x80>)
 800190c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001910:	6613      	str	r3, [r2, #96]	@ 0x60
 8001912:	4b14      	ldr	r3, [pc, #80]	@ (8001964 <HAL_SPI_MspInit+0x80>)
 8001914:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001916:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191e:	4b11      	ldr	r3, [pc, #68]	@ (8001964 <HAL_SPI_MspInit+0x80>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001922:	4a10      	ldr	r2, [pc, #64]	@ (8001964 <HAL_SPI_MspInit+0x80>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800192a:	4b0e      	ldr	r3, [pc, #56]	@ (8001964 <HAL_SPI_MspInit+0x80>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8001936:	23c2      	movs	r3, #194	@ 0xc2
 8001938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193a:	2302      	movs	r3, #2
 800193c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001942:	2303      	movs	r3, #3
 8001944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001946:	2305      	movs	r3, #5
 8001948:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194a:	f107 0314 	add.w	r3, r7, #20
 800194e:	4619      	mov	r1, r3
 8001950:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001954:	f000 fa82 	bl	8001e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001958:	bf00      	nop
 800195a:	3728      	adds	r7, #40	@ 0x28
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40013000 	.word	0x40013000
 8001964:	40021000 	.word	0x40021000

08001968 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b09e      	sub	sp, #120	@ 0x78
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001980:	f107 0310 	add.w	r3, r7, #16
 8001984:	2254      	movs	r2, #84	@ 0x54
 8001986:	2100      	movs	r1, #0
 8001988:	4618      	mov	r0, r3
 800198a:	f003 f9d5 	bl	8004d38 <memset>
  if(huart->Instance==USART2)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a28      	ldr	r2, [pc, #160]	@ (8001a34 <HAL_UART_MspInit+0xcc>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d148      	bne.n	8001a2a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001998:	2302      	movs	r3, #2
 800199a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800199c:	2300      	movs	r3, #0
 800199e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019a0:	f107 0310 	add.w	r3, r7, #16
 80019a4:	4618      	mov	r0, r3
 80019a6:	f001 fa77 	bl	8002e98 <HAL_RCCEx_PeriphCLKConfig>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019b0:	f7ff fdc0 	bl	8001534 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019b4:	4b20      	ldr	r3, [pc, #128]	@ (8001a38 <HAL_UART_MspInit+0xd0>)
 80019b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b8:	4a1f      	ldr	r2, [pc, #124]	@ (8001a38 <HAL_UART_MspInit+0xd0>)
 80019ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019be:	6593      	str	r3, [r2, #88]	@ 0x58
 80019c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a38 <HAL_UART_MspInit+0xd0>)
 80019c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a38 <HAL_UART_MspInit+0xd0>)
 80019ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d0:	4a19      	ldr	r2, [pc, #100]	@ (8001a38 <HAL_UART_MspInit+0xd0>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019d8:	4b17      	ldr	r3, [pc, #92]	@ (8001a38 <HAL_UART_MspInit+0xd0>)
 80019da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80019e4:	2304      	movs	r3, #4
 80019e6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f0:	2303      	movs	r3, #3
 80019f2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019f4:	2307      	movs	r3, #7
 80019f6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80019f8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80019fc:	4619      	mov	r1, r3
 80019fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a02:	f000 fa2b 	bl	8001e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001a06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a0a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a14:	2303      	movs	r3, #3
 8001a16:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001a1c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a20:	4619      	mov	r1, r3
 8001a22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a26:	f000 fa19 	bl	8001e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a2a:	bf00      	nop
 8001a2c:	3778      	adds	r7, #120	@ 0x78
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40004400 	.word	0x40004400
 8001a38:	40021000 	.word	0x40021000

08001a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <NMI_Handler+0x4>

08001a44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a48:	bf00      	nop
 8001a4a:	e7fd      	b.n	8001a48 <HardFault_Handler+0x4>

08001a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <MemManage_Handler+0x4>

08001a54 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a58:	bf00      	nop
 8001a5a:	e7fd      	b.n	8001a58 <BusFault_Handler+0x4>

08001a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a60:	bf00      	nop
 8001a62:	e7fd      	b.n	8001a60 <UsageFault_Handler+0x4>

08001a64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a92:	f000 f8dd 	bl	8001c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aa4:	4a14      	ldr	r2, [pc, #80]	@ (8001af8 <_sbrk+0x5c>)
 8001aa6:	4b15      	ldr	r3, [pc, #84]	@ (8001afc <_sbrk+0x60>)
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ab0:	4b13      	ldr	r3, [pc, #76]	@ (8001b00 <_sbrk+0x64>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d102      	bne.n	8001abe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ab8:	4b11      	ldr	r3, [pc, #68]	@ (8001b00 <_sbrk+0x64>)
 8001aba:	4a12      	ldr	r2, [pc, #72]	@ (8001b04 <_sbrk+0x68>)
 8001abc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001abe:	4b10      	ldr	r3, [pc, #64]	@ (8001b00 <_sbrk+0x64>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d207      	bcs.n	8001adc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001acc:	f003 f93c 	bl	8004d48 <__errno>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	220c      	movs	r2, #12
 8001ad4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8001ada:	e009      	b.n	8001af0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001adc:	4b08      	ldr	r3, [pc, #32]	@ (8001b00 <_sbrk+0x64>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ae2:	4b07      	ldr	r3, [pc, #28]	@ (8001b00 <_sbrk+0x64>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4413      	add	r3, r2
 8001aea:	4a05      	ldr	r2, [pc, #20]	@ (8001b00 <_sbrk+0x64>)
 8001aec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aee:	68fb      	ldr	r3, [r7, #12]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20010000 	.word	0x20010000
 8001afc:	00000400 	.word	0x00000400
 8001b00:	200003c4 	.word	0x200003c4
 8001b04:	20000518 	.word	0x20000518

08001b08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b0c:	4b06      	ldr	r3, [pc, #24]	@ (8001b28 <SystemInit+0x20>)
 8001b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b12:	4a05      	ldr	r2, [pc, #20]	@ (8001b28 <SystemInit+0x20>)
 8001b14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <uart_serial_print>:

    @{
*/
/******************************************************************************/
void uart_serial_print(char* data, uint8_t size)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	70fb      	strb	r3, [r7, #3]
    HAL_UART_Transmit(&huart2, data, size, 100);
 8001b38:	78fb      	ldrb	r3, [r7, #3]
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	2364      	movs	r3, #100	@ 0x64
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	4803      	ldr	r0, [pc, #12]	@ (8001b50 <uart_serial_print+0x24>)
 8001b42:	f002 fc0d 	bl	8004360 <HAL_UART_Transmit>
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	2000031c 	.word	0x2000031c

08001b54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b58:	f7ff ffd6 	bl	8001b08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b5c:	480c      	ldr	r0, [pc, #48]	@ (8001b90 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b5e:	490d      	ldr	r1, [pc, #52]	@ (8001b94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b60:	4a0d      	ldr	r2, [pc, #52]	@ (8001b98 <LoopForever+0xe>)
  movs r3, #0
 8001b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b64:	e002      	b.n	8001b6c <LoopCopyDataInit>

08001b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b6a:	3304      	adds	r3, #4

08001b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b70:	d3f9      	bcc.n	8001b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b72:	4a0a      	ldr	r2, [pc, #40]	@ (8001b9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b74:	4c0a      	ldr	r4, [pc, #40]	@ (8001ba0 <LoopForever+0x16>)
  movs r3, #0
 8001b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b78:	e001      	b.n	8001b7e <LoopFillZerobss>

08001b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b7c:	3204      	adds	r2, #4

08001b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b80:	d3fb      	bcc.n	8001b7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b82:	f003 f8e7 	bl	8004d54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b86:	f7ff fbc7 	bl	8001318 <main>

08001b8a <LoopForever>:

LoopForever:
    b LoopForever
 8001b8a:	e7fe      	b.n	8001b8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b8c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b94:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8001b98:	080058c8 	.word	0x080058c8
  ldr r2, =_sbss
 8001b9c:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8001ba0:	20000514 	.word	0x20000514

08001ba4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ba4:	e7fe      	b.n	8001ba4 <ADC1_IRQHandler>

08001ba6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bac:	2300      	movs	r3, #0
 8001bae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb0:	2003      	movs	r0, #3
 8001bb2:	f000 f91f 	bl	8001df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	f000 f80e 	bl	8001bd8 <HAL_InitTick>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d002      	beq.n	8001bc8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	71fb      	strb	r3, [r7, #7]
 8001bc6:	e001      	b.n	8001bcc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bc8:	f7ff fe68 	bl	800189c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001be4:	4b17      	ldr	r3, [pc, #92]	@ (8001c44 <HAL_InitTick+0x6c>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d023      	beq.n	8001c34 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001bec:	4b16      	ldr	r3, [pc, #88]	@ (8001c48 <HAL_InitTick+0x70>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4b14      	ldr	r3, [pc, #80]	@ (8001c44 <HAL_InitTick+0x6c>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 f91d 	bl	8001e42 <HAL_SYSTICK_Config>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10f      	bne.n	8001c2e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b0f      	cmp	r3, #15
 8001c12:	d809      	bhi.n	8001c28 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c14:	2200      	movs	r2, #0
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	f04f 30ff 	mov.w	r0, #4294967295
 8001c1c:	f000 f8f5 	bl	8001e0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c20:	4a0a      	ldr	r2, [pc, #40]	@ (8001c4c <HAL_InitTick+0x74>)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	e007      	b.n	8001c38 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	73fb      	strb	r3, [r7, #15]
 8001c2c:	e004      	b.n	8001c38 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	73fb      	strb	r3, [r7, #15]
 8001c32:	e001      	b.n	8001c38 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000058 	.word	0x20000058
 8001c48:	20000050 	.word	0x20000050
 8001c4c:	20000054 	.word	0x20000054

08001c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c54:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <HAL_IncTick+0x20>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <HAL_IncTick+0x24>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4413      	add	r3, r2
 8001c60:	4a04      	ldr	r2, [pc, #16]	@ (8001c74 <HAL_IncTick+0x24>)
 8001c62:	6013      	str	r3, [r2, #0]
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	20000058 	.word	0x20000058
 8001c74:	200003c8 	.word	0x200003c8

08001c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c7c:	4b03      	ldr	r3, [pc, #12]	@ (8001c8c <HAL_GetTick+0x14>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	200003c8 	.word	0x200003c8

08001c90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cac:	4013      	ands	r3, r2
 8001cae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cc2:	4a04      	ldr	r2, [pc, #16]	@ (8001cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	60d3      	str	r3, [r2, #12]
}
 8001cc8:	bf00      	nop
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cdc:	4b04      	ldr	r3, [pc, #16]	@ (8001cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	0a1b      	lsrs	r3, r3, #8
 8001ce2:	f003 0307 	and.w	r3, r3, #7
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	6039      	str	r1, [r7, #0]
 8001cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	db0a      	blt.n	8001d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	490c      	ldr	r1, [pc, #48]	@ (8001d40 <__NVIC_SetPriority+0x4c>)
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	0112      	lsls	r2, r2, #4
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	440b      	add	r3, r1
 8001d18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d1c:	e00a      	b.n	8001d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	4908      	ldr	r1, [pc, #32]	@ (8001d44 <__NVIC_SetPriority+0x50>)
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	3b04      	subs	r3, #4
 8001d2c:	0112      	lsls	r2, r2, #4
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	440b      	add	r3, r1
 8001d32:	761a      	strb	r2, [r3, #24]
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000e100 	.word	0xe000e100
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b089      	sub	sp, #36	@ 0x24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f1c3 0307 	rsb	r3, r3, #7
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	bf28      	it	cs
 8001d66:	2304      	movcs	r3, #4
 8001d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3304      	adds	r3, #4
 8001d6e:	2b06      	cmp	r3, #6
 8001d70:	d902      	bls.n	8001d78 <NVIC_EncodePriority+0x30>
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3b03      	subs	r3, #3
 8001d76:	e000      	b.n	8001d7a <NVIC_EncodePriority+0x32>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43da      	mvns	r2, r3
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	401a      	ands	r2, r3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d90:	f04f 31ff 	mov.w	r1, #4294967295
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9a:	43d9      	mvns	r1, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da0:	4313      	orrs	r3, r2
         );
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3724      	adds	r7, #36	@ 0x24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dc0:	d301      	bcc.n	8001dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e00f      	b.n	8001de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001df0 <SysTick_Config+0x40>)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dce:	210f      	movs	r1, #15
 8001dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd4:	f7ff ff8e 	bl	8001cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dd8:	4b05      	ldr	r3, [pc, #20]	@ (8001df0 <SysTick_Config+0x40>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dde:	4b04      	ldr	r3, [pc, #16]	@ (8001df0 <SysTick_Config+0x40>)
 8001de0:	2207      	movs	r2, #7
 8001de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	e000e010 	.word	0xe000e010

08001df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff ff47 	bl	8001c90 <__NVIC_SetPriorityGrouping>
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b086      	sub	sp, #24
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	4603      	mov	r3, r0
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	607a      	str	r2, [r7, #4]
 8001e16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e1c:	f7ff ff5c 	bl	8001cd8 <__NVIC_GetPriorityGrouping>
 8001e20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	68b9      	ldr	r1, [r7, #8]
 8001e26:	6978      	ldr	r0, [r7, #20]
 8001e28:	f7ff ff8e 	bl	8001d48 <NVIC_EncodePriority>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e32:	4611      	mov	r1, r2
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff ff5d 	bl	8001cf4 <__NVIC_SetPriority>
}
 8001e3a:	bf00      	nop
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff ffb0 	bl	8001db0 <SysTick_Config>
 8001e50:	4603      	mov	r3, r0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b087      	sub	sp, #28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e6a:	e148      	b.n	80020fe <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	2101      	movs	r1, #1
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	fa01 f303 	lsl.w	r3, r1, r3
 8001e78:	4013      	ands	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 813a 	beq.w	80020f8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d005      	beq.n	8001e9c <HAL_GPIO_Init+0x40>
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d130      	bne.n	8001efe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	f003 0201 	and.w	r2, r3, #1
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	d017      	beq.n	8001f3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	2203      	movs	r2, #3
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	689a      	ldr	r2, [r3, #8]
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 0303 	and.w	r3, r3, #3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d123      	bne.n	8001f8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	08da      	lsrs	r2, r3, #3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3208      	adds	r2, #8
 8001f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	220f      	movs	r2, #15
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4013      	ands	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	691a      	ldr	r2, [r3, #16]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	08da      	lsrs	r2, r3, #3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3208      	adds	r2, #8
 8001f88:	6939      	ldr	r1, [r7, #16]
 8001f8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	2203      	movs	r2, #3
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 0203 	and.w	r2, r3, #3
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 8094 	beq.w	80020f8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd0:	4b52      	ldr	r3, [pc, #328]	@ (800211c <HAL_GPIO_Init+0x2c0>)
 8001fd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fd4:	4a51      	ldr	r2, [pc, #324]	@ (800211c <HAL_GPIO_Init+0x2c0>)
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fdc:	4b4f      	ldr	r3, [pc, #316]	@ (800211c <HAL_GPIO_Init+0x2c0>)
 8001fde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	60bb      	str	r3, [r7, #8]
 8001fe6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fe8:	4a4d      	ldr	r2, [pc, #308]	@ (8002120 <HAL_GPIO_Init+0x2c4>)
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	089b      	lsrs	r3, r3, #2
 8001fee:	3302      	adds	r3, #2
 8001ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	f003 0303 	and.w	r3, r3, #3
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	220f      	movs	r2, #15
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4013      	ands	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002012:	d00d      	beq.n	8002030 <HAL_GPIO_Init+0x1d4>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a43      	ldr	r2, [pc, #268]	@ (8002124 <HAL_GPIO_Init+0x2c8>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d007      	beq.n	800202c <HAL_GPIO_Init+0x1d0>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a42      	ldr	r2, [pc, #264]	@ (8002128 <HAL_GPIO_Init+0x2cc>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d101      	bne.n	8002028 <HAL_GPIO_Init+0x1cc>
 8002024:	2302      	movs	r3, #2
 8002026:	e004      	b.n	8002032 <HAL_GPIO_Init+0x1d6>
 8002028:	2307      	movs	r3, #7
 800202a:	e002      	b.n	8002032 <HAL_GPIO_Init+0x1d6>
 800202c:	2301      	movs	r3, #1
 800202e:	e000      	b.n	8002032 <HAL_GPIO_Init+0x1d6>
 8002030:	2300      	movs	r3, #0
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	f002 0203 	and.w	r2, r2, #3
 8002038:	0092      	lsls	r2, r2, #2
 800203a:	4093      	lsls	r3, r2
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	4313      	orrs	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002042:	4937      	ldr	r1, [pc, #220]	@ (8002120 <HAL_GPIO_Init+0x2c4>)
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	089b      	lsrs	r3, r3, #2
 8002048:	3302      	adds	r3, #2
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002050:	4b36      	ldr	r3, [pc, #216]	@ (800212c <HAL_GPIO_Init+0x2d0>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	43db      	mvns	r3, r3
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	4013      	ands	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	4313      	orrs	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002074:	4a2d      	ldr	r2, [pc, #180]	@ (800212c <HAL_GPIO_Init+0x2d0>)
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800207a:	4b2c      	ldr	r3, [pc, #176]	@ (800212c <HAL_GPIO_Init+0x2d0>)
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	43db      	mvns	r3, r3
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	4013      	ands	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4313      	orrs	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800209e:	4a23      	ldr	r2, [pc, #140]	@ (800212c <HAL_GPIO_Init+0x2d0>)
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020a4:	4b21      	ldr	r3, [pc, #132]	@ (800212c <HAL_GPIO_Init+0x2d0>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	4013      	ands	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020c8:	4a18      	ldr	r2, [pc, #96]	@ (800212c <HAL_GPIO_Init+0x2d0>)
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80020ce:	4b17      	ldr	r3, [pc, #92]	@ (800212c <HAL_GPIO_Init+0x2d0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	43db      	mvns	r3, r3
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	4013      	ands	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020f2:	4a0e      	ldr	r2, [pc, #56]	@ (800212c <HAL_GPIO_Init+0x2d0>)
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	3301      	adds	r3, #1
 80020fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	fa22 f303 	lsr.w	r3, r2, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	f47f aeaf 	bne.w	8001e6c <HAL_GPIO_Init+0x10>
  }
}
 800210e:	bf00      	nop
 8002110:	bf00      	nop
 8002112:	371c      	adds	r7, #28
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	40021000 	.word	0x40021000
 8002120:	40010000 	.word	0x40010000
 8002124:	48000400 	.word	0x48000400
 8002128:	48000800 	.word	0x48000800
 800212c:	40010400 	.word	0x40010400

08002130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	807b      	strh	r3, [r7, #2]
 800213c:	4613      	mov	r3, r2
 800213e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002140:	787b      	ldrb	r3, [r7, #1]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002146:	887a      	ldrh	r2, [r7, #2]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800214c:	e002      	b.n	8002154 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800214e:	887a      	ldrh	r2, [r7, #2]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002164:	4b04      	ldr	r3, [pc, #16]	@ (8002178 <HAL_PWREx_GetVoltageRange+0x18>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800216c:	4618      	mov	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	40007000 	.word	0x40007000

0800217c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800218a:	d130      	bne.n	80021ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800218c:	4b23      	ldr	r3, [pc, #140]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002198:	d038      	beq.n	800220c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800219a:	4b20      	ldr	r3, [pc, #128]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021a2:	4a1e      	ldr	r2, [pc, #120]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002220 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2232      	movs	r2, #50	@ 0x32
 80021b0:	fb02 f303 	mul.w	r3, r2, r3
 80021b4:	4a1b      	ldr	r2, [pc, #108]	@ (8002224 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021b6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ba:	0c9b      	lsrs	r3, r3, #18
 80021bc:	3301      	adds	r3, #1
 80021be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021c0:	e002      	b.n	80021c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	3b01      	subs	r3, #1
 80021c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021c8:	4b14      	ldr	r3, [pc, #80]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021d4:	d102      	bne.n	80021dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1f2      	bne.n	80021c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021dc:	4b0f      	ldr	r3, [pc, #60]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021e8:	d110      	bne.n	800220c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e00f      	b.n	800220e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021ee:	4b0b      	ldr	r3, [pc, #44]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021fa:	d007      	beq.n	800220c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021fc:	4b07      	ldr	r3, [pc, #28]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002204:	4a05      	ldr	r2, [pc, #20]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002206:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800220a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40007000 	.word	0x40007000
 8002220:	20000050 	.word	0x20000050
 8002224:	431bde83 	.word	0x431bde83

08002228 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d102      	bne.n	800223c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	f000 bc02 	b.w	8002a40 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800223c:	4b96      	ldr	r3, [pc, #600]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 030c 	and.w	r3, r3, #12
 8002244:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002246:	4b94      	ldr	r3, [pc, #592]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0310 	and.w	r3, r3, #16
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 80e4 	beq.w	8002426 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d007      	beq.n	8002274 <HAL_RCC_OscConfig+0x4c>
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	2b0c      	cmp	r3, #12
 8002268:	f040 808b 	bne.w	8002382 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	2b01      	cmp	r3, #1
 8002270:	f040 8087 	bne.w	8002382 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002274:	4b88      	ldr	r3, [pc, #544]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d005      	beq.n	800228c <HAL_RCC_OscConfig+0x64>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e3d9      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a1a      	ldr	r2, [r3, #32]
 8002290:	4b81      	ldr	r3, [pc, #516]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0308 	and.w	r3, r3, #8
 8002298:	2b00      	cmp	r3, #0
 800229a:	d004      	beq.n	80022a6 <HAL_RCC_OscConfig+0x7e>
 800229c:	4b7e      	ldr	r3, [pc, #504]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022a4:	e005      	b.n	80022b2 <HAL_RCC_OscConfig+0x8a>
 80022a6:	4b7c      	ldr	r3, [pc, #496]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80022a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022ac:	091b      	lsrs	r3, r3, #4
 80022ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d223      	bcs.n	80022fe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 fd8c 	bl	8002dd8 <RCC_SetFlashLatencyFromMSIRange>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e3ba      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022ca:	4b73      	ldr	r3, [pc, #460]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a72      	ldr	r2, [pc, #456]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80022d0:	f043 0308 	orr.w	r3, r3, #8
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	4b70      	ldr	r3, [pc, #448]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	496d      	ldr	r1, [pc, #436]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022e8:	4b6b      	ldr	r3, [pc, #428]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	69db      	ldr	r3, [r3, #28]
 80022f4:	021b      	lsls	r3, r3, #8
 80022f6:	4968      	ldr	r1, [pc, #416]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	604b      	str	r3, [r1, #4]
 80022fc:	e025      	b.n	800234a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022fe:	4b66      	ldr	r3, [pc, #408]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a65      	ldr	r2, [pc, #404]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002304:	f043 0308 	orr.w	r3, r3, #8
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	4b63      	ldr	r3, [pc, #396]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	4960      	ldr	r1, [pc, #384]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002318:	4313      	orrs	r3, r2
 800231a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800231c:	4b5e      	ldr	r3, [pc, #376]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	021b      	lsls	r3, r3, #8
 800232a:	495b      	ldr	r1, [pc, #364]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 800232c:	4313      	orrs	r3, r2
 800232e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d109      	bne.n	800234a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	4618      	mov	r0, r3
 800233c:	f000 fd4c 	bl	8002dd8 <RCC_SetFlashLatencyFromMSIRange>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e37a      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800234a:	f000 fc81 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 800234e:	4602      	mov	r2, r0
 8002350:	4b51      	ldr	r3, [pc, #324]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	091b      	lsrs	r3, r3, #4
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	4950      	ldr	r1, [pc, #320]	@ (800249c <HAL_RCC_OscConfig+0x274>)
 800235c:	5ccb      	ldrb	r3, [r1, r3]
 800235e:	f003 031f 	and.w	r3, r3, #31
 8002362:	fa22 f303 	lsr.w	r3, r2, r3
 8002366:	4a4e      	ldr	r2, [pc, #312]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 8002368:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800236a:	4b4e      	ldr	r3, [pc, #312]	@ (80024a4 <HAL_RCC_OscConfig+0x27c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff fc32 	bl	8001bd8 <HAL_InitTick>
 8002374:	4603      	mov	r3, r0
 8002376:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002378:	7bfb      	ldrb	r3, [r7, #15]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d052      	beq.n	8002424 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800237e:	7bfb      	ldrb	r3, [r7, #15]
 8002380:	e35e      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d032      	beq.n	80023f0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800238a:	4b43      	ldr	r3, [pc, #268]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a42      	ldr	r2, [pc, #264]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002390:	f043 0301 	orr.w	r3, r3, #1
 8002394:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002396:	f7ff fc6f 	bl	8001c78 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800239e:	f7ff fc6b 	bl	8001c78 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e347      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023b0:	4b39      	ldr	r3, [pc, #228]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0f0      	beq.n	800239e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023bc:	4b36      	ldr	r3, [pc, #216]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a35      	ldr	r2, [pc, #212]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80023c2:	f043 0308 	orr.w	r3, r3, #8
 80023c6:	6013      	str	r3, [r2, #0]
 80023c8:	4b33      	ldr	r3, [pc, #204]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	4930      	ldr	r1, [pc, #192]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023da:	4b2f      	ldr	r3, [pc, #188]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	021b      	lsls	r3, r3, #8
 80023e8:	492b      	ldr	r1, [pc, #172]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	604b      	str	r3, [r1, #4]
 80023ee:	e01a      	b.n	8002426 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023f0:	4b29      	ldr	r3, [pc, #164]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a28      	ldr	r2, [pc, #160]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80023f6:	f023 0301 	bic.w	r3, r3, #1
 80023fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023fc:	f7ff fc3c 	bl	8001c78 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002404:	f7ff fc38 	bl	8001c78 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e314      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002416:	4b20      	ldr	r3, [pc, #128]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f0      	bne.n	8002404 <HAL_RCC_OscConfig+0x1dc>
 8002422:	e000      	b.n	8002426 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002424:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d073      	beq.n	800251a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	2b08      	cmp	r3, #8
 8002436:	d005      	beq.n	8002444 <HAL_RCC_OscConfig+0x21c>
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	2b0c      	cmp	r3, #12
 800243c:	d10e      	bne.n	800245c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	2b03      	cmp	r3, #3
 8002442:	d10b      	bne.n	800245c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002444:	4b14      	ldr	r3, [pc, #80]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d063      	beq.n	8002518 <HAL_RCC_OscConfig+0x2f0>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d15f      	bne.n	8002518 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e2f1      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002464:	d106      	bne.n	8002474 <HAL_RCC_OscConfig+0x24c>
 8002466:	4b0c      	ldr	r3, [pc, #48]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a0b      	ldr	r2, [pc, #44]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 800246c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	e025      	b.n	80024c0 <HAL_RCC_OscConfig+0x298>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800247c:	d114      	bne.n	80024a8 <HAL_RCC_OscConfig+0x280>
 800247e:	4b06      	ldr	r3, [pc, #24]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a05      	ldr	r2, [pc, #20]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002484:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	4b03      	ldr	r3, [pc, #12]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a02      	ldr	r2, [pc, #8]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002490:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	e013      	b.n	80024c0 <HAL_RCC_OscConfig+0x298>
 8002498:	40021000 	.word	0x40021000
 800249c:	0800583c 	.word	0x0800583c
 80024a0:	20000050 	.word	0x20000050
 80024a4:	20000054 	.word	0x20000054
 80024a8:	4ba0      	ldr	r3, [pc, #640]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a9f      	ldr	r2, [pc, #636]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80024ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	4b9d      	ldr	r3, [pc, #628]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a9c      	ldr	r2, [pc, #624]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80024ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d013      	beq.n	80024f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c8:	f7ff fbd6 	bl	8001c78 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d0:	f7ff fbd2 	bl	8001c78 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b64      	cmp	r3, #100	@ 0x64
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e2ae      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024e2:	4b92      	ldr	r3, [pc, #584]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0x2a8>
 80024ee:	e014      	b.n	800251a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7ff fbc2 	bl	8001c78 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f8:	f7ff fbbe 	bl	8001c78 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b64      	cmp	r3, #100	@ 0x64
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e29a      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800250a:	4b88      	ldr	r3, [pc, #544]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x2d0>
 8002516:	e000      	b.n	800251a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d060      	beq.n	80025e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	2b04      	cmp	r3, #4
 800252a:	d005      	beq.n	8002538 <HAL_RCC_OscConfig+0x310>
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	2b0c      	cmp	r3, #12
 8002530:	d119      	bne.n	8002566 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	2b02      	cmp	r3, #2
 8002536:	d116      	bne.n	8002566 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002538:	4b7c      	ldr	r3, [pc, #496]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002540:	2b00      	cmp	r3, #0
 8002542:	d005      	beq.n	8002550 <HAL_RCC_OscConfig+0x328>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e277      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002550:	4b76      	ldr	r3, [pc, #472]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	061b      	lsls	r3, r3, #24
 800255e:	4973      	ldr	r1, [pc, #460]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002560:	4313      	orrs	r3, r2
 8002562:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002564:	e040      	b.n	80025e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d023      	beq.n	80025b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800256e:	4b6f      	ldr	r3, [pc, #444]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a6e      	ldr	r2, [pc, #440]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002574:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002578:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257a:	f7ff fb7d 	bl	8001c78 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002582:	f7ff fb79 	bl	8001c78 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e255      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002594:	4b65      	ldr	r3, [pc, #404]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0f0      	beq.n	8002582 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a0:	4b62      	ldr	r3, [pc, #392]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	061b      	lsls	r3, r3, #24
 80025ae:	495f      	ldr	r1, [pc, #380]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	604b      	str	r3, [r1, #4]
 80025b4:	e018      	b.n	80025e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025b6:	4b5d      	ldr	r3, [pc, #372]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a5c      	ldr	r2, [pc, #368]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80025bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c2:	f7ff fb59 	bl	8001c78 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025c8:	e008      	b.n	80025dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ca:	f7ff fb55 	bl	8001c78 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e231      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025dc:	4b53      	ldr	r3, [pc, #332]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1f0      	bne.n	80025ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0308 	and.w	r3, r3, #8
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d03c      	beq.n	800266e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d01c      	beq.n	8002636 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025fc:	4b4b      	ldr	r3, [pc, #300]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80025fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002602:	4a4a      	ldr	r2, [pc, #296]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260c:	f7ff fb34 	bl	8001c78 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002614:	f7ff fb30 	bl	8001c78 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e20c      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002626:	4b41      	ldr	r3, [pc, #260]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002628:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0ef      	beq.n	8002614 <HAL_RCC_OscConfig+0x3ec>
 8002634:	e01b      	b.n	800266e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002636:	4b3d      	ldr	r3, [pc, #244]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002638:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800263c:	4a3b      	ldr	r2, [pc, #236]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 800263e:	f023 0301 	bic.w	r3, r3, #1
 8002642:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002646:	f7ff fb17 	bl	8001c78 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800264e:	f7ff fb13 	bl	8001c78 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e1ef      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002660:	4b32      	ldr	r3, [pc, #200]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002662:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1ef      	bne.n	800264e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0304 	and.w	r3, r3, #4
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 80a6 	beq.w	80027c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800267c:	2300      	movs	r3, #0
 800267e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002680:	4b2a      	ldr	r3, [pc, #168]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002684:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10d      	bne.n	80026a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800268c:	4b27      	ldr	r3, [pc, #156]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 800268e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002690:	4a26      	ldr	r2, [pc, #152]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002692:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002696:	6593      	str	r3, [r2, #88]	@ 0x58
 8002698:	4b24      	ldr	r3, [pc, #144]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 800269a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800269c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026a4:	2301      	movs	r3, #1
 80026a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026a8:	4b21      	ldr	r3, [pc, #132]	@ (8002730 <HAL_RCC_OscConfig+0x508>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d118      	bne.n	80026e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026b4:	4b1e      	ldr	r3, [pc, #120]	@ (8002730 <HAL_RCC_OscConfig+0x508>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002730 <HAL_RCC_OscConfig+0x508>)
 80026ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026c0:	f7ff fada 	bl	8001c78 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c8:	f7ff fad6 	bl	8001c78 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e1b2      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026da:	4b15      	ldr	r3, [pc, #84]	@ (8002730 <HAL_RCC_OscConfig+0x508>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d108      	bne.n	8002700 <HAL_RCC_OscConfig+0x4d8>
 80026ee:	4b0f      	ldr	r3, [pc, #60]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80026f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026f4:	4a0d      	ldr	r2, [pc, #52]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026fe:	e029      	b.n	8002754 <HAL_RCC_OscConfig+0x52c>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	2b05      	cmp	r3, #5
 8002706:	d115      	bne.n	8002734 <HAL_RCC_OscConfig+0x50c>
 8002708:	4b08      	ldr	r3, [pc, #32]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 800270a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800270e:	4a07      	ldr	r2, [pc, #28]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002710:	f043 0304 	orr.w	r3, r3, #4
 8002714:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002718:	4b04      	ldr	r3, [pc, #16]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 800271a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800271e:	4a03      	ldr	r2, [pc, #12]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002728:	e014      	b.n	8002754 <HAL_RCC_OscConfig+0x52c>
 800272a:	bf00      	nop
 800272c:	40021000 	.word	0x40021000
 8002730:	40007000 	.word	0x40007000
 8002734:	4b9a      	ldr	r3, [pc, #616]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 8002736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800273a:	4a99      	ldr	r2, [pc, #612]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 800273c:	f023 0301 	bic.w	r3, r3, #1
 8002740:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002744:	4b96      	ldr	r3, [pc, #600]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 8002746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800274a:	4a95      	ldr	r2, [pc, #596]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 800274c:	f023 0304 	bic.w	r3, r3, #4
 8002750:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d016      	beq.n	800278a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275c:	f7ff fa8c 	bl	8001c78 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002762:	e00a      	b.n	800277a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002764:	f7ff fa88 	bl	8001c78 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002772:	4293      	cmp	r3, r2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e162      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800277a:	4b89      	ldr	r3, [pc, #548]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 800277c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0ed      	beq.n	8002764 <HAL_RCC_OscConfig+0x53c>
 8002788:	e015      	b.n	80027b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278a:	f7ff fa75 	bl	8001c78 <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002790:	e00a      	b.n	80027a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002792:	f7ff fa71 	bl	8001c78 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e14b      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027a8:	4b7d      	ldr	r3, [pc, #500]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 80027aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1ed      	bne.n	8002792 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027b6:	7ffb      	ldrb	r3, [r7, #31]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d105      	bne.n	80027c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027bc:	4b78      	ldr	r3, [pc, #480]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 80027be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c0:	4a77      	ldr	r2, [pc, #476]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 80027c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027c6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0320 	and.w	r3, r3, #32
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d03c      	beq.n	800284e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d01c      	beq.n	8002816 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027dc:	4b70      	ldr	r3, [pc, #448]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 80027de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027e2:	4a6f      	ldr	r2, [pc, #444]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ec:	f7ff fa44 	bl	8001c78 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027f4:	f7ff fa40 	bl	8001c78 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e11c      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002806:	4b66      	ldr	r3, [pc, #408]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 8002808:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0ef      	beq.n	80027f4 <HAL_RCC_OscConfig+0x5cc>
 8002814:	e01b      	b.n	800284e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002816:	4b62      	ldr	r3, [pc, #392]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 8002818:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800281c:	4a60      	ldr	r2, [pc, #384]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 800281e:	f023 0301 	bic.w	r3, r3, #1
 8002822:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002826:	f7ff fa27 	bl	8001c78 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800282e:	f7ff fa23 	bl	8001c78 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e0ff      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002840:	4b57      	ldr	r3, [pc, #348]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 8002842:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1ef      	bne.n	800282e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 80f3 	beq.w	8002a3e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800285c:	2b02      	cmp	r3, #2
 800285e:	f040 80c9 	bne.w	80029f4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002862:	4b4f      	ldr	r3, [pc, #316]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	f003 0203 	and.w	r2, r3, #3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002872:	429a      	cmp	r2, r3
 8002874:	d12c      	bne.n	80028d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002880:	3b01      	subs	r3, #1
 8002882:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002884:	429a      	cmp	r2, r3
 8002886:	d123      	bne.n	80028d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002892:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002894:	429a      	cmp	r2, r3
 8002896:	d11b      	bne.n	80028d0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d113      	bne.n	80028d0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b2:	085b      	lsrs	r3, r3, #1
 80028b4:	3b01      	subs	r3, #1
 80028b6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d109      	bne.n	80028d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c6:	085b      	lsrs	r3, r3, #1
 80028c8:	3b01      	subs	r3, #1
 80028ca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d06b      	beq.n	80029a8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	2b0c      	cmp	r3, #12
 80028d4:	d062      	beq.n	800299c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028d6:	4b32      	ldr	r3, [pc, #200]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e0ac      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028e6:	4b2e      	ldr	r3, [pc, #184]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a2d      	ldr	r2, [pc, #180]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 80028ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028f0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028f2:	f7ff f9c1 	bl	8001c78 <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028fa:	f7ff f9bd 	bl	8001c78 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e099      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800290c:	4b24      	ldr	r3, [pc, #144]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1f0      	bne.n	80028fa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002918:	4b21      	ldr	r3, [pc, #132]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 800291a:	68da      	ldr	r2, [r3, #12]
 800291c:	4b21      	ldr	r3, [pc, #132]	@ (80029a4 <HAL_RCC_OscConfig+0x77c>)
 800291e:	4013      	ands	r3, r2
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002928:	3a01      	subs	r2, #1
 800292a:	0112      	lsls	r2, r2, #4
 800292c:	4311      	orrs	r1, r2
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002932:	0212      	lsls	r2, r2, #8
 8002934:	4311      	orrs	r1, r2
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800293a:	0852      	lsrs	r2, r2, #1
 800293c:	3a01      	subs	r2, #1
 800293e:	0552      	lsls	r2, r2, #21
 8002940:	4311      	orrs	r1, r2
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002946:	0852      	lsrs	r2, r2, #1
 8002948:	3a01      	subs	r2, #1
 800294a:	0652      	lsls	r2, r2, #25
 800294c:	4311      	orrs	r1, r2
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002952:	06d2      	lsls	r2, r2, #27
 8002954:	430a      	orrs	r2, r1
 8002956:	4912      	ldr	r1, [pc, #72]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 8002958:	4313      	orrs	r3, r2
 800295a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800295c:	4b10      	ldr	r3, [pc, #64]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a0f      	ldr	r2, [pc, #60]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 8002962:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002966:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002968:	4b0d      	ldr	r3, [pc, #52]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	4a0c      	ldr	r2, [pc, #48]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 800296e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002972:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002974:	f7ff f980 	bl	8001c78 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800297c:	f7ff f97c 	bl	8001c78 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e058      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800298e:	4b04      	ldr	r3, [pc, #16]	@ (80029a0 <HAL_RCC_OscConfig+0x778>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800299a:	e050      	b.n	8002a3e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e04f      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
 80029a0:	40021000 	.word	0x40021000
 80029a4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029a8:	4b27      	ldr	r3, [pc, #156]	@ (8002a48 <HAL_RCC_OscConfig+0x820>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d144      	bne.n	8002a3e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80029b4:	4b24      	ldr	r3, [pc, #144]	@ (8002a48 <HAL_RCC_OscConfig+0x820>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a23      	ldr	r2, [pc, #140]	@ (8002a48 <HAL_RCC_OscConfig+0x820>)
 80029ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029c0:	4b21      	ldr	r3, [pc, #132]	@ (8002a48 <HAL_RCC_OscConfig+0x820>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	4a20      	ldr	r2, [pc, #128]	@ (8002a48 <HAL_RCC_OscConfig+0x820>)
 80029c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029cc:	f7ff f954 	bl	8001c78 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d4:	f7ff f950 	bl	8001c78 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e02c      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029e6:	4b18      	ldr	r3, [pc, #96]	@ (8002a48 <HAL_RCC_OscConfig+0x820>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0f0      	beq.n	80029d4 <HAL_RCC_OscConfig+0x7ac>
 80029f2:	e024      	b.n	8002a3e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	2b0c      	cmp	r3, #12
 80029f8:	d01f      	beq.n	8002a3a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029fa:	4b13      	ldr	r3, [pc, #76]	@ (8002a48 <HAL_RCC_OscConfig+0x820>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a12      	ldr	r2, [pc, #72]	@ (8002a48 <HAL_RCC_OscConfig+0x820>)
 8002a00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a06:	f7ff f937 	bl	8001c78 <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a0e:	f7ff f933 	bl	8001c78 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e00f      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a20:	4b09      	ldr	r3, [pc, #36]	@ (8002a48 <HAL_RCC_OscConfig+0x820>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1f0      	bne.n	8002a0e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002a2c:	4b06      	ldr	r3, [pc, #24]	@ (8002a48 <HAL_RCC_OscConfig+0x820>)
 8002a2e:	68da      	ldr	r2, [r3, #12]
 8002a30:	4905      	ldr	r1, [pc, #20]	@ (8002a48 <HAL_RCC_OscConfig+0x820>)
 8002a32:	4b06      	ldr	r3, [pc, #24]	@ (8002a4c <HAL_RCC_OscConfig+0x824>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	60cb      	str	r3, [r1, #12]
 8002a38:	e001      	b.n	8002a3e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3720      	adds	r7, #32
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	feeefffc 	.word	0xfeeefffc

08002a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0e7      	b.n	8002c34 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a64:	4b75      	ldr	r3, [pc, #468]	@ (8002c3c <HAL_RCC_ClockConfig+0x1ec>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d910      	bls.n	8002a94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a72:	4b72      	ldr	r3, [pc, #456]	@ (8002c3c <HAL_RCC_ClockConfig+0x1ec>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f023 0207 	bic.w	r2, r3, #7
 8002a7a:	4970      	ldr	r1, [pc, #448]	@ (8002c3c <HAL_RCC_ClockConfig+0x1ec>)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a82:	4b6e      	ldr	r3, [pc, #440]	@ (8002c3c <HAL_RCC_ClockConfig+0x1ec>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d001      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e0cf      	b.n	8002c34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d010      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	4b66      	ldr	r3, [pc, #408]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d908      	bls.n	8002ac2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab0:	4b63      	ldr	r3, [pc, #396]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	4960      	ldr	r1, [pc, #384]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d04c      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d107      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad6:	4b5a      	ldr	r3, [pc, #360]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d121      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e0a6      	b.n	8002c34 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d107      	bne.n	8002afe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aee:	4b54      	ldr	r3, [pc, #336]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d115      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e09a      	b.n	8002c34 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d107      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b06:	4b4e      	ldr	r3, [pc, #312]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d109      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e08e      	b.n	8002c34 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b16:	4b4a      	ldr	r3, [pc, #296]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e086      	b.n	8002c34 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b26:	4b46      	ldr	r3, [pc, #280]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f023 0203 	bic.w	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	4943      	ldr	r1, [pc, #268]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b38:	f7ff f89e 	bl	8001c78 <HAL_GetTick>
 8002b3c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3e:	e00a      	b.n	8002b56 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b40:	f7ff f89a 	bl	8001c78 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e06e      	b.n	8002c34 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b56:	4b3a      	ldr	r3, [pc, #232]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 020c 	and.w	r2, r3, #12
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d1eb      	bne.n	8002b40 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d010      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	4b31      	ldr	r3, [pc, #196]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d208      	bcs.n	8002b96 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b84:	4b2e      	ldr	r3, [pc, #184]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	492b      	ldr	r1, [pc, #172]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b96:	4b29      	ldr	r3, [pc, #164]	@ (8002c3c <HAL_RCC_ClockConfig+0x1ec>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d210      	bcs.n	8002bc6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba4:	4b25      	ldr	r3, [pc, #148]	@ (8002c3c <HAL_RCC_ClockConfig+0x1ec>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f023 0207 	bic.w	r2, r3, #7
 8002bac:	4923      	ldr	r1, [pc, #140]	@ (8002c3c <HAL_RCC_ClockConfig+0x1ec>)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb4:	4b21      	ldr	r3, [pc, #132]	@ (8002c3c <HAL_RCC_ClockConfig+0x1ec>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d001      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e036      	b.n	8002c34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d008      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	4918      	ldr	r1, [pc, #96]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0308 	and.w	r3, r3, #8
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d009      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bf0:	4b13      	ldr	r3, [pc, #76]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	4910      	ldr	r1, [pc, #64]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c04:	f000 f824 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	091b      	lsrs	r3, r3, #4
 8002c10:	f003 030f 	and.w	r3, r3, #15
 8002c14:	490b      	ldr	r1, [pc, #44]	@ (8002c44 <HAL_RCC_ClockConfig+0x1f4>)
 8002c16:	5ccb      	ldrb	r3, [r1, r3]
 8002c18:	f003 031f 	and.w	r3, r3, #31
 8002c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c20:	4a09      	ldr	r2, [pc, #36]	@ (8002c48 <HAL_RCC_ClockConfig+0x1f8>)
 8002c22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c24:	4b09      	ldr	r3, [pc, #36]	@ (8002c4c <HAL_RCC_ClockConfig+0x1fc>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fe ffd5 	bl	8001bd8 <HAL_InitTick>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c32:	7afb      	ldrb	r3, [r7, #11]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40022000 	.word	0x40022000
 8002c40:	40021000 	.word	0x40021000
 8002c44:	0800583c 	.word	0x0800583c
 8002c48:	20000050 	.word	0x20000050
 8002c4c:	20000054 	.word	0x20000054

08002c50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b089      	sub	sp, #36	@ 0x24
 8002c54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61fb      	str	r3, [r7, #28]
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c5e:	4b3e      	ldr	r3, [pc, #248]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 030c 	and.w	r3, r3, #12
 8002c66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c68:	4b3b      	ldr	r3, [pc, #236]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f003 0303 	and.w	r3, r3, #3
 8002c70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d005      	beq.n	8002c84 <HAL_RCC_GetSysClockFreq+0x34>
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	2b0c      	cmp	r3, #12
 8002c7c:	d121      	bne.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d11e      	bne.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c84:	4b34      	ldr	r3, [pc, #208]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d107      	bne.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c90:	4b31      	ldr	r3, [pc, #196]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c96:	0a1b      	lsrs	r3, r3, #8
 8002c98:	f003 030f 	and.w	r3, r3, #15
 8002c9c:	61fb      	str	r3, [r7, #28]
 8002c9e:	e005      	b.n	8002cac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ca0:	4b2d      	ldr	r3, [pc, #180]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	091b      	lsrs	r3, r3, #4
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002cac:	4a2b      	ldr	r2, [pc, #172]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10d      	bne.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cc0:	e00a      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d102      	bne.n	8002cce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cc8:	4b25      	ldr	r3, [pc, #148]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cca:	61bb      	str	r3, [r7, #24]
 8002ccc:	e004      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	d101      	bne.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cd4:	4b23      	ldr	r3, [pc, #140]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cd6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	2b0c      	cmp	r3, #12
 8002cdc:	d134      	bne.n	8002d48 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cde:	4b1e      	ldr	r3, [pc, #120]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d003      	beq.n	8002cf6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d003      	beq.n	8002cfc <HAL_RCC_GetSysClockFreq+0xac>
 8002cf4:	e005      	b.n	8002d02 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cf8:	617b      	str	r3, [r7, #20]
      break;
 8002cfa:	e005      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002cfc:	4b19      	ldr	r3, [pc, #100]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cfe:	617b      	str	r3, [r7, #20]
      break;
 8002d00:	e002      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	617b      	str	r3, [r7, #20]
      break;
 8002d06:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d08:	4b13      	ldr	r3, [pc, #76]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	091b      	lsrs	r3, r3, #4
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	3301      	adds	r3, #1
 8002d14:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d16:	4b10      	ldr	r3, [pc, #64]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	0a1b      	lsrs	r3, r3, #8
 8002d1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	fb03 f202 	mul.w	r2, r3, r2
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	0e5b      	lsrs	r3, r3, #25
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	3301      	adds	r3, #1
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d48:	69bb      	ldr	r3, [r7, #24]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3724      	adds	r7, #36	@ 0x24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	08005854 	.word	0x08005854
 8002d60:	00f42400 	.word	0x00f42400
 8002d64:	007a1200 	.word	0x007a1200

08002d68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d6c:	4b03      	ldr	r3, [pc, #12]	@ (8002d7c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	20000050 	.word	0x20000050

08002d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d84:	f7ff fff0 	bl	8002d68 <HAL_RCC_GetHCLKFreq>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	4b06      	ldr	r3, [pc, #24]	@ (8002da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	0a1b      	lsrs	r3, r3, #8
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	4904      	ldr	r1, [pc, #16]	@ (8002da8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d96:	5ccb      	ldrb	r3, [r1, r3]
 8002d98:	f003 031f 	and.w	r3, r3, #31
 8002d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40021000 	.word	0x40021000
 8002da8:	0800584c 	.word	0x0800584c

08002dac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002db0:	f7ff ffda 	bl	8002d68 <HAL_RCC_GetHCLKFreq>
 8002db4:	4602      	mov	r2, r0
 8002db6:	4b06      	ldr	r3, [pc, #24]	@ (8002dd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	0adb      	lsrs	r3, r3, #11
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	4904      	ldr	r1, [pc, #16]	@ (8002dd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002dc2:	5ccb      	ldrb	r3, [r1, r3]
 8002dc4:	f003 031f 	and.w	r3, r3, #31
 8002dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	0800584c 	.word	0x0800584c

08002dd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002de0:	2300      	movs	r3, #0
 8002de2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002de4:	4b2a      	ldr	r3, [pc, #168]	@ (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002df0:	f7ff f9b6 	bl	8002160 <HAL_PWREx_GetVoltageRange>
 8002df4:	6178      	str	r0, [r7, #20]
 8002df6:	e014      	b.n	8002e22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002df8:	4b25      	ldr	r3, [pc, #148]	@ (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfc:	4a24      	ldr	r2, [pc, #144]	@ (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e02:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e04:	4b22      	ldr	r3, [pc, #136]	@ (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e10:	f7ff f9a6 	bl	8002160 <HAL_PWREx_GetVoltageRange>
 8002e14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e16:	4b1e      	ldr	r3, [pc, #120]	@ (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1a:	4a1d      	ldr	r2, [pc, #116]	@ (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e20:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e28:	d10b      	bne.n	8002e42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b80      	cmp	r3, #128	@ 0x80
 8002e2e:	d919      	bls.n	8002e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e34:	d902      	bls.n	8002e3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e36:	2302      	movs	r3, #2
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	e013      	b.n	8002e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	e010      	b.n	8002e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b80      	cmp	r3, #128	@ 0x80
 8002e46:	d902      	bls.n	8002e4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e48:	2303      	movs	r3, #3
 8002e4a:	613b      	str	r3, [r7, #16]
 8002e4c:	e00a      	b.n	8002e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b80      	cmp	r3, #128	@ 0x80
 8002e52:	d102      	bne.n	8002e5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e54:	2302      	movs	r3, #2
 8002e56:	613b      	str	r3, [r7, #16]
 8002e58:	e004      	b.n	8002e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b70      	cmp	r3, #112	@ 0x70
 8002e5e:	d101      	bne.n	8002e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e60:	2301      	movs	r3, #1
 8002e62:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e64:	4b0b      	ldr	r3, [pc, #44]	@ (8002e94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f023 0207 	bic.w	r2, r3, #7
 8002e6c:	4909      	ldr	r1, [pc, #36]	@ (8002e94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e74:	4b07      	ldr	r3, [pc, #28]	@ (8002e94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d001      	beq.n	8002e86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40021000 	.word	0x40021000
 8002e94:	40022000 	.word	0x40022000

08002e98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d031      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002ebc:	d01a      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002ebe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002ec2:	d814      	bhi.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d009      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ec8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ecc:	d10f      	bne.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002ece:	4b5d      	ldr	r3, [pc, #372]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	4a5c      	ldr	r2, [pc, #368]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ed4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ed8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002eda:	e00c      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3304      	adds	r3, #4
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 f9ce 	bl	8003284 <RCCEx_PLLSAI1_Config>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002eec:	e003      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	74fb      	strb	r3, [r7, #19]
      break;
 8002ef2:	e000      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002ef4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ef6:	7cfb      	ldrb	r3, [r7, #19]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10b      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002efc:	4b51      	ldr	r3, [pc, #324]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f02:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f0a:	494e      	ldr	r1, [pc, #312]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002f12:	e001      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f14:	7cfb      	ldrb	r3, [r7, #19]
 8002f16:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 809e 	beq.w	8003062 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f26:	2300      	movs	r3, #0
 8002f28:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f2a:	4b46      	ldr	r3, [pc, #280]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00d      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f40:	4b40      	ldr	r3, [pc, #256]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f44:	4a3f      	ldr	r2, [pc, #252]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f4c:	4b3d      	ldr	r3, [pc, #244]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f5c:	4b3a      	ldr	r3, [pc, #232]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a39      	ldr	r2, [pc, #228]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002f62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f68:	f7fe fe86 	bl	8001c78 <HAL_GetTick>
 8002f6c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f6e:	e009      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f70:	f7fe fe82 	bl	8001c78 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d902      	bls.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	74fb      	strb	r3, [r7, #19]
        break;
 8002f82:	e005      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f84:	4b30      	ldr	r3, [pc, #192]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0ef      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002f90:	7cfb      	ldrb	r3, [r7, #19]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d15a      	bne.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f96:	4b2b      	ldr	r3, [pc, #172]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fa0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d01e      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d019      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fb2:	4b24      	ldr	r3, [pc, #144]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fbc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fbe:	4b21      	ldr	r3, [pc, #132]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fc4:	4a1f      	ldr	r2, [pc, #124]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fce:	4b1d      	ldr	r3, [pc, #116]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fda:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002fde:	4a19      	ldr	r2, [pc, #100]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d016      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff0:	f7fe fe42 	bl	8001c78 <HAL_GetTick>
 8002ff4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ff6:	e00b      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff8:	f7fe fe3e 	bl	8001c78 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003006:	4293      	cmp	r3, r2
 8003008:	d902      	bls.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	74fb      	strb	r3, [r7, #19]
            break;
 800300e:	e006      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003010:	4b0c      	ldr	r3, [pc, #48]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0ec      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800301e:	7cfb      	ldrb	r3, [r7, #19]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10b      	bne.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003024:	4b07      	ldr	r3, [pc, #28]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800302a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003032:	4904      	ldr	r1, [pc, #16]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003034:	4313      	orrs	r3, r2
 8003036:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800303a:	e009      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800303c:	7cfb      	ldrb	r3, [r7, #19]
 800303e:	74bb      	strb	r3, [r7, #18]
 8003040:	e006      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003042:	bf00      	nop
 8003044:	40021000 	.word	0x40021000
 8003048:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800304c:	7cfb      	ldrb	r3, [r7, #19]
 800304e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003050:	7c7b      	ldrb	r3, [r7, #17]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d105      	bne.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003056:	4b8a      	ldr	r3, [pc, #552]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800305a:	4a89      	ldr	r2, [pc, #548]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800305c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003060:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800306e:	4b84      	ldr	r3, [pc, #528]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003070:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003074:	f023 0203 	bic.w	r2, r3, #3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	4980      	ldr	r1, [pc, #512]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00a      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003090:	4b7b      	ldr	r3, [pc, #492]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003096:	f023 020c 	bic.w	r2, r3, #12
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309e:	4978      	ldr	r1, [pc, #480]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0320 	and.w	r3, r3, #32
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00a      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030b2:	4b73      	ldr	r3, [pc, #460]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c0:	496f      	ldr	r1, [pc, #444]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030d4:	4b6a      	ldr	r3, [pc, #424]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030da:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030e2:	4967      	ldr	r1, [pc, #412]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00a      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030f6:	4b62      	ldr	r3, [pc, #392]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030fc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003104:	495e      	ldr	r1, [pc, #376]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00a      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003118:	4b59      	ldr	r3, [pc, #356]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800311a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800311e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003126:	4956      	ldr	r1, [pc, #344]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003128:	4313      	orrs	r3, r2
 800312a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800313a:	4b51      	ldr	r3, [pc, #324]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800313c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003140:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003148:	494d      	ldr	r1, [pc, #308]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d028      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800315c:	4b48      	ldr	r3, [pc, #288]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800315e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003162:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316a:	4945      	ldr	r1, [pc, #276]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800316c:	4313      	orrs	r3, r2
 800316e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003176:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800317a:	d106      	bne.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800317c:	4b40      	ldr	r3, [pc, #256]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	4a3f      	ldr	r2, [pc, #252]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003182:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003186:	60d3      	str	r3, [r2, #12]
 8003188:	e011      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003192:	d10c      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3304      	adds	r3, #4
 8003198:	2101      	movs	r1, #1
 800319a:	4618      	mov	r0, r3
 800319c:	f000 f872 	bl	8003284 <RCCEx_PLLSAI1_Config>
 80031a0:	4603      	mov	r3, r0
 80031a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80031a4:	7cfb      	ldrb	r3, [r7, #19]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80031aa:	7cfb      	ldrb	r3, [r7, #19]
 80031ac:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d028      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031ba:	4b31      	ldr	r3, [pc, #196]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031c0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c8:	492d      	ldr	r1, [pc, #180]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031d8:	d106      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031da:	4b29      	ldr	r3, [pc, #164]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	4a28      	ldr	r2, [pc, #160]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031e4:	60d3      	str	r3, [r2, #12]
 80031e6:	e011      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80031f0:	d10c      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3304      	adds	r3, #4
 80031f6:	2101      	movs	r1, #1
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 f843 	bl	8003284 <RCCEx_PLLSAI1_Config>
 80031fe:	4603      	mov	r3, r0
 8003200:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003202:	7cfb      	ldrb	r3, [r7, #19]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003208:	7cfb      	ldrb	r3, [r7, #19]
 800320a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d01c      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003218:	4b19      	ldr	r3, [pc, #100]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800321a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800321e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003226:	4916      	ldr	r1, [pc, #88]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003228:	4313      	orrs	r3, r2
 800322a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003232:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003236:	d10c      	bne.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3304      	adds	r3, #4
 800323c:	2102      	movs	r1, #2
 800323e:	4618      	mov	r0, r3
 8003240:	f000 f820 	bl	8003284 <RCCEx_PLLSAI1_Config>
 8003244:	4603      	mov	r3, r0
 8003246:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003248:	7cfb      	ldrb	r3, [r7, #19]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800324e:	7cfb      	ldrb	r3, [r7, #19]
 8003250:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00a      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800325e:	4b08      	ldr	r3, [pc, #32]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003264:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800326c:	4904      	ldr	r1, [pc, #16]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800326e:	4313      	orrs	r3, r2
 8003270:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003274:	7cbb      	ldrb	r3, [r7, #18]
}
 8003276:	4618      	mov	r0, r3
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40021000 	.word	0x40021000

08003284 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800328e:	2300      	movs	r3, #0
 8003290:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003292:	4b74      	ldr	r3, [pc, #464]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d018      	beq.n	80032d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800329e:	4b71      	ldr	r3, [pc, #452]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	f003 0203 	and.w	r2, r3, #3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d10d      	bne.n	80032ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
       ||
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d009      	beq.n	80032ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80032b6:	4b6b      	ldr	r3, [pc, #428]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	091b      	lsrs	r3, r3, #4
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
       ||
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d047      	beq.n	800335a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	73fb      	strb	r3, [r7, #15]
 80032ce:	e044      	b.n	800335a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b03      	cmp	r3, #3
 80032d6:	d018      	beq.n	800330a <RCCEx_PLLSAI1_Config+0x86>
 80032d8:	2b03      	cmp	r3, #3
 80032da:	d825      	bhi.n	8003328 <RCCEx_PLLSAI1_Config+0xa4>
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d002      	beq.n	80032e6 <RCCEx_PLLSAI1_Config+0x62>
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d009      	beq.n	80032f8 <RCCEx_PLLSAI1_Config+0x74>
 80032e4:	e020      	b.n	8003328 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032e6:	4b5f      	ldr	r3, [pc, #380]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d11d      	bne.n	800332e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032f6:	e01a      	b.n	800332e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032f8:	4b5a      	ldr	r3, [pc, #360]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003300:	2b00      	cmp	r3, #0
 8003302:	d116      	bne.n	8003332 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003308:	e013      	b.n	8003332 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800330a:	4b56      	ldr	r3, [pc, #344]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10f      	bne.n	8003336 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003316:	4b53      	ldr	r3, [pc, #332]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d109      	bne.n	8003336 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003326:	e006      	b.n	8003336 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	73fb      	strb	r3, [r7, #15]
      break;
 800332c:	e004      	b.n	8003338 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800332e:	bf00      	nop
 8003330:	e002      	b.n	8003338 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003332:	bf00      	nop
 8003334:	e000      	b.n	8003338 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003336:	bf00      	nop
    }

    if(status == HAL_OK)
 8003338:	7bfb      	ldrb	r3, [r7, #15]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10d      	bne.n	800335a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800333e:	4b49      	ldr	r3, [pc, #292]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6819      	ldr	r1, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	3b01      	subs	r3, #1
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	430b      	orrs	r3, r1
 8003354:	4943      	ldr	r1, [pc, #268]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003356:	4313      	orrs	r3, r2
 8003358:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800335a:	7bfb      	ldrb	r3, [r7, #15]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d17c      	bne.n	800345a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003360:	4b40      	ldr	r3, [pc, #256]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a3f      	ldr	r2, [pc, #252]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003366:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800336a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800336c:	f7fe fc84 	bl	8001c78 <HAL_GetTick>
 8003370:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003372:	e009      	b.n	8003388 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003374:	f7fe fc80 	bl	8001c78 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d902      	bls.n	8003388 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	73fb      	strb	r3, [r7, #15]
        break;
 8003386:	e005      	b.n	8003394 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003388:	4b36      	ldr	r3, [pc, #216]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1ef      	bne.n	8003374 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003394:	7bfb      	ldrb	r3, [r7, #15]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d15f      	bne.n	800345a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d110      	bne.n	80033c2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033a0:	4b30      	ldr	r3, [pc, #192]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80033a8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6892      	ldr	r2, [r2, #8]
 80033b0:	0211      	lsls	r1, r2, #8
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	68d2      	ldr	r2, [r2, #12]
 80033b6:	06d2      	lsls	r2, r2, #27
 80033b8:	430a      	orrs	r2, r1
 80033ba:	492a      	ldr	r1, [pc, #168]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	610b      	str	r3, [r1, #16]
 80033c0:	e027      	b.n	8003412 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d112      	bne.n	80033ee <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033c8:	4b26      	ldr	r3, [pc, #152]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80033d0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6892      	ldr	r2, [r2, #8]
 80033d8:	0211      	lsls	r1, r2, #8
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6912      	ldr	r2, [r2, #16]
 80033de:	0852      	lsrs	r2, r2, #1
 80033e0:	3a01      	subs	r2, #1
 80033e2:	0552      	lsls	r2, r2, #21
 80033e4:	430a      	orrs	r2, r1
 80033e6:	491f      	ldr	r1, [pc, #124]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	610b      	str	r3, [r1, #16]
 80033ec:	e011      	b.n	8003412 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80033f6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6892      	ldr	r2, [r2, #8]
 80033fe:	0211      	lsls	r1, r2, #8
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6952      	ldr	r2, [r2, #20]
 8003404:	0852      	lsrs	r2, r2, #1
 8003406:	3a01      	subs	r2, #1
 8003408:	0652      	lsls	r2, r2, #25
 800340a:	430a      	orrs	r2, r1
 800340c:	4915      	ldr	r1, [pc, #84]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 800340e:	4313      	orrs	r3, r2
 8003410:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003412:	4b14      	ldr	r3, [pc, #80]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a13      	ldr	r2, [pc, #76]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003418:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800341c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800341e:	f7fe fc2b 	bl	8001c78 <HAL_GetTick>
 8003422:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003424:	e009      	b.n	800343a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003426:	f7fe fc27 	bl	8001c78 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d902      	bls.n	800343a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	73fb      	strb	r3, [r7, #15]
          break;
 8003438:	e005      	b.n	8003446 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800343a:	4b0a      	ldr	r3, [pc, #40]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0ef      	beq.n	8003426 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003446:	7bfb      	ldrb	r3, [r7, #15]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d106      	bne.n	800345a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800344c:	4b05      	ldr	r3, [pc, #20]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 800344e:	691a      	ldr	r2, [r3, #16]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	4903      	ldr	r1, [pc, #12]	@ (8003464 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003456:	4313      	orrs	r3, r2
 8003458:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800345a:	7bfb      	ldrb	r3, [r7, #15]
}
 800345c:	4618      	mov	r0, r3
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40021000 	.word	0x40021000

08003468 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e095      	b.n	80035a6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347e:	2b00      	cmp	r3, #0
 8003480:	d108      	bne.n	8003494 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800348a:	d009      	beq.n	80034a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	61da      	str	r2, [r3, #28]
 8003492:	e005      	b.n	80034a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d106      	bne.n	80034c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7fe fa12 	bl	80018e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034e0:	d902      	bls.n	80034e8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034e2:	2300      	movs	r3, #0
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	e002      	b.n	80034ee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80034e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034ec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80034f6:	d007      	beq.n	8003508 <HAL_SPI_Init+0xa0>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003500:	d002      	beq.n	8003508 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003518:	431a      	orrs	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	431a      	orrs	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003540:	431a      	orrs	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800354a:	ea42 0103 	orr.w	r1, r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003552:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	0c1b      	lsrs	r3, r3, #16
 8003564:	f003 0204 	and.w	r2, r3, #4
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356c:	f003 0310 	and.w	r3, r3, #16
 8003570:	431a      	orrs	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003576:	f003 0308 	and.w	r3, r3, #8
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003584:	ea42 0103 	orr.w	r1, r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b088      	sub	sp, #32
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	60f8      	str	r0, [r7, #12]
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	603b      	str	r3, [r7, #0]
 80035ba:	4613      	mov	r3, r2
 80035bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035be:	2300      	movs	r3, #0
 80035c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d101      	bne.n	80035d0 <HAL_SPI_Transmit+0x22>
 80035cc:	2302      	movs	r3, #2
 80035ce:	e15f      	b.n	8003890 <HAL_SPI_Transmit+0x2e2>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035d8:	f7fe fb4e 	bl	8001c78 <HAL_GetTick>
 80035dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80035de:	88fb      	ldrh	r3, [r7, #6]
 80035e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d002      	beq.n	80035f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80035ee:	2302      	movs	r3, #2
 80035f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035f2:	e148      	b.n	8003886 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d002      	beq.n	8003600 <HAL_SPI_Transmit+0x52>
 80035fa:	88fb      	ldrh	r3, [r7, #6]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d102      	bne.n	8003606 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003604:	e13f      	b.n	8003886 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2203      	movs	r2, #3
 800360a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	88fa      	ldrh	r2, [r7, #6]
 800361e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	88fa      	ldrh	r2, [r7, #6]
 8003624:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003650:	d10f      	bne.n	8003672 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003660:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003670:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800367c:	2b40      	cmp	r3, #64	@ 0x40
 800367e:	d007      	beq.n	8003690 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800368e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003698:	d94f      	bls.n	800373a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d002      	beq.n	80036a8 <HAL_SPI_Transmit+0xfa>
 80036a2:	8afb      	ldrh	r3, [r7, #22]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d142      	bne.n	800372e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ac:	881a      	ldrh	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b8:	1c9a      	adds	r2, r3, #2
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	3b01      	subs	r3, #1
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036cc:	e02f      	b.n	800372e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d112      	bne.n	8003702 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e0:	881a      	ldrh	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ec:	1c9a      	adds	r2, r3, #2
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003700:	e015      	b.n	800372e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003702:	f7fe fab9 	bl	8001c78 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	429a      	cmp	r2, r3
 8003710:	d803      	bhi.n	800371a <HAL_SPI_Transmit+0x16c>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003718:	d102      	bne.n	8003720 <HAL_SPI_Transmit+0x172>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d106      	bne.n	800372e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800372c:	e0ab      	b.n	8003886 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003732:	b29b      	uxth	r3, r3
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1ca      	bne.n	80036ce <HAL_SPI_Transmit+0x120>
 8003738:	e080      	b.n	800383c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d002      	beq.n	8003748 <HAL_SPI_Transmit+0x19a>
 8003742:	8afb      	ldrh	r3, [r7, #22]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d174      	bne.n	8003832 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800374c:	b29b      	uxth	r3, r3
 800374e:	2b01      	cmp	r3, #1
 8003750:	d912      	bls.n	8003778 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003756:	881a      	ldrh	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003762:	1c9a      	adds	r2, r3, #2
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800376c:	b29b      	uxth	r3, r3
 800376e:	3b02      	subs	r3, #2
 8003770:	b29a      	uxth	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003776:	e05c      	b.n	8003832 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	330c      	adds	r3, #12
 8003782:	7812      	ldrb	r2, [r2, #0]
 8003784:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800378a:	1c5a      	adds	r2, r3, #1
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003794:	b29b      	uxth	r3, r3
 8003796:	3b01      	subs	r3, #1
 8003798:	b29a      	uxth	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800379e:	e048      	b.n	8003832 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d12b      	bne.n	8003806 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d912      	bls.n	80037de <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037bc:	881a      	ldrh	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c8:	1c9a      	adds	r2, r3, #2
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	3b02      	subs	r3, #2
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80037dc:	e029      	b.n	8003832 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	330c      	adds	r3, #12
 80037e8:	7812      	ldrb	r2, [r2, #0]
 80037ea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b29a      	uxth	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003804:	e015      	b.n	8003832 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003806:	f7fe fa37 	bl	8001c78 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	429a      	cmp	r2, r3
 8003814:	d803      	bhi.n	800381e <HAL_SPI_Transmit+0x270>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381c:	d102      	bne.n	8003824 <HAL_SPI_Transmit+0x276>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d106      	bne.n	8003832 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003830:	e029      	b.n	8003886 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003836:	b29b      	uxth	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1b1      	bne.n	80037a0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	6839      	ldr	r1, [r7, #0]
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 fcf9 	bl	8004238 <SPI_EndRxTxTransaction>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d002      	beq.n	8003852 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2220      	movs	r2, #32
 8003850:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10a      	bne.n	8003870 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800385a:	2300      	movs	r3, #0
 800385c:	613b      	str	r3, [r7, #16]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	613b      	str	r3, [r7, #16]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003874:	2b00      	cmp	r3, #0
 8003876:	d002      	beq.n	800387e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	77fb      	strb	r3, [r7, #31]
 800387c:	e003      	b.n	8003886 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800388e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3720      	adds	r7, #32
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b088      	sub	sp, #32
 800389c:	af02      	add	r7, sp, #8
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	603b      	str	r3, [r7, #0]
 80038a4:	4613      	mov	r3, r2
 80038a6:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038a8:	2300      	movs	r3, #0
 80038aa:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d002      	beq.n	80038be <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80038b8:	2302      	movs	r3, #2
 80038ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80038bc:	e11a      	b.n	8003af4 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038c6:	d112      	bne.n	80038ee <HAL_SPI_Receive+0x56>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10e      	bne.n	80038ee <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2204      	movs	r2, #4
 80038d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80038d8:	88fa      	ldrh	r2, [r7, #6]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	4613      	mov	r3, r2
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	68b9      	ldr	r1, [r7, #8]
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 f90e 	bl	8003b06 <HAL_SPI_TransmitReceive>
 80038ea:	4603      	mov	r3, r0
 80038ec:	e107      	b.n	8003afe <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_SPI_Receive+0x64>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e100      	b.n	8003afe <HAL_SPI_Receive+0x266>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003904:	f7fe f9b8 	bl	8001c78 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d002      	beq.n	8003916 <HAL_SPI_Receive+0x7e>
 8003910:	88fb      	ldrh	r3, [r7, #6]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d102      	bne.n	800391c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	75fb      	strb	r3, [r7, #23]
    goto error;
 800391a:	e0eb      	b.n	8003af4 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2204      	movs	r2, #4
 8003920:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	88fa      	ldrh	r2, [r7, #6]
 8003934:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	88fa      	ldrh	r2, [r7, #6]
 800393c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003966:	d908      	bls.n	800397a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003976:	605a      	str	r2, [r3, #4]
 8003978:	e007      	b.n	800398a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003988:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003992:	d10f      	bne.n	80039b4 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80039b2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039be:	2b40      	cmp	r3, #64	@ 0x40
 80039c0:	d007      	beq.n	80039d2 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039d0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80039da:	d86f      	bhi.n	8003abc <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80039dc:	e034      	b.n	8003a48 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d117      	bne.n	8003a1c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f103 020c 	add.w	r2, r3, #12
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f8:	7812      	ldrb	r2, [r2, #0]
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003a1a:	e015      	b.n	8003a48 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a1c:	f7fe f92c 	bl	8001c78 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d803      	bhi.n	8003a34 <HAL_SPI_Receive+0x19c>
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a32:	d102      	bne.n	8003a3a <HAL_SPI_Receive+0x1a2>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d106      	bne.n	8003a48 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003a46:	e055      	b.n	8003af4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1c4      	bne.n	80039de <HAL_SPI_Receive+0x146>
 8003a54:	e038      	b.n	8003ac8 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d115      	bne.n	8003a90 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68da      	ldr	r2, [r3, #12]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6e:	b292      	uxth	r2, r2
 8003a70:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a76:	1c9a      	adds	r2, r3, #2
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003a8e:	e015      	b.n	8003abc <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a90:	f7fe f8f2 	bl	8001c78 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d803      	bhi.n	8003aa8 <HAL_SPI_Receive+0x210>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa6:	d102      	bne.n	8003aae <HAL_SPI_Receive+0x216>
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d106      	bne.n	8003abc <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003aba:	e01b      	b.n	8003af4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1c6      	bne.n	8003a56 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	6839      	ldr	r1, [r7, #0]
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 fb5b 	bl	8004188 <SPI_EndRxTransaction>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d002      	beq.n	8003ade <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2220      	movs	r2, #32
 8003adc:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d002      	beq.n	8003aec <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	75fb      	strb	r3, [r7, #23]
 8003aea:	e003      	b.n	8003af4 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3718      	adds	r7, #24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b08a      	sub	sp, #40	@ 0x28
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	60f8      	str	r0, [r7, #12]
 8003b0e:	60b9      	str	r1, [r7, #8]
 8003b10:	607a      	str	r2, [r7, #4]
 8003b12:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b14:	2301      	movs	r3, #1
 8003b16:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <HAL_SPI_TransmitReceive+0x26>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	e20a      	b.n	8003f42 <HAL_SPI_TransmitReceive+0x43c>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b34:	f7fe f8a0 	bl	8001c78 <HAL_GetTick>
 8003b38:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003b40:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003b48:	887b      	ldrh	r3, [r7, #2]
 8003b4a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003b4c:	887b      	ldrh	r3, [r7, #2]
 8003b4e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b50:	7efb      	ldrb	r3, [r7, #27]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d00e      	beq.n	8003b74 <HAL_SPI_TransmitReceive+0x6e>
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b5c:	d106      	bne.n	8003b6c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d102      	bne.n	8003b6c <HAL_SPI_TransmitReceive+0x66>
 8003b66:	7efb      	ldrb	r3, [r7, #27]
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d003      	beq.n	8003b74 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003b72:	e1e0      	b.n	8003f36 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d005      	beq.n	8003b86 <HAL_SPI_TransmitReceive+0x80>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <HAL_SPI_TransmitReceive+0x80>
 8003b80:	887b      	ldrh	r3, [r7, #2]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d103      	bne.n	8003b8e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003b8c:	e1d3      	b.n	8003f36 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d003      	beq.n	8003ba2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2205      	movs	r2, #5
 8003b9e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	887a      	ldrh	r2, [r7, #2]
 8003bb2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	887a      	ldrh	r2, [r7, #2]
 8003bba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	887a      	ldrh	r2, [r7, #2]
 8003bc8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	887a      	ldrh	r2, [r7, #2]
 8003bce:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003be4:	d802      	bhi.n	8003bec <HAL_SPI_TransmitReceive+0xe6>
 8003be6:	8a3b      	ldrh	r3, [r7, #16]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d908      	bls.n	8003bfe <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003bfa:	605a      	str	r2, [r3, #4]
 8003bfc:	e007      	b.n	8003c0e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003c0c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c18:	2b40      	cmp	r3, #64	@ 0x40
 8003c1a:	d007      	beq.n	8003c2c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c34:	f240 8081 	bls.w	8003d3a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d002      	beq.n	8003c46 <HAL_SPI_TransmitReceive+0x140>
 8003c40:	8a7b      	ldrh	r3, [r7, #18]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d16d      	bne.n	8003d22 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c4a:	881a      	ldrh	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c56:	1c9a      	adds	r2, r3, #2
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	3b01      	subs	r3, #1
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c6a:	e05a      	b.n	8003d22 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d11b      	bne.n	8003cb2 <HAL_SPI_TransmitReceive+0x1ac>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d016      	beq.n	8003cb2 <HAL_SPI_TransmitReceive+0x1ac>
 8003c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d113      	bne.n	8003cb2 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c8e:	881a      	ldrh	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c9a:	1c9a      	adds	r2, r3, #2
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d11c      	bne.n	8003cfa <HAL_SPI_TransmitReceive+0x1f4>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d016      	beq.n	8003cfa <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd6:	b292      	uxth	r2, r2
 8003cd8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cde:	1c9a      	adds	r2, r3, #2
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	3b01      	subs	r3, #1
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003cfa:	f7fd ffbd 	bl	8001c78 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d80b      	bhi.n	8003d22 <HAL_SPI_TransmitReceive+0x21c>
 8003d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d10:	d007      	beq.n	8003d22 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003d20:	e109      	b.n	8003f36 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d19f      	bne.n	8003c6c <HAL_SPI_TransmitReceive+0x166>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d199      	bne.n	8003c6c <HAL_SPI_TransmitReceive+0x166>
 8003d38:	e0e3      	b.n	8003f02 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <HAL_SPI_TransmitReceive+0x244>
 8003d42:	8a7b      	ldrh	r3, [r7, #18]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	f040 80cf 	bne.w	8003ee8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d912      	bls.n	8003d7a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d58:	881a      	ldrh	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d64:	1c9a      	adds	r2, r3, #2
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	3b02      	subs	r3, #2
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d78:	e0b6      	b.n	8003ee8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	330c      	adds	r3, #12
 8003d84:	7812      	ldrb	r2, [r2, #0]
 8003d86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003da0:	e0a2      	b.n	8003ee8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d134      	bne.n	8003e1a <HAL_SPI_TransmitReceive+0x314>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d02f      	beq.n	8003e1a <HAL_SPI_TransmitReceive+0x314>
 8003dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d12c      	bne.n	8003e1a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d912      	bls.n	8003df0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dce:	881a      	ldrh	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dda:	1c9a      	adds	r2, r3, #2
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	3b02      	subs	r3, #2
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003dee:	e012      	b.n	8003e16 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	330c      	adds	r3, #12
 8003dfa:	7812      	ldrb	r2, [r2, #0]
 8003dfc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e02:	1c5a      	adds	r2, r3, #1
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d148      	bne.n	8003eba <HAL_SPI_TransmitReceive+0x3b4>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d042      	beq.n	8003eba <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d923      	bls.n	8003e88 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68da      	ldr	r2, [r3, #12]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4a:	b292      	uxth	r2, r2
 8003e4c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e52:	1c9a      	adds	r2, r3, #2
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	3b02      	subs	r3, #2
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d81f      	bhi.n	8003eb6 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003e84:	605a      	str	r2, [r3, #4]
 8003e86:	e016      	b.n	8003eb6 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f103 020c 	add.w	r2, r3, #12
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e94:	7812      	ldrb	r2, [r2, #0]
 8003e96:	b2d2      	uxtb	r2, r2
 8003e98:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9e:	1c5a      	adds	r2, r3, #1
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003eba:	f7fd fedd 	bl	8001c78 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d803      	bhi.n	8003ed2 <HAL_SPI_TransmitReceive+0x3cc>
 8003eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed0:	d102      	bne.n	8003ed8 <HAL_SPI_TransmitReceive+0x3d2>
 8003ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d107      	bne.n	8003ee8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003ee6:	e026      	b.n	8003f36 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f47f af57 	bne.w	8003da2 <HAL_SPI_TransmitReceive+0x29c>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f47f af50 	bne.w	8003da2 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f02:	69fa      	ldr	r2, [r7, #28]
 8003f04:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 f996 	bl	8004238 <SPI_EndRxTxTransaction>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d005      	beq.n	8003f1e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f2c:	e003      	b.n	8003f36 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003f3e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3728      	adds	r7, #40	@ 0x28
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
	...

08003f4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b088      	sub	sp, #32
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	603b      	str	r3, [r7, #0]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f5c:	f7fd fe8c 	bl	8001c78 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f64:	1a9b      	subs	r3, r3, r2
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	4413      	add	r3, r2
 8003f6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f6c:	f7fd fe84 	bl	8001c78 <HAL_GetTick>
 8003f70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f72:	4b39      	ldr	r3, [pc, #228]	@ (8004058 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	015b      	lsls	r3, r3, #5
 8003f78:	0d1b      	lsrs	r3, r3, #20
 8003f7a:	69fa      	ldr	r2, [r7, #28]
 8003f7c:	fb02 f303 	mul.w	r3, r2, r3
 8003f80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f82:	e054      	b.n	800402e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8a:	d050      	beq.n	800402e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f8c:	f7fd fe74 	bl	8001c78 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	69fa      	ldr	r2, [r7, #28]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d902      	bls.n	8003fa2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d13d      	bne.n	800401e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003fb0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fba:	d111      	bne.n	8003fe0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fc4:	d004      	beq.n	8003fd0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fce:	d107      	bne.n	8003fe0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fe8:	d10f      	bne.n	800400a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ff8:	601a      	str	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004008:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e017      	b.n	800404e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d101      	bne.n	8004028 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	3b01      	subs	r3, #1
 800402c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	4013      	ands	r3, r2
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	429a      	cmp	r2, r3
 800403c:	bf0c      	ite	eq
 800403e:	2301      	moveq	r3, #1
 8004040:	2300      	movne	r3, #0
 8004042:	b2db      	uxtb	r3, r3
 8004044:	461a      	mov	r2, r3
 8004046:	79fb      	ldrb	r3, [r7, #7]
 8004048:	429a      	cmp	r2, r3
 800404a:	d19b      	bne.n	8003f84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3720      	adds	r7, #32
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	20000050 	.word	0x20000050

0800405c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b08a      	sub	sp, #40	@ 0x28
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
 8004068:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800406a:	2300      	movs	r3, #0
 800406c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800406e:	f7fd fe03 	bl	8001c78 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004076:	1a9b      	subs	r3, r3, r2
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	4413      	add	r3, r2
 800407c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800407e:	f7fd fdfb 	bl	8001c78 <HAL_GetTick>
 8004082:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	330c      	adds	r3, #12
 800408a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800408c:	4b3d      	ldr	r3, [pc, #244]	@ (8004184 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	4613      	mov	r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	00da      	lsls	r2, r3, #3
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	0d1b      	lsrs	r3, r3, #20
 800409c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800409e:	fb02 f303 	mul.w	r3, r2, r3
 80040a2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80040a4:	e060      	b.n	8004168 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80040ac:	d107      	bne.n	80040be <SPI_WaitFifoStateUntilTimeout+0x62>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d104      	bne.n	80040be <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80040bc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c4:	d050      	beq.n	8004168 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040c6:	f7fd fdd7 	bl	8001c78 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	6a3b      	ldr	r3, [r7, #32]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d902      	bls.n	80040dc <SPI_WaitFifoStateUntilTimeout+0x80>
 80040d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d13d      	bne.n	8004158 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80040ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040f4:	d111      	bne.n	800411a <SPI_WaitFifoStateUntilTimeout+0xbe>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040fe:	d004      	beq.n	800410a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004108:	d107      	bne.n	800411a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004118:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800411e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004122:	d10f      	bne.n	8004144 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004142:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e010      	b.n	800417a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800415e:	2300      	movs	r3, #0
 8004160:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	3b01      	subs	r3, #1
 8004166:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	689a      	ldr	r2, [r3, #8]
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	4013      	ands	r3, r2
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	429a      	cmp	r2, r3
 8004176:	d196      	bne.n	80040a6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3728      	adds	r7, #40	@ 0x28
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	20000050 	.word	0x20000050

08004188 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af02      	add	r7, sp, #8
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800419c:	d111      	bne.n	80041c2 <SPI_EndRxTransaction+0x3a>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041a6:	d004      	beq.n	80041b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041b0:	d107      	bne.n	80041c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041c0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2200      	movs	r2, #0
 80041ca:	2180      	movs	r1, #128	@ 0x80
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f7ff febd 	bl	8003f4c <SPI_WaitFlagStateUntilTimeout>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d007      	beq.n	80041e8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041dc:	f043 0220 	orr.w	r2, r3, #32
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e023      	b.n	8004230 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041f0:	d11d      	bne.n	800422e <SPI_EndRxTransaction+0xa6>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041fa:	d004      	beq.n	8004206 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004204:	d113      	bne.n	800422e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	2200      	movs	r2, #0
 800420e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f7ff ff22 	bl	800405c <SPI_WaitFifoStateUntilTimeout>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d007      	beq.n	800422e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004222:	f043 0220 	orr.w	r2, r3, #32
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e000      	b.n	8004230 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af02      	add	r7, sp, #8
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	2200      	movs	r2, #0
 800424c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f7ff ff03 	bl	800405c <SPI_WaitFifoStateUntilTimeout>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d007      	beq.n	800426c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004260:	f043 0220 	orr.w	r2, r3, #32
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e027      	b.n	80042bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2200      	movs	r2, #0
 8004274:	2180      	movs	r1, #128	@ 0x80
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f7ff fe68 	bl	8003f4c <SPI_WaitFlagStateUntilTimeout>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d007      	beq.n	8004292 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004286:	f043 0220 	orr.w	r2, r3, #32
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e014      	b.n	80042bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	2200      	movs	r2, #0
 800429a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f7ff fedc 	bl	800405c <SPI_WaitFifoStateUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d007      	beq.n	80042ba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042ae:	f043 0220 	orr.w	r2, r3, #32
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e000      	b.n	80042bc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e040      	b.n	8004358 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d106      	bne.n	80042ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7fd fb3e 	bl	8001968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2224      	movs	r2, #36	@ 0x24
 80042f0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 0201 	bic.w	r2, r2, #1
 8004300:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004306:	2b00      	cmp	r3, #0
 8004308:	d002      	beq.n	8004310 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 fade 	bl	80048cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 f8af 	bl	8004474 <UART_SetConfig>
 8004316:	4603      	mov	r3, r0
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e01b      	b.n	8004358 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800432e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689a      	ldr	r2, [r3, #8]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800433e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0201 	orr.w	r2, r2, #1
 800434e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 fb5d 	bl	8004a10 <UART_CheckIdleState>
 8004356:	4603      	mov	r3, r0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3708      	adds	r7, #8
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b08a      	sub	sp, #40	@ 0x28
 8004364:	af02      	add	r7, sp, #8
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	603b      	str	r3, [r7, #0]
 800436c:	4613      	mov	r3, r2
 800436e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004374:	2b20      	cmp	r3, #32
 8004376:	d177      	bne.n	8004468 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d002      	beq.n	8004384 <HAL_UART_Transmit+0x24>
 800437e:	88fb      	ldrh	r3, [r7, #6]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d101      	bne.n	8004388 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e070      	b.n	800446a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2221      	movs	r2, #33	@ 0x21
 8004394:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004396:	f7fd fc6f 	bl	8001c78 <HAL_GetTick>
 800439a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	88fa      	ldrh	r2, [r7, #6]
 80043a0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	88fa      	ldrh	r2, [r7, #6]
 80043a8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043b4:	d108      	bne.n	80043c8 <HAL_UART_Transmit+0x68>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d104      	bne.n	80043c8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80043be:	2300      	movs	r3, #0
 80043c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	61bb      	str	r3, [r7, #24]
 80043c6:	e003      	b.n	80043d0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043cc:	2300      	movs	r3, #0
 80043ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80043d0:	e02f      	b.n	8004432 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2200      	movs	r2, #0
 80043da:	2180      	movs	r1, #128	@ 0x80
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f000 fbbf 	bl	8004b60 <UART_WaitOnFlagUntilTimeout>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d004      	beq.n	80043f2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2220      	movs	r2, #32
 80043ec:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e03b      	b.n	800446a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10b      	bne.n	8004410 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	881a      	ldrh	r2, [r3, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004404:	b292      	uxth	r2, r2
 8004406:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	3302      	adds	r3, #2
 800440c:	61bb      	str	r3, [r7, #24]
 800440e:	e007      	b.n	8004420 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	781a      	ldrb	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	3301      	adds	r3, #1
 800441e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004426:	b29b      	uxth	r3, r3
 8004428:	3b01      	subs	r3, #1
 800442a:	b29a      	uxth	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004438:	b29b      	uxth	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1c9      	bne.n	80043d2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	2200      	movs	r2, #0
 8004446:	2140      	movs	r1, #64	@ 0x40
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 fb89 	bl	8004b60 <UART_WaitOnFlagUntilTimeout>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d004      	beq.n	800445e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2220      	movs	r2, #32
 8004458:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e005      	b.n	800446a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2220      	movs	r2, #32
 8004462:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004464:	2300      	movs	r3, #0
 8004466:	e000      	b.n	800446a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004468:	2302      	movs	r3, #2
  }
}
 800446a:	4618      	mov	r0, r3
 800446c:	3720      	adds	r7, #32
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
	...

08004474 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004478:	b08a      	sub	sp, #40	@ 0x28
 800447a:	af00      	add	r7, sp, #0
 800447c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800447e:	2300      	movs	r3, #0
 8004480:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	431a      	orrs	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	431a      	orrs	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	4313      	orrs	r3, r2
 800449a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	4bb4      	ldr	r3, [pc, #720]	@ (8004774 <UART_SetConfig+0x300>)
 80044a4:	4013      	ands	r3, r2
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	6812      	ldr	r2, [r2, #0]
 80044aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044ac:	430b      	orrs	r3, r1
 80044ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	68da      	ldr	r2, [r3, #12]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4aa9      	ldr	r2, [pc, #676]	@ (8004778 <UART_SetConfig+0x304>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d004      	beq.n	80044e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044dc:	4313      	orrs	r3, r2
 80044de:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044f0:	430a      	orrs	r2, r1
 80044f2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4aa0      	ldr	r2, [pc, #640]	@ (800477c <UART_SetConfig+0x308>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d126      	bne.n	800454c <UART_SetConfig+0xd8>
 80044fe:	4ba0      	ldr	r3, [pc, #640]	@ (8004780 <UART_SetConfig+0x30c>)
 8004500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004504:	f003 0303 	and.w	r3, r3, #3
 8004508:	2b03      	cmp	r3, #3
 800450a:	d81b      	bhi.n	8004544 <UART_SetConfig+0xd0>
 800450c:	a201      	add	r2, pc, #4	@ (adr r2, 8004514 <UART_SetConfig+0xa0>)
 800450e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004512:	bf00      	nop
 8004514:	08004525 	.word	0x08004525
 8004518:	08004535 	.word	0x08004535
 800451c:	0800452d 	.word	0x0800452d
 8004520:	0800453d 	.word	0x0800453d
 8004524:	2301      	movs	r3, #1
 8004526:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800452a:	e080      	b.n	800462e <UART_SetConfig+0x1ba>
 800452c:	2302      	movs	r3, #2
 800452e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004532:	e07c      	b.n	800462e <UART_SetConfig+0x1ba>
 8004534:	2304      	movs	r3, #4
 8004536:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800453a:	e078      	b.n	800462e <UART_SetConfig+0x1ba>
 800453c:	2308      	movs	r3, #8
 800453e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004542:	e074      	b.n	800462e <UART_SetConfig+0x1ba>
 8004544:	2310      	movs	r3, #16
 8004546:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800454a:	e070      	b.n	800462e <UART_SetConfig+0x1ba>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a8c      	ldr	r2, [pc, #560]	@ (8004784 <UART_SetConfig+0x310>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d138      	bne.n	80045c8 <UART_SetConfig+0x154>
 8004556:	4b8a      	ldr	r3, [pc, #552]	@ (8004780 <UART_SetConfig+0x30c>)
 8004558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800455c:	f003 030c 	and.w	r3, r3, #12
 8004560:	2b0c      	cmp	r3, #12
 8004562:	d82d      	bhi.n	80045c0 <UART_SetConfig+0x14c>
 8004564:	a201      	add	r2, pc, #4	@ (adr r2, 800456c <UART_SetConfig+0xf8>)
 8004566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456a:	bf00      	nop
 800456c:	080045a1 	.word	0x080045a1
 8004570:	080045c1 	.word	0x080045c1
 8004574:	080045c1 	.word	0x080045c1
 8004578:	080045c1 	.word	0x080045c1
 800457c:	080045b1 	.word	0x080045b1
 8004580:	080045c1 	.word	0x080045c1
 8004584:	080045c1 	.word	0x080045c1
 8004588:	080045c1 	.word	0x080045c1
 800458c:	080045a9 	.word	0x080045a9
 8004590:	080045c1 	.word	0x080045c1
 8004594:	080045c1 	.word	0x080045c1
 8004598:	080045c1 	.word	0x080045c1
 800459c:	080045b9 	.word	0x080045b9
 80045a0:	2300      	movs	r3, #0
 80045a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045a6:	e042      	b.n	800462e <UART_SetConfig+0x1ba>
 80045a8:	2302      	movs	r3, #2
 80045aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ae:	e03e      	b.n	800462e <UART_SetConfig+0x1ba>
 80045b0:	2304      	movs	r3, #4
 80045b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045b6:	e03a      	b.n	800462e <UART_SetConfig+0x1ba>
 80045b8:	2308      	movs	r3, #8
 80045ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045be:	e036      	b.n	800462e <UART_SetConfig+0x1ba>
 80045c0:	2310      	movs	r3, #16
 80045c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045c6:	e032      	b.n	800462e <UART_SetConfig+0x1ba>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a6a      	ldr	r2, [pc, #424]	@ (8004778 <UART_SetConfig+0x304>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d12a      	bne.n	8004628 <UART_SetConfig+0x1b4>
 80045d2:	4b6b      	ldr	r3, [pc, #428]	@ (8004780 <UART_SetConfig+0x30c>)
 80045d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80045dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045e0:	d01a      	beq.n	8004618 <UART_SetConfig+0x1a4>
 80045e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045e6:	d81b      	bhi.n	8004620 <UART_SetConfig+0x1ac>
 80045e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045ec:	d00c      	beq.n	8004608 <UART_SetConfig+0x194>
 80045ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045f2:	d815      	bhi.n	8004620 <UART_SetConfig+0x1ac>
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d003      	beq.n	8004600 <UART_SetConfig+0x18c>
 80045f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045fc:	d008      	beq.n	8004610 <UART_SetConfig+0x19c>
 80045fe:	e00f      	b.n	8004620 <UART_SetConfig+0x1ac>
 8004600:	2300      	movs	r3, #0
 8004602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004606:	e012      	b.n	800462e <UART_SetConfig+0x1ba>
 8004608:	2302      	movs	r3, #2
 800460a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800460e:	e00e      	b.n	800462e <UART_SetConfig+0x1ba>
 8004610:	2304      	movs	r3, #4
 8004612:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004616:	e00a      	b.n	800462e <UART_SetConfig+0x1ba>
 8004618:	2308      	movs	r3, #8
 800461a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800461e:	e006      	b.n	800462e <UART_SetConfig+0x1ba>
 8004620:	2310      	movs	r3, #16
 8004622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004626:	e002      	b.n	800462e <UART_SetConfig+0x1ba>
 8004628:	2310      	movs	r3, #16
 800462a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a51      	ldr	r2, [pc, #324]	@ (8004778 <UART_SetConfig+0x304>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d17a      	bne.n	800472e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004638:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800463c:	2b08      	cmp	r3, #8
 800463e:	d824      	bhi.n	800468a <UART_SetConfig+0x216>
 8004640:	a201      	add	r2, pc, #4	@ (adr r2, 8004648 <UART_SetConfig+0x1d4>)
 8004642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004646:	bf00      	nop
 8004648:	0800466d 	.word	0x0800466d
 800464c:	0800468b 	.word	0x0800468b
 8004650:	08004675 	.word	0x08004675
 8004654:	0800468b 	.word	0x0800468b
 8004658:	0800467b 	.word	0x0800467b
 800465c:	0800468b 	.word	0x0800468b
 8004660:	0800468b 	.word	0x0800468b
 8004664:	0800468b 	.word	0x0800468b
 8004668:	08004683 	.word	0x08004683
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800466c:	f7fe fb88 	bl	8002d80 <HAL_RCC_GetPCLK1Freq>
 8004670:	61f8      	str	r0, [r7, #28]
        break;
 8004672:	e010      	b.n	8004696 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004674:	4b44      	ldr	r3, [pc, #272]	@ (8004788 <UART_SetConfig+0x314>)
 8004676:	61fb      	str	r3, [r7, #28]
        break;
 8004678:	e00d      	b.n	8004696 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800467a:	f7fe fae9 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 800467e:	61f8      	str	r0, [r7, #28]
        break;
 8004680:	e009      	b.n	8004696 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004682:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004686:	61fb      	str	r3, [r7, #28]
        break;
 8004688:	e005      	b.n	8004696 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800468a:	2300      	movs	r3, #0
 800468c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004694:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 8107 	beq.w	80048ac <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	4613      	mov	r3, r2
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	4413      	add	r3, r2
 80046a8:	69fa      	ldr	r2, [r7, #28]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d305      	bcc.n	80046ba <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046b4:	69fa      	ldr	r2, [r7, #28]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d903      	bls.n	80046c2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80046c0:	e0f4      	b.n	80048ac <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	2200      	movs	r2, #0
 80046c6:	461c      	mov	r4, r3
 80046c8:	4615      	mov	r5, r2
 80046ca:	f04f 0200 	mov.w	r2, #0
 80046ce:	f04f 0300 	mov.w	r3, #0
 80046d2:	022b      	lsls	r3, r5, #8
 80046d4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80046d8:	0222      	lsls	r2, r4, #8
 80046da:	68f9      	ldr	r1, [r7, #12]
 80046dc:	6849      	ldr	r1, [r1, #4]
 80046de:	0849      	lsrs	r1, r1, #1
 80046e0:	2000      	movs	r0, #0
 80046e2:	4688      	mov	r8, r1
 80046e4:	4681      	mov	r9, r0
 80046e6:	eb12 0a08 	adds.w	sl, r2, r8
 80046ea:	eb43 0b09 	adc.w	fp, r3, r9
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	603b      	str	r3, [r7, #0]
 80046f6:	607a      	str	r2, [r7, #4]
 80046f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046fc:	4650      	mov	r0, sl
 80046fe:	4659      	mov	r1, fp
 8004700:	f7fb fdb6 	bl	8000270 <__aeabi_uldivmod>
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	4613      	mov	r3, r2
 800470a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004712:	d308      	bcc.n	8004726 <UART_SetConfig+0x2b2>
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800471a:	d204      	bcs.n	8004726 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	60da      	str	r2, [r3, #12]
 8004724:	e0c2      	b.n	80048ac <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800472c:	e0be      	b.n	80048ac <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004736:	d16a      	bne.n	800480e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004738:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800473c:	2b08      	cmp	r3, #8
 800473e:	d834      	bhi.n	80047aa <UART_SetConfig+0x336>
 8004740:	a201      	add	r2, pc, #4	@ (adr r2, 8004748 <UART_SetConfig+0x2d4>)
 8004742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004746:	bf00      	nop
 8004748:	0800476d 	.word	0x0800476d
 800474c:	0800478d 	.word	0x0800478d
 8004750:	08004795 	.word	0x08004795
 8004754:	080047ab 	.word	0x080047ab
 8004758:	0800479b 	.word	0x0800479b
 800475c:	080047ab 	.word	0x080047ab
 8004760:	080047ab 	.word	0x080047ab
 8004764:	080047ab 	.word	0x080047ab
 8004768:	080047a3 	.word	0x080047a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800476c:	f7fe fb08 	bl	8002d80 <HAL_RCC_GetPCLK1Freq>
 8004770:	61f8      	str	r0, [r7, #28]
        break;
 8004772:	e020      	b.n	80047b6 <UART_SetConfig+0x342>
 8004774:	efff69f3 	.word	0xefff69f3
 8004778:	40008000 	.word	0x40008000
 800477c:	40013800 	.word	0x40013800
 8004780:	40021000 	.word	0x40021000
 8004784:	40004400 	.word	0x40004400
 8004788:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800478c:	f7fe fb0e 	bl	8002dac <HAL_RCC_GetPCLK2Freq>
 8004790:	61f8      	str	r0, [r7, #28]
        break;
 8004792:	e010      	b.n	80047b6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004794:	4b4c      	ldr	r3, [pc, #304]	@ (80048c8 <UART_SetConfig+0x454>)
 8004796:	61fb      	str	r3, [r7, #28]
        break;
 8004798:	e00d      	b.n	80047b6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800479a:	f7fe fa59 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 800479e:	61f8      	str	r0, [r7, #28]
        break;
 80047a0:	e009      	b.n	80047b6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047a6:	61fb      	str	r3, [r7, #28]
        break;
 80047a8:	e005      	b.n	80047b6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80047aa:	2300      	movs	r3, #0
 80047ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80047b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d077      	beq.n	80048ac <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	005a      	lsls	r2, r3, #1
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	085b      	lsrs	r3, r3, #1
 80047c6:	441a      	add	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	2b0f      	cmp	r3, #15
 80047d6:	d916      	bls.n	8004806 <UART_SetConfig+0x392>
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047de:	d212      	bcs.n	8004806 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	f023 030f 	bic.w	r3, r3, #15
 80047e8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	085b      	lsrs	r3, r3, #1
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	f003 0307 	and.w	r3, r3, #7
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	8afb      	ldrh	r3, [r7, #22]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	8afa      	ldrh	r2, [r7, #22]
 8004802:	60da      	str	r2, [r3, #12]
 8004804:	e052      	b.n	80048ac <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800480c:	e04e      	b.n	80048ac <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800480e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004812:	2b08      	cmp	r3, #8
 8004814:	d827      	bhi.n	8004866 <UART_SetConfig+0x3f2>
 8004816:	a201      	add	r2, pc, #4	@ (adr r2, 800481c <UART_SetConfig+0x3a8>)
 8004818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481c:	08004841 	.word	0x08004841
 8004820:	08004849 	.word	0x08004849
 8004824:	08004851 	.word	0x08004851
 8004828:	08004867 	.word	0x08004867
 800482c:	08004857 	.word	0x08004857
 8004830:	08004867 	.word	0x08004867
 8004834:	08004867 	.word	0x08004867
 8004838:	08004867 	.word	0x08004867
 800483c:	0800485f 	.word	0x0800485f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004840:	f7fe fa9e 	bl	8002d80 <HAL_RCC_GetPCLK1Freq>
 8004844:	61f8      	str	r0, [r7, #28]
        break;
 8004846:	e014      	b.n	8004872 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004848:	f7fe fab0 	bl	8002dac <HAL_RCC_GetPCLK2Freq>
 800484c:	61f8      	str	r0, [r7, #28]
        break;
 800484e:	e010      	b.n	8004872 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004850:	4b1d      	ldr	r3, [pc, #116]	@ (80048c8 <UART_SetConfig+0x454>)
 8004852:	61fb      	str	r3, [r7, #28]
        break;
 8004854:	e00d      	b.n	8004872 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004856:	f7fe f9fb 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 800485a:	61f8      	str	r0, [r7, #28]
        break;
 800485c:	e009      	b.n	8004872 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800485e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004862:	61fb      	str	r3, [r7, #28]
        break;
 8004864:	e005      	b.n	8004872 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004866:	2300      	movs	r3, #0
 8004868:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004870:	bf00      	nop
    }

    if (pclk != 0U)
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d019      	beq.n	80048ac <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	085a      	lsrs	r2, r3, #1
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	441a      	add	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	fbb2 f3f3 	udiv	r3, r2, r3
 800488a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	2b0f      	cmp	r3, #15
 8004890:	d909      	bls.n	80048a6 <UART_SetConfig+0x432>
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004898:	d205      	bcs.n	80048a6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	b29a      	uxth	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	60da      	str	r2, [r3, #12]
 80048a4:	e002      	b.n	80048ac <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80048b8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3728      	adds	r7, #40	@ 0x28
 80048c0:	46bd      	mov	sp, r7
 80048c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048c6:	bf00      	nop
 80048c8:	00f42400 	.word	0x00f42400

080048cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d8:	f003 0308 	and.w	r3, r3, #8
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00a      	beq.n	80048f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00a      	beq.n	8004918 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00a      	beq.n	800493a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	430a      	orrs	r2, r1
 8004938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493e:	f003 0304 	and.w	r3, r3, #4
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00a      	beq.n	800495c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004960:	f003 0310 	and.w	r3, r3, #16
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00a      	beq.n	800497e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004982:	f003 0320 	and.w	r3, r3, #32
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00a      	beq.n	80049a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	430a      	orrs	r2, r1
 800499e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d01a      	beq.n	80049e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	430a      	orrs	r2, r1
 80049c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049ca:	d10a      	bne.n	80049e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00a      	beq.n	8004a04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	605a      	str	r2, [r3, #4]
  }
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b098      	sub	sp, #96	@ 0x60
 8004a14:	af02      	add	r7, sp, #8
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a20:	f7fd f92a 	bl	8001c78 <HAL_GetTick>
 8004a24:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0308 	and.w	r3, r3, #8
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d12e      	bne.n	8004a92 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f88c 	bl	8004b60 <UART_WaitOnFlagUntilTimeout>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d021      	beq.n	8004a92 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a56:	e853 3f00 	ldrex	r3, [r3]
 8004a5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a62:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a6e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a74:	e841 2300 	strex	r3, r2, [r1]
 8004a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1e6      	bne.n	8004a4e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2220      	movs	r2, #32
 8004a84:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e062      	b.n	8004b58 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0304 	and.w	r3, r3, #4
 8004a9c:	2b04      	cmp	r3, #4
 8004a9e:	d149      	bne.n	8004b34 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004aa0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f856 	bl	8004b60 <UART_WaitOnFlagUntilTimeout>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d03c      	beq.n	8004b34 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac2:	e853 3f00 	ldrex	r3, [r3]
 8004ac6:	623b      	str	r3, [r7, #32]
   return(result);
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ad8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ada:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004adc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ade:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ae0:	e841 2300 	strex	r3, r2, [r1]
 8004ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1e6      	bne.n	8004aba <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	3308      	adds	r3, #8
 8004af2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	e853 3f00 	ldrex	r3, [r3]
 8004afa:	60fb      	str	r3, [r7, #12]
   return(result);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 0301 	bic.w	r3, r3, #1
 8004b02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	3308      	adds	r3, #8
 8004b0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b0c:	61fa      	str	r2, [r7, #28]
 8004b0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b10:	69b9      	ldr	r1, [r7, #24]
 8004b12:	69fa      	ldr	r2, [r7, #28]
 8004b14:	e841 2300 	strex	r3, r2, [r1]
 8004b18:	617b      	str	r3, [r7, #20]
   return(result);
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1e5      	bne.n	8004aec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2220      	movs	r2, #32
 8004b24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e011      	b.n	8004b58 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2220      	movs	r2, #32
 8004b38:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3758      	adds	r7, #88	@ 0x58
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	603b      	str	r3, [r7, #0]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b70:	e049      	b.n	8004c06 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b78:	d045      	beq.n	8004c06 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b7a:	f7fd f87d 	bl	8001c78 <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d302      	bcc.n	8004b90 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e048      	b.n	8004c26 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0304 	and.w	r3, r3, #4
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d031      	beq.n	8004c06 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	69db      	ldr	r3, [r3, #28]
 8004ba8:	f003 0308 	and.w	r3, r3, #8
 8004bac:	2b08      	cmp	r3, #8
 8004bae:	d110      	bne.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2208      	movs	r2, #8
 8004bb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f000 f838 	bl	8004c2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2208      	movs	r2, #8
 8004bc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e029      	b.n	8004c26 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004be0:	d111      	bne.n	8004c06 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004bea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f000 f81e 	bl	8004c2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e00f      	b.n	8004c26 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	69da      	ldr	r2, [r3, #28]
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	bf0c      	ite	eq
 8004c16:	2301      	moveq	r3, #1
 8004c18:	2300      	movne	r3, #0
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	79fb      	ldrb	r3, [r7, #7]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d0a6      	beq.n	8004b72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b095      	sub	sp, #84	@ 0x54
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c3e:	e853 3f00 	ldrex	r3, [r3]
 8004c42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	461a      	mov	r2, r3
 8004c52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c54:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c56:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c5c:	e841 2300 	strex	r3, r2, [r1]
 8004c60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1e6      	bne.n	8004c36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3308      	adds	r3, #8
 8004c6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c70:	6a3b      	ldr	r3, [r7, #32]
 8004c72:	e853 3f00 	ldrex	r3, [r3]
 8004c76:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	f023 0301 	bic.w	r3, r3, #1
 8004c7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	3308      	adds	r3, #8
 8004c86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c90:	e841 2300 	strex	r3, r2, [r1]
 8004c94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1e5      	bne.n	8004c68 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d118      	bne.n	8004cd6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	e853 3f00 	ldrex	r3, [r3]
 8004cb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	f023 0310 	bic.w	r3, r3, #16
 8004cb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cc2:	61bb      	str	r3, [r7, #24]
 8004cc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc6:	6979      	ldr	r1, [r7, #20]
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	e841 2300 	strex	r3, r2, [r1]
 8004cce:	613b      	str	r3, [r7, #16]
   return(result);
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1e6      	bne.n	8004ca4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004cea:	bf00      	nop
 8004cec:	3754      	adds	r7, #84	@ 0x54
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
	...

08004cf8 <siprintf>:
 8004cf8:	b40e      	push	{r1, r2, r3}
 8004cfa:	b500      	push	{lr}
 8004cfc:	b09c      	sub	sp, #112	@ 0x70
 8004cfe:	ab1d      	add	r3, sp, #116	@ 0x74
 8004d00:	9002      	str	r0, [sp, #8]
 8004d02:	9006      	str	r0, [sp, #24]
 8004d04:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004d08:	4809      	ldr	r0, [pc, #36]	@ (8004d30 <siprintf+0x38>)
 8004d0a:	9107      	str	r1, [sp, #28]
 8004d0c:	9104      	str	r1, [sp, #16]
 8004d0e:	4909      	ldr	r1, [pc, #36]	@ (8004d34 <siprintf+0x3c>)
 8004d10:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d14:	9105      	str	r1, [sp, #20]
 8004d16:	6800      	ldr	r0, [r0, #0]
 8004d18:	9301      	str	r3, [sp, #4]
 8004d1a:	a902      	add	r1, sp, #8
 8004d1c:	f000 f994 	bl	8005048 <_svfiprintf_r>
 8004d20:	9b02      	ldr	r3, [sp, #8]
 8004d22:	2200      	movs	r2, #0
 8004d24:	701a      	strb	r2, [r3, #0]
 8004d26:	b01c      	add	sp, #112	@ 0x70
 8004d28:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d2c:	b003      	add	sp, #12
 8004d2e:	4770      	bx	lr
 8004d30:	2000005c 	.word	0x2000005c
 8004d34:	ffff0208 	.word	0xffff0208

08004d38 <memset>:
 8004d38:	4402      	add	r2, r0
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d100      	bne.n	8004d42 <memset+0xa>
 8004d40:	4770      	bx	lr
 8004d42:	f803 1b01 	strb.w	r1, [r3], #1
 8004d46:	e7f9      	b.n	8004d3c <memset+0x4>

08004d48 <__errno>:
 8004d48:	4b01      	ldr	r3, [pc, #4]	@ (8004d50 <__errno+0x8>)
 8004d4a:	6818      	ldr	r0, [r3, #0]
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	2000005c 	.word	0x2000005c

08004d54 <__libc_init_array>:
 8004d54:	b570      	push	{r4, r5, r6, lr}
 8004d56:	4d0d      	ldr	r5, [pc, #52]	@ (8004d8c <__libc_init_array+0x38>)
 8004d58:	4c0d      	ldr	r4, [pc, #52]	@ (8004d90 <__libc_init_array+0x3c>)
 8004d5a:	1b64      	subs	r4, r4, r5
 8004d5c:	10a4      	asrs	r4, r4, #2
 8004d5e:	2600      	movs	r6, #0
 8004d60:	42a6      	cmp	r6, r4
 8004d62:	d109      	bne.n	8004d78 <__libc_init_array+0x24>
 8004d64:	4d0b      	ldr	r5, [pc, #44]	@ (8004d94 <__libc_init_array+0x40>)
 8004d66:	4c0c      	ldr	r4, [pc, #48]	@ (8004d98 <__libc_init_array+0x44>)
 8004d68:	f000 fc66 	bl	8005638 <_init>
 8004d6c:	1b64      	subs	r4, r4, r5
 8004d6e:	10a4      	asrs	r4, r4, #2
 8004d70:	2600      	movs	r6, #0
 8004d72:	42a6      	cmp	r6, r4
 8004d74:	d105      	bne.n	8004d82 <__libc_init_array+0x2e>
 8004d76:	bd70      	pop	{r4, r5, r6, pc}
 8004d78:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d7c:	4798      	blx	r3
 8004d7e:	3601      	adds	r6, #1
 8004d80:	e7ee      	b.n	8004d60 <__libc_init_array+0xc>
 8004d82:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d86:	4798      	blx	r3
 8004d88:	3601      	adds	r6, #1
 8004d8a:	e7f2      	b.n	8004d72 <__libc_init_array+0x1e>
 8004d8c:	080058c0 	.word	0x080058c0
 8004d90:	080058c0 	.word	0x080058c0
 8004d94:	080058c0 	.word	0x080058c0
 8004d98:	080058c4 	.word	0x080058c4

08004d9c <__retarget_lock_acquire_recursive>:
 8004d9c:	4770      	bx	lr

08004d9e <__retarget_lock_release_recursive>:
 8004d9e:	4770      	bx	lr

08004da0 <_free_r>:
 8004da0:	b538      	push	{r3, r4, r5, lr}
 8004da2:	4605      	mov	r5, r0
 8004da4:	2900      	cmp	r1, #0
 8004da6:	d041      	beq.n	8004e2c <_free_r+0x8c>
 8004da8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dac:	1f0c      	subs	r4, r1, #4
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	bfb8      	it	lt
 8004db2:	18e4      	addlt	r4, r4, r3
 8004db4:	f000 f8e0 	bl	8004f78 <__malloc_lock>
 8004db8:	4a1d      	ldr	r2, [pc, #116]	@ (8004e30 <_free_r+0x90>)
 8004dba:	6813      	ldr	r3, [r2, #0]
 8004dbc:	b933      	cbnz	r3, 8004dcc <_free_r+0x2c>
 8004dbe:	6063      	str	r3, [r4, #4]
 8004dc0:	6014      	str	r4, [r2, #0]
 8004dc2:	4628      	mov	r0, r5
 8004dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004dc8:	f000 b8dc 	b.w	8004f84 <__malloc_unlock>
 8004dcc:	42a3      	cmp	r3, r4
 8004dce:	d908      	bls.n	8004de2 <_free_r+0x42>
 8004dd0:	6820      	ldr	r0, [r4, #0]
 8004dd2:	1821      	adds	r1, r4, r0
 8004dd4:	428b      	cmp	r3, r1
 8004dd6:	bf01      	itttt	eq
 8004dd8:	6819      	ldreq	r1, [r3, #0]
 8004dda:	685b      	ldreq	r3, [r3, #4]
 8004ddc:	1809      	addeq	r1, r1, r0
 8004dde:	6021      	streq	r1, [r4, #0]
 8004de0:	e7ed      	b.n	8004dbe <_free_r+0x1e>
 8004de2:	461a      	mov	r2, r3
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	b10b      	cbz	r3, 8004dec <_free_r+0x4c>
 8004de8:	42a3      	cmp	r3, r4
 8004dea:	d9fa      	bls.n	8004de2 <_free_r+0x42>
 8004dec:	6811      	ldr	r1, [r2, #0]
 8004dee:	1850      	adds	r0, r2, r1
 8004df0:	42a0      	cmp	r0, r4
 8004df2:	d10b      	bne.n	8004e0c <_free_r+0x6c>
 8004df4:	6820      	ldr	r0, [r4, #0]
 8004df6:	4401      	add	r1, r0
 8004df8:	1850      	adds	r0, r2, r1
 8004dfa:	4283      	cmp	r3, r0
 8004dfc:	6011      	str	r1, [r2, #0]
 8004dfe:	d1e0      	bne.n	8004dc2 <_free_r+0x22>
 8004e00:	6818      	ldr	r0, [r3, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	6053      	str	r3, [r2, #4]
 8004e06:	4408      	add	r0, r1
 8004e08:	6010      	str	r0, [r2, #0]
 8004e0a:	e7da      	b.n	8004dc2 <_free_r+0x22>
 8004e0c:	d902      	bls.n	8004e14 <_free_r+0x74>
 8004e0e:	230c      	movs	r3, #12
 8004e10:	602b      	str	r3, [r5, #0]
 8004e12:	e7d6      	b.n	8004dc2 <_free_r+0x22>
 8004e14:	6820      	ldr	r0, [r4, #0]
 8004e16:	1821      	adds	r1, r4, r0
 8004e18:	428b      	cmp	r3, r1
 8004e1a:	bf04      	itt	eq
 8004e1c:	6819      	ldreq	r1, [r3, #0]
 8004e1e:	685b      	ldreq	r3, [r3, #4]
 8004e20:	6063      	str	r3, [r4, #4]
 8004e22:	bf04      	itt	eq
 8004e24:	1809      	addeq	r1, r1, r0
 8004e26:	6021      	streq	r1, [r4, #0]
 8004e28:	6054      	str	r4, [r2, #4]
 8004e2a:	e7ca      	b.n	8004dc2 <_free_r+0x22>
 8004e2c:	bd38      	pop	{r3, r4, r5, pc}
 8004e2e:	bf00      	nop
 8004e30:	20000510 	.word	0x20000510

08004e34 <sbrk_aligned>:
 8004e34:	b570      	push	{r4, r5, r6, lr}
 8004e36:	4e0f      	ldr	r6, [pc, #60]	@ (8004e74 <sbrk_aligned+0x40>)
 8004e38:	460c      	mov	r4, r1
 8004e3a:	6831      	ldr	r1, [r6, #0]
 8004e3c:	4605      	mov	r5, r0
 8004e3e:	b911      	cbnz	r1, 8004e46 <sbrk_aligned+0x12>
 8004e40:	f000 fba6 	bl	8005590 <_sbrk_r>
 8004e44:	6030      	str	r0, [r6, #0]
 8004e46:	4621      	mov	r1, r4
 8004e48:	4628      	mov	r0, r5
 8004e4a:	f000 fba1 	bl	8005590 <_sbrk_r>
 8004e4e:	1c43      	adds	r3, r0, #1
 8004e50:	d103      	bne.n	8004e5a <sbrk_aligned+0x26>
 8004e52:	f04f 34ff 	mov.w	r4, #4294967295
 8004e56:	4620      	mov	r0, r4
 8004e58:	bd70      	pop	{r4, r5, r6, pc}
 8004e5a:	1cc4      	adds	r4, r0, #3
 8004e5c:	f024 0403 	bic.w	r4, r4, #3
 8004e60:	42a0      	cmp	r0, r4
 8004e62:	d0f8      	beq.n	8004e56 <sbrk_aligned+0x22>
 8004e64:	1a21      	subs	r1, r4, r0
 8004e66:	4628      	mov	r0, r5
 8004e68:	f000 fb92 	bl	8005590 <_sbrk_r>
 8004e6c:	3001      	adds	r0, #1
 8004e6e:	d1f2      	bne.n	8004e56 <sbrk_aligned+0x22>
 8004e70:	e7ef      	b.n	8004e52 <sbrk_aligned+0x1e>
 8004e72:	bf00      	nop
 8004e74:	2000050c 	.word	0x2000050c

08004e78 <_malloc_r>:
 8004e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e7c:	1ccd      	adds	r5, r1, #3
 8004e7e:	f025 0503 	bic.w	r5, r5, #3
 8004e82:	3508      	adds	r5, #8
 8004e84:	2d0c      	cmp	r5, #12
 8004e86:	bf38      	it	cc
 8004e88:	250c      	movcc	r5, #12
 8004e8a:	2d00      	cmp	r5, #0
 8004e8c:	4606      	mov	r6, r0
 8004e8e:	db01      	blt.n	8004e94 <_malloc_r+0x1c>
 8004e90:	42a9      	cmp	r1, r5
 8004e92:	d904      	bls.n	8004e9e <_malloc_r+0x26>
 8004e94:	230c      	movs	r3, #12
 8004e96:	6033      	str	r3, [r6, #0]
 8004e98:	2000      	movs	r0, #0
 8004e9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004f74 <_malloc_r+0xfc>
 8004ea2:	f000 f869 	bl	8004f78 <__malloc_lock>
 8004ea6:	f8d8 3000 	ldr.w	r3, [r8]
 8004eaa:	461c      	mov	r4, r3
 8004eac:	bb44      	cbnz	r4, 8004f00 <_malloc_r+0x88>
 8004eae:	4629      	mov	r1, r5
 8004eb0:	4630      	mov	r0, r6
 8004eb2:	f7ff ffbf 	bl	8004e34 <sbrk_aligned>
 8004eb6:	1c43      	adds	r3, r0, #1
 8004eb8:	4604      	mov	r4, r0
 8004eba:	d158      	bne.n	8004f6e <_malloc_r+0xf6>
 8004ebc:	f8d8 4000 	ldr.w	r4, [r8]
 8004ec0:	4627      	mov	r7, r4
 8004ec2:	2f00      	cmp	r7, #0
 8004ec4:	d143      	bne.n	8004f4e <_malloc_r+0xd6>
 8004ec6:	2c00      	cmp	r4, #0
 8004ec8:	d04b      	beq.n	8004f62 <_malloc_r+0xea>
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	4639      	mov	r1, r7
 8004ece:	4630      	mov	r0, r6
 8004ed0:	eb04 0903 	add.w	r9, r4, r3
 8004ed4:	f000 fb5c 	bl	8005590 <_sbrk_r>
 8004ed8:	4581      	cmp	r9, r0
 8004eda:	d142      	bne.n	8004f62 <_malloc_r+0xea>
 8004edc:	6821      	ldr	r1, [r4, #0]
 8004ede:	1a6d      	subs	r5, r5, r1
 8004ee0:	4629      	mov	r1, r5
 8004ee2:	4630      	mov	r0, r6
 8004ee4:	f7ff ffa6 	bl	8004e34 <sbrk_aligned>
 8004ee8:	3001      	adds	r0, #1
 8004eea:	d03a      	beq.n	8004f62 <_malloc_r+0xea>
 8004eec:	6823      	ldr	r3, [r4, #0]
 8004eee:	442b      	add	r3, r5
 8004ef0:	6023      	str	r3, [r4, #0]
 8004ef2:	f8d8 3000 	ldr.w	r3, [r8]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	bb62      	cbnz	r2, 8004f54 <_malloc_r+0xdc>
 8004efa:	f8c8 7000 	str.w	r7, [r8]
 8004efe:	e00f      	b.n	8004f20 <_malloc_r+0xa8>
 8004f00:	6822      	ldr	r2, [r4, #0]
 8004f02:	1b52      	subs	r2, r2, r5
 8004f04:	d420      	bmi.n	8004f48 <_malloc_r+0xd0>
 8004f06:	2a0b      	cmp	r2, #11
 8004f08:	d917      	bls.n	8004f3a <_malloc_r+0xc2>
 8004f0a:	1961      	adds	r1, r4, r5
 8004f0c:	42a3      	cmp	r3, r4
 8004f0e:	6025      	str	r5, [r4, #0]
 8004f10:	bf18      	it	ne
 8004f12:	6059      	strne	r1, [r3, #4]
 8004f14:	6863      	ldr	r3, [r4, #4]
 8004f16:	bf08      	it	eq
 8004f18:	f8c8 1000 	streq.w	r1, [r8]
 8004f1c:	5162      	str	r2, [r4, r5]
 8004f1e:	604b      	str	r3, [r1, #4]
 8004f20:	4630      	mov	r0, r6
 8004f22:	f000 f82f 	bl	8004f84 <__malloc_unlock>
 8004f26:	f104 000b 	add.w	r0, r4, #11
 8004f2a:	1d23      	adds	r3, r4, #4
 8004f2c:	f020 0007 	bic.w	r0, r0, #7
 8004f30:	1ac2      	subs	r2, r0, r3
 8004f32:	bf1c      	itt	ne
 8004f34:	1a1b      	subne	r3, r3, r0
 8004f36:	50a3      	strne	r3, [r4, r2]
 8004f38:	e7af      	b.n	8004e9a <_malloc_r+0x22>
 8004f3a:	6862      	ldr	r2, [r4, #4]
 8004f3c:	42a3      	cmp	r3, r4
 8004f3e:	bf0c      	ite	eq
 8004f40:	f8c8 2000 	streq.w	r2, [r8]
 8004f44:	605a      	strne	r2, [r3, #4]
 8004f46:	e7eb      	b.n	8004f20 <_malloc_r+0xa8>
 8004f48:	4623      	mov	r3, r4
 8004f4a:	6864      	ldr	r4, [r4, #4]
 8004f4c:	e7ae      	b.n	8004eac <_malloc_r+0x34>
 8004f4e:	463c      	mov	r4, r7
 8004f50:	687f      	ldr	r7, [r7, #4]
 8004f52:	e7b6      	b.n	8004ec2 <_malloc_r+0x4a>
 8004f54:	461a      	mov	r2, r3
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	42a3      	cmp	r3, r4
 8004f5a:	d1fb      	bne.n	8004f54 <_malloc_r+0xdc>
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	6053      	str	r3, [r2, #4]
 8004f60:	e7de      	b.n	8004f20 <_malloc_r+0xa8>
 8004f62:	230c      	movs	r3, #12
 8004f64:	6033      	str	r3, [r6, #0]
 8004f66:	4630      	mov	r0, r6
 8004f68:	f000 f80c 	bl	8004f84 <__malloc_unlock>
 8004f6c:	e794      	b.n	8004e98 <_malloc_r+0x20>
 8004f6e:	6005      	str	r5, [r0, #0]
 8004f70:	e7d6      	b.n	8004f20 <_malloc_r+0xa8>
 8004f72:	bf00      	nop
 8004f74:	20000510 	.word	0x20000510

08004f78 <__malloc_lock>:
 8004f78:	4801      	ldr	r0, [pc, #4]	@ (8004f80 <__malloc_lock+0x8>)
 8004f7a:	f7ff bf0f 	b.w	8004d9c <__retarget_lock_acquire_recursive>
 8004f7e:	bf00      	nop
 8004f80:	20000508 	.word	0x20000508

08004f84 <__malloc_unlock>:
 8004f84:	4801      	ldr	r0, [pc, #4]	@ (8004f8c <__malloc_unlock+0x8>)
 8004f86:	f7ff bf0a 	b.w	8004d9e <__retarget_lock_release_recursive>
 8004f8a:	bf00      	nop
 8004f8c:	20000508 	.word	0x20000508

08004f90 <__ssputs_r>:
 8004f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f94:	688e      	ldr	r6, [r1, #8]
 8004f96:	461f      	mov	r7, r3
 8004f98:	42be      	cmp	r6, r7
 8004f9a:	680b      	ldr	r3, [r1, #0]
 8004f9c:	4682      	mov	sl, r0
 8004f9e:	460c      	mov	r4, r1
 8004fa0:	4690      	mov	r8, r2
 8004fa2:	d82d      	bhi.n	8005000 <__ssputs_r+0x70>
 8004fa4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004fa8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004fac:	d026      	beq.n	8004ffc <__ssputs_r+0x6c>
 8004fae:	6965      	ldr	r5, [r4, #20]
 8004fb0:	6909      	ldr	r1, [r1, #16]
 8004fb2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004fb6:	eba3 0901 	sub.w	r9, r3, r1
 8004fba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004fbe:	1c7b      	adds	r3, r7, #1
 8004fc0:	444b      	add	r3, r9
 8004fc2:	106d      	asrs	r5, r5, #1
 8004fc4:	429d      	cmp	r5, r3
 8004fc6:	bf38      	it	cc
 8004fc8:	461d      	movcc	r5, r3
 8004fca:	0553      	lsls	r3, r2, #21
 8004fcc:	d527      	bpl.n	800501e <__ssputs_r+0x8e>
 8004fce:	4629      	mov	r1, r5
 8004fd0:	f7ff ff52 	bl	8004e78 <_malloc_r>
 8004fd4:	4606      	mov	r6, r0
 8004fd6:	b360      	cbz	r0, 8005032 <__ssputs_r+0xa2>
 8004fd8:	6921      	ldr	r1, [r4, #16]
 8004fda:	464a      	mov	r2, r9
 8004fdc:	f000 fae8 	bl	80055b0 <memcpy>
 8004fe0:	89a3      	ldrh	r3, [r4, #12]
 8004fe2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004fe6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fea:	81a3      	strh	r3, [r4, #12]
 8004fec:	6126      	str	r6, [r4, #16]
 8004fee:	6165      	str	r5, [r4, #20]
 8004ff0:	444e      	add	r6, r9
 8004ff2:	eba5 0509 	sub.w	r5, r5, r9
 8004ff6:	6026      	str	r6, [r4, #0]
 8004ff8:	60a5      	str	r5, [r4, #8]
 8004ffa:	463e      	mov	r6, r7
 8004ffc:	42be      	cmp	r6, r7
 8004ffe:	d900      	bls.n	8005002 <__ssputs_r+0x72>
 8005000:	463e      	mov	r6, r7
 8005002:	6820      	ldr	r0, [r4, #0]
 8005004:	4632      	mov	r2, r6
 8005006:	4641      	mov	r1, r8
 8005008:	f000 faa8 	bl	800555c <memmove>
 800500c:	68a3      	ldr	r3, [r4, #8]
 800500e:	1b9b      	subs	r3, r3, r6
 8005010:	60a3      	str	r3, [r4, #8]
 8005012:	6823      	ldr	r3, [r4, #0]
 8005014:	4433      	add	r3, r6
 8005016:	6023      	str	r3, [r4, #0]
 8005018:	2000      	movs	r0, #0
 800501a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800501e:	462a      	mov	r2, r5
 8005020:	f000 fad4 	bl	80055cc <_realloc_r>
 8005024:	4606      	mov	r6, r0
 8005026:	2800      	cmp	r0, #0
 8005028:	d1e0      	bne.n	8004fec <__ssputs_r+0x5c>
 800502a:	6921      	ldr	r1, [r4, #16]
 800502c:	4650      	mov	r0, sl
 800502e:	f7ff feb7 	bl	8004da0 <_free_r>
 8005032:	230c      	movs	r3, #12
 8005034:	f8ca 3000 	str.w	r3, [sl]
 8005038:	89a3      	ldrh	r3, [r4, #12]
 800503a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800503e:	81a3      	strh	r3, [r4, #12]
 8005040:	f04f 30ff 	mov.w	r0, #4294967295
 8005044:	e7e9      	b.n	800501a <__ssputs_r+0x8a>
	...

08005048 <_svfiprintf_r>:
 8005048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800504c:	4698      	mov	r8, r3
 800504e:	898b      	ldrh	r3, [r1, #12]
 8005050:	061b      	lsls	r3, r3, #24
 8005052:	b09d      	sub	sp, #116	@ 0x74
 8005054:	4607      	mov	r7, r0
 8005056:	460d      	mov	r5, r1
 8005058:	4614      	mov	r4, r2
 800505a:	d510      	bpl.n	800507e <_svfiprintf_r+0x36>
 800505c:	690b      	ldr	r3, [r1, #16]
 800505e:	b973      	cbnz	r3, 800507e <_svfiprintf_r+0x36>
 8005060:	2140      	movs	r1, #64	@ 0x40
 8005062:	f7ff ff09 	bl	8004e78 <_malloc_r>
 8005066:	6028      	str	r0, [r5, #0]
 8005068:	6128      	str	r0, [r5, #16]
 800506a:	b930      	cbnz	r0, 800507a <_svfiprintf_r+0x32>
 800506c:	230c      	movs	r3, #12
 800506e:	603b      	str	r3, [r7, #0]
 8005070:	f04f 30ff 	mov.w	r0, #4294967295
 8005074:	b01d      	add	sp, #116	@ 0x74
 8005076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800507a:	2340      	movs	r3, #64	@ 0x40
 800507c:	616b      	str	r3, [r5, #20]
 800507e:	2300      	movs	r3, #0
 8005080:	9309      	str	r3, [sp, #36]	@ 0x24
 8005082:	2320      	movs	r3, #32
 8005084:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005088:	f8cd 800c 	str.w	r8, [sp, #12]
 800508c:	2330      	movs	r3, #48	@ 0x30
 800508e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800522c <_svfiprintf_r+0x1e4>
 8005092:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005096:	f04f 0901 	mov.w	r9, #1
 800509a:	4623      	mov	r3, r4
 800509c:	469a      	mov	sl, r3
 800509e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050a2:	b10a      	cbz	r2, 80050a8 <_svfiprintf_r+0x60>
 80050a4:	2a25      	cmp	r2, #37	@ 0x25
 80050a6:	d1f9      	bne.n	800509c <_svfiprintf_r+0x54>
 80050a8:	ebba 0b04 	subs.w	fp, sl, r4
 80050ac:	d00b      	beq.n	80050c6 <_svfiprintf_r+0x7e>
 80050ae:	465b      	mov	r3, fp
 80050b0:	4622      	mov	r2, r4
 80050b2:	4629      	mov	r1, r5
 80050b4:	4638      	mov	r0, r7
 80050b6:	f7ff ff6b 	bl	8004f90 <__ssputs_r>
 80050ba:	3001      	adds	r0, #1
 80050bc:	f000 80a7 	beq.w	800520e <_svfiprintf_r+0x1c6>
 80050c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80050c2:	445a      	add	r2, fp
 80050c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80050c6:	f89a 3000 	ldrb.w	r3, [sl]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f000 809f 	beq.w	800520e <_svfiprintf_r+0x1c6>
 80050d0:	2300      	movs	r3, #0
 80050d2:	f04f 32ff 	mov.w	r2, #4294967295
 80050d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050da:	f10a 0a01 	add.w	sl, sl, #1
 80050de:	9304      	str	r3, [sp, #16]
 80050e0:	9307      	str	r3, [sp, #28]
 80050e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80050e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80050e8:	4654      	mov	r4, sl
 80050ea:	2205      	movs	r2, #5
 80050ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050f0:	484e      	ldr	r0, [pc, #312]	@ (800522c <_svfiprintf_r+0x1e4>)
 80050f2:	f7fb f86d 	bl	80001d0 <memchr>
 80050f6:	9a04      	ldr	r2, [sp, #16]
 80050f8:	b9d8      	cbnz	r0, 8005132 <_svfiprintf_r+0xea>
 80050fa:	06d0      	lsls	r0, r2, #27
 80050fc:	bf44      	itt	mi
 80050fe:	2320      	movmi	r3, #32
 8005100:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005104:	0711      	lsls	r1, r2, #28
 8005106:	bf44      	itt	mi
 8005108:	232b      	movmi	r3, #43	@ 0x2b
 800510a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800510e:	f89a 3000 	ldrb.w	r3, [sl]
 8005112:	2b2a      	cmp	r3, #42	@ 0x2a
 8005114:	d015      	beq.n	8005142 <_svfiprintf_r+0xfa>
 8005116:	9a07      	ldr	r2, [sp, #28]
 8005118:	4654      	mov	r4, sl
 800511a:	2000      	movs	r0, #0
 800511c:	f04f 0c0a 	mov.w	ip, #10
 8005120:	4621      	mov	r1, r4
 8005122:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005126:	3b30      	subs	r3, #48	@ 0x30
 8005128:	2b09      	cmp	r3, #9
 800512a:	d94b      	bls.n	80051c4 <_svfiprintf_r+0x17c>
 800512c:	b1b0      	cbz	r0, 800515c <_svfiprintf_r+0x114>
 800512e:	9207      	str	r2, [sp, #28]
 8005130:	e014      	b.n	800515c <_svfiprintf_r+0x114>
 8005132:	eba0 0308 	sub.w	r3, r0, r8
 8005136:	fa09 f303 	lsl.w	r3, r9, r3
 800513a:	4313      	orrs	r3, r2
 800513c:	9304      	str	r3, [sp, #16]
 800513e:	46a2      	mov	sl, r4
 8005140:	e7d2      	b.n	80050e8 <_svfiprintf_r+0xa0>
 8005142:	9b03      	ldr	r3, [sp, #12]
 8005144:	1d19      	adds	r1, r3, #4
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	9103      	str	r1, [sp, #12]
 800514a:	2b00      	cmp	r3, #0
 800514c:	bfbb      	ittet	lt
 800514e:	425b      	neglt	r3, r3
 8005150:	f042 0202 	orrlt.w	r2, r2, #2
 8005154:	9307      	strge	r3, [sp, #28]
 8005156:	9307      	strlt	r3, [sp, #28]
 8005158:	bfb8      	it	lt
 800515a:	9204      	strlt	r2, [sp, #16]
 800515c:	7823      	ldrb	r3, [r4, #0]
 800515e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005160:	d10a      	bne.n	8005178 <_svfiprintf_r+0x130>
 8005162:	7863      	ldrb	r3, [r4, #1]
 8005164:	2b2a      	cmp	r3, #42	@ 0x2a
 8005166:	d132      	bne.n	80051ce <_svfiprintf_r+0x186>
 8005168:	9b03      	ldr	r3, [sp, #12]
 800516a:	1d1a      	adds	r2, r3, #4
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	9203      	str	r2, [sp, #12]
 8005170:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005174:	3402      	adds	r4, #2
 8005176:	9305      	str	r3, [sp, #20]
 8005178:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800523c <_svfiprintf_r+0x1f4>
 800517c:	7821      	ldrb	r1, [r4, #0]
 800517e:	2203      	movs	r2, #3
 8005180:	4650      	mov	r0, sl
 8005182:	f7fb f825 	bl	80001d0 <memchr>
 8005186:	b138      	cbz	r0, 8005198 <_svfiprintf_r+0x150>
 8005188:	9b04      	ldr	r3, [sp, #16]
 800518a:	eba0 000a 	sub.w	r0, r0, sl
 800518e:	2240      	movs	r2, #64	@ 0x40
 8005190:	4082      	lsls	r2, r0
 8005192:	4313      	orrs	r3, r2
 8005194:	3401      	adds	r4, #1
 8005196:	9304      	str	r3, [sp, #16]
 8005198:	f814 1b01 	ldrb.w	r1, [r4], #1
 800519c:	4824      	ldr	r0, [pc, #144]	@ (8005230 <_svfiprintf_r+0x1e8>)
 800519e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80051a2:	2206      	movs	r2, #6
 80051a4:	f7fb f814 	bl	80001d0 <memchr>
 80051a8:	2800      	cmp	r0, #0
 80051aa:	d036      	beq.n	800521a <_svfiprintf_r+0x1d2>
 80051ac:	4b21      	ldr	r3, [pc, #132]	@ (8005234 <_svfiprintf_r+0x1ec>)
 80051ae:	bb1b      	cbnz	r3, 80051f8 <_svfiprintf_r+0x1b0>
 80051b0:	9b03      	ldr	r3, [sp, #12]
 80051b2:	3307      	adds	r3, #7
 80051b4:	f023 0307 	bic.w	r3, r3, #7
 80051b8:	3308      	adds	r3, #8
 80051ba:	9303      	str	r3, [sp, #12]
 80051bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051be:	4433      	add	r3, r6
 80051c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80051c2:	e76a      	b.n	800509a <_svfiprintf_r+0x52>
 80051c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80051c8:	460c      	mov	r4, r1
 80051ca:	2001      	movs	r0, #1
 80051cc:	e7a8      	b.n	8005120 <_svfiprintf_r+0xd8>
 80051ce:	2300      	movs	r3, #0
 80051d0:	3401      	adds	r4, #1
 80051d2:	9305      	str	r3, [sp, #20]
 80051d4:	4619      	mov	r1, r3
 80051d6:	f04f 0c0a 	mov.w	ip, #10
 80051da:	4620      	mov	r0, r4
 80051dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051e0:	3a30      	subs	r2, #48	@ 0x30
 80051e2:	2a09      	cmp	r2, #9
 80051e4:	d903      	bls.n	80051ee <_svfiprintf_r+0x1a6>
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d0c6      	beq.n	8005178 <_svfiprintf_r+0x130>
 80051ea:	9105      	str	r1, [sp, #20]
 80051ec:	e7c4      	b.n	8005178 <_svfiprintf_r+0x130>
 80051ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80051f2:	4604      	mov	r4, r0
 80051f4:	2301      	movs	r3, #1
 80051f6:	e7f0      	b.n	80051da <_svfiprintf_r+0x192>
 80051f8:	ab03      	add	r3, sp, #12
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	462a      	mov	r2, r5
 80051fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005238 <_svfiprintf_r+0x1f0>)
 8005200:	a904      	add	r1, sp, #16
 8005202:	4638      	mov	r0, r7
 8005204:	f3af 8000 	nop.w
 8005208:	1c42      	adds	r2, r0, #1
 800520a:	4606      	mov	r6, r0
 800520c:	d1d6      	bne.n	80051bc <_svfiprintf_r+0x174>
 800520e:	89ab      	ldrh	r3, [r5, #12]
 8005210:	065b      	lsls	r3, r3, #25
 8005212:	f53f af2d 	bmi.w	8005070 <_svfiprintf_r+0x28>
 8005216:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005218:	e72c      	b.n	8005074 <_svfiprintf_r+0x2c>
 800521a:	ab03      	add	r3, sp, #12
 800521c:	9300      	str	r3, [sp, #0]
 800521e:	462a      	mov	r2, r5
 8005220:	4b05      	ldr	r3, [pc, #20]	@ (8005238 <_svfiprintf_r+0x1f0>)
 8005222:	a904      	add	r1, sp, #16
 8005224:	4638      	mov	r0, r7
 8005226:	f000 f879 	bl	800531c <_printf_i>
 800522a:	e7ed      	b.n	8005208 <_svfiprintf_r+0x1c0>
 800522c:	08005884 	.word	0x08005884
 8005230:	0800588e 	.word	0x0800588e
 8005234:	00000000 	.word	0x00000000
 8005238:	08004f91 	.word	0x08004f91
 800523c:	0800588a 	.word	0x0800588a

08005240 <_printf_common>:
 8005240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005244:	4616      	mov	r6, r2
 8005246:	4698      	mov	r8, r3
 8005248:	688a      	ldr	r2, [r1, #8]
 800524a:	690b      	ldr	r3, [r1, #16]
 800524c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005250:	4293      	cmp	r3, r2
 8005252:	bfb8      	it	lt
 8005254:	4613      	movlt	r3, r2
 8005256:	6033      	str	r3, [r6, #0]
 8005258:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800525c:	4607      	mov	r7, r0
 800525e:	460c      	mov	r4, r1
 8005260:	b10a      	cbz	r2, 8005266 <_printf_common+0x26>
 8005262:	3301      	adds	r3, #1
 8005264:	6033      	str	r3, [r6, #0]
 8005266:	6823      	ldr	r3, [r4, #0]
 8005268:	0699      	lsls	r1, r3, #26
 800526a:	bf42      	ittt	mi
 800526c:	6833      	ldrmi	r3, [r6, #0]
 800526e:	3302      	addmi	r3, #2
 8005270:	6033      	strmi	r3, [r6, #0]
 8005272:	6825      	ldr	r5, [r4, #0]
 8005274:	f015 0506 	ands.w	r5, r5, #6
 8005278:	d106      	bne.n	8005288 <_printf_common+0x48>
 800527a:	f104 0a19 	add.w	sl, r4, #25
 800527e:	68e3      	ldr	r3, [r4, #12]
 8005280:	6832      	ldr	r2, [r6, #0]
 8005282:	1a9b      	subs	r3, r3, r2
 8005284:	42ab      	cmp	r3, r5
 8005286:	dc26      	bgt.n	80052d6 <_printf_common+0x96>
 8005288:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800528c:	6822      	ldr	r2, [r4, #0]
 800528e:	3b00      	subs	r3, #0
 8005290:	bf18      	it	ne
 8005292:	2301      	movne	r3, #1
 8005294:	0692      	lsls	r2, r2, #26
 8005296:	d42b      	bmi.n	80052f0 <_printf_common+0xb0>
 8005298:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800529c:	4641      	mov	r1, r8
 800529e:	4638      	mov	r0, r7
 80052a0:	47c8      	blx	r9
 80052a2:	3001      	adds	r0, #1
 80052a4:	d01e      	beq.n	80052e4 <_printf_common+0xa4>
 80052a6:	6823      	ldr	r3, [r4, #0]
 80052a8:	6922      	ldr	r2, [r4, #16]
 80052aa:	f003 0306 	and.w	r3, r3, #6
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	bf02      	ittt	eq
 80052b2:	68e5      	ldreq	r5, [r4, #12]
 80052b4:	6833      	ldreq	r3, [r6, #0]
 80052b6:	1aed      	subeq	r5, r5, r3
 80052b8:	68a3      	ldr	r3, [r4, #8]
 80052ba:	bf0c      	ite	eq
 80052bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052c0:	2500      	movne	r5, #0
 80052c2:	4293      	cmp	r3, r2
 80052c4:	bfc4      	itt	gt
 80052c6:	1a9b      	subgt	r3, r3, r2
 80052c8:	18ed      	addgt	r5, r5, r3
 80052ca:	2600      	movs	r6, #0
 80052cc:	341a      	adds	r4, #26
 80052ce:	42b5      	cmp	r5, r6
 80052d0:	d11a      	bne.n	8005308 <_printf_common+0xc8>
 80052d2:	2000      	movs	r0, #0
 80052d4:	e008      	b.n	80052e8 <_printf_common+0xa8>
 80052d6:	2301      	movs	r3, #1
 80052d8:	4652      	mov	r2, sl
 80052da:	4641      	mov	r1, r8
 80052dc:	4638      	mov	r0, r7
 80052de:	47c8      	blx	r9
 80052e0:	3001      	adds	r0, #1
 80052e2:	d103      	bne.n	80052ec <_printf_common+0xac>
 80052e4:	f04f 30ff 	mov.w	r0, #4294967295
 80052e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ec:	3501      	adds	r5, #1
 80052ee:	e7c6      	b.n	800527e <_printf_common+0x3e>
 80052f0:	18e1      	adds	r1, r4, r3
 80052f2:	1c5a      	adds	r2, r3, #1
 80052f4:	2030      	movs	r0, #48	@ 0x30
 80052f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80052fa:	4422      	add	r2, r4
 80052fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005300:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005304:	3302      	adds	r3, #2
 8005306:	e7c7      	b.n	8005298 <_printf_common+0x58>
 8005308:	2301      	movs	r3, #1
 800530a:	4622      	mov	r2, r4
 800530c:	4641      	mov	r1, r8
 800530e:	4638      	mov	r0, r7
 8005310:	47c8      	blx	r9
 8005312:	3001      	adds	r0, #1
 8005314:	d0e6      	beq.n	80052e4 <_printf_common+0xa4>
 8005316:	3601      	adds	r6, #1
 8005318:	e7d9      	b.n	80052ce <_printf_common+0x8e>
	...

0800531c <_printf_i>:
 800531c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005320:	7e0f      	ldrb	r7, [r1, #24]
 8005322:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005324:	2f78      	cmp	r7, #120	@ 0x78
 8005326:	4691      	mov	r9, r2
 8005328:	4680      	mov	r8, r0
 800532a:	460c      	mov	r4, r1
 800532c:	469a      	mov	sl, r3
 800532e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005332:	d807      	bhi.n	8005344 <_printf_i+0x28>
 8005334:	2f62      	cmp	r7, #98	@ 0x62
 8005336:	d80a      	bhi.n	800534e <_printf_i+0x32>
 8005338:	2f00      	cmp	r7, #0
 800533a:	f000 80d2 	beq.w	80054e2 <_printf_i+0x1c6>
 800533e:	2f58      	cmp	r7, #88	@ 0x58
 8005340:	f000 80b9 	beq.w	80054b6 <_printf_i+0x19a>
 8005344:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005348:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800534c:	e03a      	b.n	80053c4 <_printf_i+0xa8>
 800534e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005352:	2b15      	cmp	r3, #21
 8005354:	d8f6      	bhi.n	8005344 <_printf_i+0x28>
 8005356:	a101      	add	r1, pc, #4	@ (adr r1, 800535c <_printf_i+0x40>)
 8005358:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800535c:	080053b5 	.word	0x080053b5
 8005360:	080053c9 	.word	0x080053c9
 8005364:	08005345 	.word	0x08005345
 8005368:	08005345 	.word	0x08005345
 800536c:	08005345 	.word	0x08005345
 8005370:	08005345 	.word	0x08005345
 8005374:	080053c9 	.word	0x080053c9
 8005378:	08005345 	.word	0x08005345
 800537c:	08005345 	.word	0x08005345
 8005380:	08005345 	.word	0x08005345
 8005384:	08005345 	.word	0x08005345
 8005388:	080054c9 	.word	0x080054c9
 800538c:	080053f3 	.word	0x080053f3
 8005390:	08005483 	.word	0x08005483
 8005394:	08005345 	.word	0x08005345
 8005398:	08005345 	.word	0x08005345
 800539c:	080054eb 	.word	0x080054eb
 80053a0:	08005345 	.word	0x08005345
 80053a4:	080053f3 	.word	0x080053f3
 80053a8:	08005345 	.word	0x08005345
 80053ac:	08005345 	.word	0x08005345
 80053b0:	0800548b 	.word	0x0800548b
 80053b4:	6833      	ldr	r3, [r6, #0]
 80053b6:	1d1a      	adds	r2, r3, #4
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	6032      	str	r2, [r6, #0]
 80053bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80053c4:	2301      	movs	r3, #1
 80053c6:	e09d      	b.n	8005504 <_printf_i+0x1e8>
 80053c8:	6833      	ldr	r3, [r6, #0]
 80053ca:	6820      	ldr	r0, [r4, #0]
 80053cc:	1d19      	adds	r1, r3, #4
 80053ce:	6031      	str	r1, [r6, #0]
 80053d0:	0606      	lsls	r6, r0, #24
 80053d2:	d501      	bpl.n	80053d8 <_printf_i+0xbc>
 80053d4:	681d      	ldr	r5, [r3, #0]
 80053d6:	e003      	b.n	80053e0 <_printf_i+0xc4>
 80053d8:	0645      	lsls	r5, r0, #25
 80053da:	d5fb      	bpl.n	80053d4 <_printf_i+0xb8>
 80053dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80053e0:	2d00      	cmp	r5, #0
 80053e2:	da03      	bge.n	80053ec <_printf_i+0xd0>
 80053e4:	232d      	movs	r3, #45	@ 0x2d
 80053e6:	426d      	negs	r5, r5
 80053e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053ec:	4859      	ldr	r0, [pc, #356]	@ (8005554 <_printf_i+0x238>)
 80053ee:	230a      	movs	r3, #10
 80053f0:	e011      	b.n	8005416 <_printf_i+0xfa>
 80053f2:	6821      	ldr	r1, [r4, #0]
 80053f4:	6833      	ldr	r3, [r6, #0]
 80053f6:	0608      	lsls	r0, r1, #24
 80053f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80053fc:	d402      	bmi.n	8005404 <_printf_i+0xe8>
 80053fe:	0649      	lsls	r1, r1, #25
 8005400:	bf48      	it	mi
 8005402:	b2ad      	uxthmi	r5, r5
 8005404:	2f6f      	cmp	r7, #111	@ 0x6f
 8005406:	4853      	ldr	r0, [pc, #332]	@ (8005554 <_printf_i+0x238>)
 8005408:	6033      	str	r3, [r6, #0]
 800540a:	bf14      	ite	ne
 800540c:	230a      	movne	r3, #10
 800540e:	2308      	moveq	r3, #8
 8005410:	2100      	movs	r1, #0
 8005412:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005416:	6866      	ldr	r6, [r4, #4]
 8005418:	60a6      	str	r6, [r4, #8]
 800541a:	2e00      	cmp	r6, #0
 800541c:	bfa2      	ittt	ge
 800541e:	6821      	ldrge	r1, [r4, #0]
 8005420:	f021 0104 	bicge.w	r1, r1, #4
 8005424:	6021      	strge	r1, [r4, #0]
 8005426:	b90d      	cbnz	r5, 800542c <_printf_i+0x110>
 8005428:	2e00      	cmp	r6, #0
 800542a:	d04b      	beq.n	80054c4 <_printf_i+0x1a8>
 800542c:	4616      	mov	r6, r2
 800542e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005432:	fb03 5711 	mls	r7, r3, r1, r5
 8005436:	5dc7      	ldrb	r7, [r0, r7]
 8005438:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800543c:	462f      	mov	r7, r5
 800543e:	42bb      	cmp	r3, r7
 8005440:	460d      	mov	r5, r1
 8005442:	d9f4      	bls.n	800542e <_printf_i+0x112>
 8005444:	2b08      	cmp	r3, #8
 8005446:	d10b      	bne.n	8005460 <_printf_i+0x144>
 8005448:	6823      	ldr	r3, [r4, #0]
 800544a:	07df      	lsls	r7, r3, #31
 800544c:	d508      	bpl.n	8005460 <_printf_i+0x144>
 800544e:	6923      	ldr	r3, [r4, #16]
 8005450:	6861      	ldr	r1, [r4, #4]
 8005452:	4299      	cmp	r1, r3
 8005454:	bfde      	ittt	le
 8005456:	2330      	movle	r3, #48	@ 0x30
 8005458:	f806 3c01 	strble.w	r3, [r6, #-1]
 800545c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005460:	1b92      	subs	r2, r2, r6
 8005462:	6122      	str	r2, [r4, #16]
 8005464:	f8cd a000 	str.w	sl, [sp]
 8005468:	464b      	mov	r3, r9
 800546a:	aa03      	add	r2, sp, #12
 800546c:	4621      	mov	r1, r4
 800546e:	4640      	mov	r0, r8
 8005470:	f7ff fee6 	bl	8005240 <_printf_common>
 8005474:	3001      	adds	r0, #1
 8005476:	d14a      	bne.n	800550e <_printf_i+0x1f2>
 8005478:	f04f 30ff 	mov.w	r0, #4294967295
 800547c:	b004      	add	sp, #16
 800547e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005482:	6823      	ldr	r3, [r4, #0]
 8005484:	f043 0320 	orr.w	r3, r3, #32
 8005488:	6023      	str	r3, [r4, #0]
 800548a:	4833      	ldr	r0, [pc, #204]	@ (8005558 <_printf_i+0x23c>)
 800548c:	2778      	movs	r7, #120	@ 0x78
 800548e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005492:	6823      	ldr	r3, [r4, #0]
 8005494:	6831      	ldr	r1, [r6, #0]
 8005496:	061f      	lsls	r7, r3, #24
 8005498:	f851 5b04 	ldr.w	r5, [r1], #4
 800549c:	d402      	bmi.n	80054a4 <_printf_i+0x188>
 800549e:	065f      	lsls	r7, r3, #25
 80054a0:	bf48      	it	mi
 80054a2:	b2ad      	uxthmi	r5, r5
 80054a4:	6031      	str	r1, [r6, #0]
 80054a6:	07d9      	lsls	r1, r3, #31
 80054a8:	bf44      	itt	mi
 80054aa:	f043 0320 	orrmi.w	r3, r3, #32
 80054ae:	6023      	strmi	r3, [r4, #0]
 80054b0:	b11d      	cbz	r5, 80054ba <_printf_i+0x19e>
 80054b2:	2310      	movs	r3, #16
 80054b4:	e7ac      	b.n	8005410 <_printf_i+0xf4>
 80054b6:	4827      	ldr	r0, [pc, #156]	@ (8005554 <_printf_i+0x238>)
 80054b8:	e7e9      	b.n	800548e <_printf_i+0x172>
 80054ba:	6823      	ldr	r3, [r4, #0]
 80054bc:	f023 0320 	bic.w	r3, r3, #32
 80054c0:	6023      	str	r3, [r4, #0]
 80054c2:	e7f6      	b.n	80054b2 <_printf_i+0x196>
 80054c4:	4616      	mov	r6, r2
 80054c6:	e7bd      	b.n	8005444 <_printf_i+0x128>
 80054c8:	6833      	ldr	r3, [r6, #0]
 80054ca:	6825      	ldr	r5, [r4, #0]
 80054cc:	6961      	ldr	r1, [r4, #20]
 80054ce:	1d18      	adds	r0, r3, #4
 80054d0:	6030      	str	r0, [r6, #0]
 80054d2:	062e      	lsls	r6, r5, #24
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	d501      	bpl.n	80054dc <_printf_i+0x1c0>
 80054d8:	6019      	str	r1, [r3, #0]
 80054da:	e002      	b.n	80054e2 <_printf_i+0x1c6>
 80054dc:	0668      	lsls	r0, r5, #25
 80054de:	d5fb      	bpl.n	80054d8 <_printf_i+0x1bc>
 80054e0:	8019      	strh	r1, [r3, #0]
 80054e2:	2300      	movs	r3, #0
 80054e4:	6123      	str	r3, [r4, #16]
 80054e6:	4616      	mov	r6, r2
 80054e8:	e7bc      	b.n	8005464 <_printf_i+0x148>
 80054ea:	6833      	ldr	r3, [r6, #0]
 80054ec:	1d1a      	adds	r2, r3, #4
 80054ee:	6032      	str	r2, [r6, #0]
 80054f0:	681e      	ldr	r6, [r3, #0]
 80054f2:	6862      	ldr	r2, [r4, #4]
 80054f4:	2100      	movs	r1, #0
 80054f6:	4630      	mov	r0, r6
 80054f8:	f7fa fe6a 	bl	80001d0 <memchr>
 80054fc:	b108      	cbz	r0, 8005502 <_printf_i+0x1e6>
 80054fe:	1b80      	subs	r0, r0, r6
 8005500:	6060      	str	r0, [r4, #4]
 8005502:	6863      	ldr	r3, [r4, #4]
 8005504:	6123      	str	r3, [r4, #16]
 8005506:	2300      	movs	r3, #0
 8005508:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800550c:	e7aa      	b.n	8005464 <_printf_i+0x148>
 800550e:	6923      	ldr	r3, [r4, #16]
 8005510:	4632      	mov	r2, r6
 8005512:	4649      	mov	r1, r9
 8005514:	4640      	mov	r0, r8
 8005516:	47d0      	blx	sl
 8005518:	3001      	adds	r0, #1
 800551a:	d0ad      	beq.n	8005478 <_printf_i+0x15c>
 800551c:	6823      	ldr	r3, [r4, #0]
 800551e:	079b      	lsls	r3, r3, #30
 8005520:	d413      	bmi.n	800554a <_printf_i+0x22e>
 8005522:	68e0      	ldr	r0, [r4, #12]
 8005524:	9b03      	ldr	r3, [sp, #12]
 8005526:	4298      	cmp	r0, r3
 8005528:	bfb8      	it	lt
 800552a:	4618      	movlt	r0, r3
 800552c:	e7a6      	b.n	800547c <_printf_i+0x160>
 800552e:	2301      	movs	r3, #1
 8005530:	4632      	mov	r2, r6
 8005532:	4649      	mov	r1, r9
 8005534:	4640      	mov	r0, r8
 8005536:	47d0      	blx	sl
 8005538:	3001      	adds	r0, #1
 800553a:	d09d      	beq.n	8005478 <_printf_i+0x15c>
 800553c:	3501      	adds	r5, #1
 800553e:	68e3      	ldr	r3, [r4, #12]
 8005540:	9903      	ldr	r1, [sp, #12]
 8005542:	1a5b      	subs	r3, r3, r1
 8005544:	42ab      	cmp	r3, r5
 8005546:	dcf2      	bgt.n	800552e <_printf_i+0x212>
 8005548:	e7eb      	b.n	8005522 <_printf_i+0x206>
 800554a:	2500      	movs	r5, #0
 800554c:	f104 0619 	add.w	r6, r4, #25
 8005550:	e7f5      	b.n	800553e <_printf_i+0x222>
 8005552:	bf00      	nop
 8005554:	08005895 	.word	0x08005895
 8005558:	080058a6 	.word	0x080058a6

0800555c <memmove>:
 800555c:	4288      	cmp	r0, r1
 800555e:	b510      	push	{r4, lr}
 8005560:	eb01 0402 	add.w	r4, r1, r2
 8005564:	d902      	bls.n	800556c <memmove+0x10>
 8005566:	4284      	cmp	r4, r0
 8005568:	4623      	mov	r3, r4
 800556a:	d807      	bhi.n	800557c <memmove+0x20>
 800556c:	1e43      	subs	r3, r0, #1
 800556e:	42a1      	cmp	r1, r4
 8005570:	d008      	beq.n	8005584 <memmove+0x28>
 8005572:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005576:	f803 2f01 	strb.w	r2, [r3, #1]!
 800557a:	e7f8      	b.n	800556e <memmove+0x12>
 800557c:	4402      	add	r2, r0
 800557e:	4601      	mov	r1, r0
 8005580:	428a      	cmp	r2, r1
 8005582:	d100      	bne.n	8005586 <memmove+0x2a>
 8005584:	bd10      	pop	{r4, pc}
 8005586:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800558a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800558e:	e7f7      	b.n	8005580 <memmove+0x24>

08005590 <_sbrk_r>:
 8005590:	b538      	push	{r3, r4, r5, lr}
 8005592:	4d06      	ldr	r5, [pc, #24]	@ (80055ac <_sbrk_r+0x1c>)
 8005594:	2300      	movs	r3, #0
 8005596:	4604      	mov	r4, r0
 8005598:	4608      	mov	r0, r1
 800559a:	602b      	str	r3, [r5, #0]
 800559c:	f7fc fa7e 	bl	8001a9c <_sbrk>
 80055a0:	1c43      	adds	r3, r0, #1
 80055a2:	d102      	bne.n	80055aa <_sbrk_r+0x1a>
 80055a4:	682b      	ldr	r3, [r5, #0]
 80055a6:	b103      	cbz	r3, 80055aa <_sbrk_r+0x1a>
 80055a8:	6023      	str	r3, [r4, #0]
 80055aa:	bd38      	pop	{r3, r4, r5, pc}
 80055ac:	20000504 	.word	0x20000504

080055b0 <memcpy>:
 80055b0:	440a      	add	r2, r1
 80055b2:	4291      	cmp	r1, r2
 80055b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80055b8:	d100      	bne.n	80055bc <memcpy+0xc>
 80055ba:	4770      	bx	lr
 80055bc:	b510      	push	{r4, lr}
 80055be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055c6:	4291      	cmp	r1, r2
 80055c8:	d1f9      	bne.n	80055be <memcpy+0xe>
 80055ca:	bd10      	pop	{r4, pc}

080055cc <_realloc_r>:
 80055cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055d0:	4680      	mov	r8, r0
 80055d2:	4615      	mov	r5, r2
 80055d4:	460c      	mov	r4, r1
 80055d6:	b921      	cbnz	r1, 80055e2 <_realloc_r+0x16>
 80055d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055dc:	4611      	mov	r1, r2
 80055de:	f7ff bc4b 	b.w	8004e78 <_malloc_r>
 80055e2:	b92a      	cbnz	r2, 80055f0 <_realloc_r+0x24>
 80055e4:	f7ff fbdc 	bl	8004da0 <_free_r>
 80055e8:	2400      	movs	r4, #0
 80055ea:	4620      	mov	r0, r4
 80055ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055f0:	f000 f81a 	bl	8005628 <_malloc_usable_size_r>
 80055f4:	4285      	cmp	r5, r0
 80055f6:	4606      	mov	r6, r0
 80055f8:	d802      	bhi.n	8005600 <_realloc_r+0x34>
 80055fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80055fe:	d8f4      	bhi.n	80055ea <_realloc_r+0x1e>
 8005600:	4629      	mov	r1, r5
 8005602:	4640      	mov	r0, r8
 8005604:	f7ff fc38 	bl	8004e78 <_malloc_r>
 8005608:	4607      	mov	r7, r0
 800560a:	2800      	cmp	r0, #0
 800560c:	d0ec      	beq.n	80055e8 <_realloc_r+0x1c>
 800560e:	42b5      	cmp	r5, r6
 8005610:	462a      	mov	r2, r5
 8005612:	4621      	mov	r1, r4
 8005614:	bf28      	it	cs
 8005616:	4632      	movcs	r2, r6
 8005618:	f7ff ffca 	bl	80055b0 <memcpy>
 800561c:	4621      	mov	r1, r4
 800561e:	4640      	mov	r0, r8
 8005620:	f7ff fbbe 	bl	8004da0 <_free_r>
 8005624:	463c      	mov	r4, r7
 8005626:	e7e0      	b.n	80055ea <_realloc_r+0x1e>

08005628 <_malloc_usable_size_r>:
 8005628:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800562c:	1f18      	subs	r0, r3, #4
 800562e:	2b00      	cmp	r3, #0
 8005630:	bfbc      	itt	lt
 8005632:	580b      	ldrlt	r3, [r1, r0]
 8005634:	18c0      	addlt	r0, r0, r3
 8005636:	4770      	bx	lr

08005638 <_init>:
 8005638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800563a:	bf00      	nop
 800563c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800563e:	bc08      	pop	{r3}
 8005640:	469e      	mov	lr, r3
 8005642:	4770      	bx	lr

08005644 <_fini>:
 8005644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005646:	bf00      	nop
 8005648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800564a:	bc08      	pop	{r3}
 800564c:	469e      	mov	lr, r3
 800564e:	4770      	bx	lr
