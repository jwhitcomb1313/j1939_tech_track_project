
STM32L432KC Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005268  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  080053f8  080053f8  000063f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005858  08005858  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005858  08005858  00006858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005860  08005860  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005860  08005860  00006860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005864  08005864  00006864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005868  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  2000005c  080058c4  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  080058c4  000072d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da17  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021b2  00000000  00000000  00014aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be8  00000000  00000000  00016c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000927  00000000  00000000  00017840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020fb4  00000000  00000000  00018167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef0c  00000000  00000000  0003911b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c249f  00000000  00000000  00048027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010a4c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003504  00000000  00000000  0010a50c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  0010da10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080053e0 	.word	0x080053e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080053e0 	.word	0x080053e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <canspi_Init>:

    @{
*/
/******************************************************************************/
bool canspi_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
    // {
    //     return false;
    // }
        
    /* Change mode as configuration mode */
    if(!MCP2515_SetConfigurationMode())
 8000564:	f000 fe64 	bl	8001230 <MCP2515_SetConfigurationMode>
 8000568:	4603      	mov	r3, r0
 800056a:	f083 0301 	eor.w	r3, r3, #1
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <canspi_Init+0x18>
    {
        return false;
 8000574:	2300      	movs	r3, #0
 8000576:	e012      	b.n	800059e <canspi_Init+0x3e>
    * 16tq = 2us = 500kbps
    */
    
    // MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
    /* 00(SJW 1tq) 000000 */  
    MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 8000578:	2100      	movs	r1, #0
 800057a:	202a      	movs	r0, #42	@ 0x2a
 800057c:	f000 ff04 	bl	8001388 <MCP2515_WriteByte>
    
    /* 1 1 100(5tq) 101(6tq) */  
    MCP2515_WriteByte(MCP2515_CNF2, 0xBF);
 8000580:	21bf      	movs	r1, #191	@ 0xbf
 8000582:	2029      	movs	r0, #41	@ 0x29
 8000584:	f000 ff00 	bl	8001388 <MCP2515_WriteByte>
    
    /* 1 0 000 011(4tq) */  
    MCP2515_WriteByte(MCP2515_CNF3, 0x02);   
 8000588:	2102      	movs	r1, #2
 800058a:	2028      	movs	r0, #40	@ 0x28
 800058c:	f000 fefc 	bl	8001388 <MCP2515_WriteByte>

    MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8000590:	2100      	movs	r1, #0
 8000592:	200f      	movs	r0, #15
 8000594:	f000 fef8 	bl	8001388 <MCP2515_WriteByte>
    MCP2515_SetNormalMode(); 
 8000598:	f000 fea2 	bl	80012e0 <MCP2515_SetNormalMode>
    return true; 
 800059c:	2301      	movs	r3, #1
}
 800059e:	4618      	mov	r0, r3
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <canspi_TransmitMessage>:

    @{
*/
/******************************************************************************/
uint8_t canspi_TransmitMessage(can_msg_t *can_message)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b08c      	sub	sp, #48	@ 0x30
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
    char buf[30]; 
    uint8_t retVal = 0; 
 80005aa:	2300      	movs	r3, #0
 80005ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    id_reg_t regId;
    // char buf[20]; 
    regId.SIDH = 0; 
 80005b0:	2300      	movs	r3, #0
 80005b2:	733b      	strb	r3, [r7, #12]
    regId.SIDL = 0; 
 80005b4:	2300      	movs	r3, #0
 80005b6:	737b      	strb	r3, [r7, #13]
    regId.EID8 = 0; 
 80005b8:	2300      	movs	r3, #0
 80005ba:	73bb      	strb	r3, [r7, #14]
    regId.EID0 = 0;  
 80005bc:	2300      	movs	r3, #0
 80005be:	73fb      	strb	r3, [r7, #15]

    ctrl_status_t control_status = MCP2515_GetControlStatus(); 
 80005c0:	f000 ff96 	bl	80014f0 <MCP2515_GetControlStatus>
 80005c4:	4603      	mov	r3, r0
 80005c6:	60bb      	str	r3, [r7, #8]

    canspi_ConvertIDToReg(can_message->frame.canId, &regId); 
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f107 020c 	add.w	r2, r7, #12
 80005d0:	4611      	mov	r1, r2
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 f937 	bl	8000846 <canspi_ConvertIDToReg>

    if(control_status.TXB0REQ != 1)
 80005d8:	7a3b      	ldrb	r3, [r7, #8]
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d10f      	bne.n	8000604 <canspi_TransmitMessage+0x62>
    {
        //Load data into the buffer
        MCP2515_WriteTxBuffer(MCP2515_LOAD_TXB0SIDH, &(regId.SIDH), &(can_message->frame.data0), can_message->frame.dlc); 
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	1d5a      	adds	r2, r3, #5
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	791b      	ldrb	r3, [r3, #4]
 80005ec:	f107 010c 	add.w	r1, r7, #12
 80005f0:	2040      	movs	r0, #64	@ 0x40
 80005f2:	f000 feed 	bl	80013d0 <MCP2515_WriteTxBuffer>
        MCP2515_RequestToSend(MCP2515_RTS_TX0);
 80005f6:	2081      	movs	r0, #129	@ 0x81
 80005f8:	f000 ff96 	bl	8001528 <MCP2515_RequestToSend>
        retVal = 1;  
 80005fc:	2301      	movs	r3, #1
 80005fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000602:	e02a      	b.n	800065a <canspi_TransmitMessage+0xb8>
    }

    else if(control_status.TXB1REQ != 1)
 8000604:	7a3b      	ldrb	r3, [r7, #8]
 8000606:	f003 0310 	and.w	r3, r3, #16
 800060a:	b2db      	uxtb	r3, r3
 800060c:	2b00      	cmp	r3, #0
 800060e:	d10f      	bne.n	8000630 <canspi_TransmitMessage+0x8e>
    {
        //Load data into the buffer
        MCP2515_WriteTxBuffer(MCP2515_LOAD_TXB1SIDH, &(regId.SIDH), &(can_message->frame.data0), can_message->frame.dlc);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	1d5a      	adds	r2, r3, #5
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	791b      	ldrb	r3, [r3, #4]
 8000618:	f107 010c 	add.w	r1, r7, #12
 800061c:	2042      	movs	r0, #66	@ 0x42
 800061e:	f000 fed7 	bl	80013d0 <MCP2515_WriteTxBuffer>
        MCP2515_RequestToSend(MCP2515_RTS_TX1);
 8000622:	2082      	movs	r0, #130	@ 0x82
 8000624:	f000 ff80 	bl	8001528 <MCP2515_RequestToSend>
        retVal = 1; 
 8000628:	2301      	movs	r3, #1
 800062a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800062e:	e014      	b.n	800065a <canspi_TransmitMessage+0xb8>
    }

    else if(control_status.TXB2REQ != 1)
 8000630:	7a3b      	ldrb	r3, [r7, #8]
 8000632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000636:	b2db      	uxtb	r3, r3
 8000638:	2b00      	cmp	r3, #0
 800063a:	d10e      	bne.n	800065a <canspi_TransmitMessage+0xb8>
    {
        //Load data into the buffer
        MCP2515_WriteTxBuffer(MCP2515_LOAD_TXB2SIDH, &(regId.SIDH), &(can_message->frame.data0), can_message->frame.dlc);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	1d5a      	adds	r2, r3, #5
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	791b      	ldrb	r3, [r3, #4]
 8000644:	f107 010c 	add.w	r1, r7, #12
 8000648:	2044      	movs	r0, #68	@ 0x44
 800064a:	f000 fec1 	bl	80013d0 <MCP2515_WriteTxBuffer>
        MCP2515_RequestToSend(MCP2515_RTS_TX2);
 800064e:	2084      	movs	r0, #132	@ 0x84
 8000650:	f000 ff6a 	bl	8001528 <MCP2515_RequestToSend>
        retVal = 1; 
 8000654:	2301      	movs	r3, #1
 8000656:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return retVal;
 800065a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}    
 800065e:	4618      	mov	r0, r3
 8000660:	3730      	adds	r7, #48	@ 0x30
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <canspi_ReceiveMessage>:

    @{
*/
/******************************************************************************/
uint8_t canspi_ReceiveMessage(can_msg_t *canMsg)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	b08a      	sub	sp, #40	@ 0x28
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
    uint8_t retVal = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    rx_reg_t rxReg;
    rx_status_t rxStatus;
    id_reg_t idReg;
    uint32_t idExt;  
    uint8_t readByte = 0; 
 8000674:	2300      	movs	r3, #0
 8000676:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    rxStatus = MCP2515_GetRxStatus();
 800067a:	f000 ff1d 	bl	80014b8 <MCP2515_GetRxStatus>
 800067e:	4603      	mov	r3, r0
 8000680:	617b      	str	r3, [r7, #20]
    /* Check receive buffer */
    if (rxStatus.rxBuffer != 0)
 8000682:	7d3b      	ldrb	r3, [r7, #20]
 8000684:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000688:	b2db      	uxtb	r3, r3
 800068a:	2b00      	cmp	r3, #0
 800068c:	f000 808a 	beq.w	80007a4 <canspi_ReceiveMessage+0x13e>
    {
        /* finding buffer which has a message */
        if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 8000690:	7d3b      	ldrb	r3, [r7, #20]
 8000692:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000696:	b2db      	uxtb	r3, r3
 8000698:	2b40      	cmp	r3, #64	@ 0x40
 800069a:	bf0c      	ite	eq
 800069c:	2301      	moveq	r3, #1
 800069e:	2300      	movne	r3, #0
 80006a0:	b2da      	uxtb	r2, r3
 80006a2:	7d3b      	ldrb	r3, [r7, #20]
 80006a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80006ac:	bf0c      	ite	eq
 80006ae:	2301      	moveq	r3, #1
 80006b0:	2300      	movne	r3, #0
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	4313      	orrs	r3, r2
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d019      	beq.n	80006f0 <canspi_ReceiveMessage+0x8a>
            // rxReg.rx_reg_array[9] = MCP2515_ReadByte(0x6A);
            // rxReg.rx_reg_array[10] = MCP2515_ReadByte(0x6B);
            // rxReg.rx_reg_array[11] = MCP2515_ReadByte(0x6C);
            // rxReg.rx_reg_array[12] = MCP2515_ReadByte(0x6D);

            MCP2515_ReadMultipleBytes(MCP2515_RXB0SIDH, rxReg.rx_reg_array, 13);
 80006bc:	f107 0318 	add.w	r3, r7, #24
 80006c0:	220d      	movs	r2, #13
 80006c2:	4619      	mov	r1, r3
 80006c4:	2061      	movs	r0, #97	@ 0x61
 80006c6:	f000 fed3 	bl	8001470 <MCP2515_ReadMultipleBytes>
            readByte = MCP2515_ReadByte(MCP2515_CANINTF);
 80006ca:	202c      	movs	r0, #44	@ 0x2c
 80006cc:	f000 feac 	bl	8001428 <MCP2515_ReadByte>
 80006d0:	4603      	mov	r3, r0
 80006d2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            //Clear interrupt flag: bit 0
            readByte &= ~(1);
 80006d6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80006da:	f023 0301 	bic.w	r3, r3, #1
 80006de:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            MCP2515_WriteByte(MCP2515_CANINTF, readByte);
 80006e2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80006e6:	4619      	mov	r1, r3
 80006e8:	202c      	movs	r0, #44	@ 0x2c
 80006ea:	f000 fe4d 	bl	8001388 <MCP2515_WriteByte>
 80006ee:	e01e      	b.n	800072e <canspi_ReceiveMessage+0xc8>
        }
        else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 80006f0:	7d3b      	ldrb	r3, [r7, #20]
 80006f2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	2b80      	cmp	r3, #128	@ 0x80
 80006fa:	d118      	bne.n	800072e <canspi_ReceiveMessage+0xc8>
            // rxReg.rx_reg_array[8] = MCP2515_ReadByte(0x79);
            // rxReg.rx_reg_array[9] = MCP2515_ReadByte(0x7A);
            // rxReg.rx_reg_array[10] = MCP2515_ReadByte(0x7B);
            // rxReg.rx_reg_array[11] = MCP2515_ReadByte(0x7C);
            // rxReg.rx_reg_array[12] = MCP2515_ReadByte(0x7D);
            MCP2515_ReadMultipleBytes(MCP2515_RXB1SIDH, rxReg.rx_reg_array, 13);
 80006fc:	f107 0318 	add.w	r3, r7, #24
 8000700:	220d      	movs	r2, #13
 8000702:	4619      	mov	r1, r3
 8000704:	2071      	movs	r0, #113	@ 0x71
 8000706:	f000 feb3 	bl	8001470 <MCP2515_ReadMultipleBytes>
            readByte = MCP2515_ReadByte(MCP2515_CANINTF);
 800070a:	202c      	movs	r0, #44	@ 0x2c
 800070c:	f000 fe8c 	bl	8001428 <MCP2515_ReadByte>
 8000710:	4603      	mov	r3, r0
 8000712:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            //Clear interrupt flag: bit 1
            readByte &= ~(1 << 1);
 8000716:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800071a:	f023 0302 	bic.w	r3, r3, #2
 800071e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            MCP2515_WriteByte(MCP2515_CANINTF, readByte); 
 8000722:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000726:	4619      	mov	r1, r3
 8000728:	202c      	movs	r0, #44	@ 0x2c
 800072a:	f000 fe2d 	bl	8001388 <MCP2515_WriteByte>
        }


        canspi_ReadRegIdPrint(idReg);
 800072e:	6938      	ldr	r0, [r7, #16]
 8000730:	f000 fa22 	bl	8000b78 <canspi_ReadRegIdPrint>
        idReg.SIDH = rxReg.RXBnSIDH; 
 8000734:	7e3b      	ldrb	r3, [r7, #24]
 8000736:	743b      	strb	r3, [r7, #16]
        idReg.SIDL = rxReg.RXBnSIDL; 
 8000738:	7e7b      	ldrb	r3, [r7, #25]
 800073a:	747b      	strb	r3, [r7, #17]
        idReg.EID8 = rxReg.RXBnEID8; 
 800073c:	7ebb      	ldrb	r3, [r7, #26]
 800073e:	74bb      	strb	r3, [r7, #18]
        idReg.EID0 = rxReg.RXBnEID0; 
 8000740:	7efb      	ldrb	r3, [r7, #27]
 8000742:	74fb      	strb	r3, [r7, #19]
         
        canspi_ConvertRegToID(idReg, &idExt); 
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	4619      	mov	r1, r3
 800074a:	6938      	ldr	r0, [r7, #16]
 800074c:	f000 f830 	bl	80007b0 <canspi_ConvertRegToID>
        canspi_ReadRx0RegisterPrint(); 
 8000750:	f000 fa8c 	bl	8000c6c <canspi_ReadRx0RegisterPrint>
        canspi_ReadRx1RegisterPrint(); 
 8000754:	f000 fb42 	bl	8000ddc <canspi_ReadRx1RegisterPrint>
        canMsg->frame.canId     = idExt;
 8000758:	68fa      	ldr	r2, [r7, #12]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	601a      	str	r2, [r3, #0]
        canMsg->frame.dlc       = rxReg.RXBnDLC;
 800075e:	7f3a      	ldrb	r2, [r7, #28]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	711a      	strb	r2, [r3, #4]
        canMsg->frame.data0     = rxReg.RXBnD0;
 8000764:	7f7a      	ldrb	r2, [r7, #29]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	715a      	strb	r2, [r3, #5]
        canMsg->frame.data1     = rxReg.RXBnD1;
 800076a:	7fba      	ldrb	r2, [r7, #30]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	719a      	strb	r2, [r3, #6]
        canMsg->frame.data2     = rxReg.RXBnD2;
 8000770:	7ffa      	ldrb	r2, [r7, #31]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	71da      	strb	r2, [r3, #7]
        canMsg->frame.data3     = rxReg.RXBnD3;
 8000776:	f897 2020 	ldrb.w	r2, [r7, #32]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	721a      	strb	r2, [r3, #8]
        canMsg->frame.data4     = rxReg.RXBnD4;
 800077e:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	725a      	strb	r2, [r3, #9]
        canMsg->frame.data5     = rxReg.RXBnD5;
 8000786:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	729a      	strb	r2, [r3, #10]
        canMsg->frame.data6     = rxReg.RXBnD6;
 800078e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	72da      	strb	r2, [r3, #11]
        canMsg->frame.data7     = rxReg.RXBnD7;
 8000796:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	731a      	strb	r2, [r3, #12]

        retVal = 1;
 800079e:	2301      	movs	r3, #1
 80007a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    return retVal; 
 80007a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3728      	adds	r7, #40	@ 0x28
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <canspi_ConvertRegToID>:

    @{
*/
/******************************************************************************/
void canspi_ConvertRegToID(id_reg_t regId, uint32_t *canId)
{   
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
    // Temp variable type for unpacking the registers
    can_ext_id_t extId;  
    // Ext ID 28:24
    extId.frame.priority = ((regId.SIDH & ID_MASK_PRIORITY) >> 5); 
 80007ba:	793b      	ldrb	r3, [r7, #4]
 80007bc:	095b      	lsrs	r3, r3, #5
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	f003 0307 	and.w	r3, r3, #7
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	7b3b      	ldrb	r3, [r7, #12]
 80007c8:	f362 0302 	bfi	r3, r2, #0, #3
 80007cc:	733b      	strb	r3, [r7, #12]
    extId.frame.edp = ((regId.SIDH & ID_MASK_EDP) >> 4);
 80007ce:	793b      	ldrb	r3, [r7, #4]
 80007d0:	111b      	asrs	r3, r3, #4
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	7b3b      	ldrb	r3, [r7, #12]
 80007da:	f362 03c3 	bfi	r3, r2, #3, #1
 80007de:	733b      	strb	r3, [r7, #12]
    extId.frame.dp = ((regId.SIDH & ID_MASK_DP) >> 3);  
 80007e0:	793b      	ldrb	r3, [r7, #4]
 80007e2:	10db      	asrs	r3, r3, #3
 80007e4:	f003 0301 	and.w	r3, r3, #1
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	7b3b      	ldrb	r3, [r7, #12]
 80007ec:	f362 1304 	bfi	r3, r2, #4, #1
 80007f0:	733b      	strb	r3, [r7, #12]

    // Ext ID 23:16
    extId.frame.pf = ((((regId.SIDH & ID_MASK_PF_MSB) << 5)    |
 80007f2:	793b      	ldrb	r3, [r7, #4]
 80007f4:	015b      	lsls	r3, r3, #5
 80007f6:	b25a      	sxtb	r2, r3
                        (regId.SIDL & ID_MASK_PF_LSBUB) >> 3)   |
 80007f8:	797b      	ldrb	r3, [r7, #5]
 80007fa:	10db      	asrs	r3, r3, #3
 80007fc:	b25b      	sxtb	r3, r3
 80007fe:	f003 031c 	and.w	r3, r3, #28
 8000802:	b25b      	sxtb	r3, r3
    extId.frame.pf = ((((regId.SIDH & ID_MASK_PF_MSB) << 5)    |
 8000804:	4313      	orrs	r3, r2
 8000806:	b25a      	sxtb	r2, r3
                        (regId.SIDL & ID_MASK_PF_LSBLB));
 8000808:	797b      	ldrb	r3, [r7, #5]
 800080a:	b25b      	sxtb	r3, r3
 800080c:	f003 0303 	and.w	r3, r3, #3
 8000810:	b25b      	sxtb	r3, r3
                        (regId.SIDL & ID_MASK_PF_LSBUB) >> 3)   |
 8000812:	4313      	orrs	r3, r2
 8000814:	b25b      	sxtb	r3, r3
 8000816:	b2da      	uxtb	r2, r3
    extId.frame.pf = ((((regId.SIDH & ID_MASK_PF_MSB) << 5)    |
 8000818:	89bb      	ldrh	r3, [r7, #12]
 800081a:	f362 134c 	bfi	r3, r2, #5, #8
 800081e:	81bb      	strh	r3, [r7, #12]
    // Ext ID 15:8
    extId.frame.ps = regId.EID8; 
 8000820:	79ba      	ldrb	r2, [r7, #6]
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	f362 3354 	bfi	r3, r2, #13, #8
 8000828:	60fb      	str	r3, [r7, #12]
    // Ext ID 7:0
    extId.frame.source_address = regId.EID0; 
 800082a:	79fa      	ldrb	r2, [r7, #7]
 800082c:	89fb      	ldrh	r3, [r7, #14]
 800082e:	f362 134c 	bfi	r3, r2, #5, #8
 8000832:	81fb      	strh	r3, [r7, #14]

    *canId = extId.id; 
 8000834:	68fa      	ldr	r2, [r7, #12]
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	601a      	str	r2, [r3, #0]
}
 800083a:	bf00      	nop
 800083c:	3714      	adds	r7, #20
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr

08000846 <canspi_ConvertIDToReg>:

    @{
*/
/******************************************************************************/
void canspi_ConvertIDToReg(uint32_t canId, id_reg_t *regId)
{
 8000846:	b480      	push	{r7}
 8000848:	b085      	sub	sp, #20
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
 800084e:	6039      	str	r1, [r7, #0]
    can_ext_id_t extId; 
    extId.id = canId; 
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	60fb      	str	r3, [r7, #12]
    // SIDH 7:5
    regId->SIDH = (extId.frame.priority << 5); 
 8000854:	7b3b      	ldrb	r3, [r7, #12]
 8000856:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800085a:	b2db      	uxtb	r3, r3
 800085c:	015b      	lsls	r3, r3, #5
 800085e:	b2da      	uxtb	r2, r3
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	701a      	strb	r2, [r3, #0]
    // SIDH 4:4 
    regId->SIDH |= (extId.frame.edp << 4);
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	b25a      	sxtb	r2, r3
 800086a:	7b3b      	ldrb	r3, [r7, #12]
 800086c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000870:	b2db      	uxtb	r3, r3
 8000872:	011b      	lsls	r3, r3, #4
 8000874:	b25b      	sxtb	r3, r3
 8000876:	4313      	orrs	r3, r2
 8000878:	b25b      	sxtb	r3, r3
 800087a:	b2da      	uxtb	r2, r3
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	701a      	strb	r2, [r3, #0]
    // SIDH 3:3
    regId->SIDH |= (extId.frame.dp << 3);
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	b25a      	sxtb	r2, r3
 8000886:	7b3b      	ldrb	r3, [r7, #12]
 8000888:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800088c:	b2db      	uxtb	r3, r3
 800088e:	00db      	lsls	r3, r3, #3
 8000890:	b25b      	sxtb	r3, r3
 8000892:	4313      	orrs	r3, r2
 8000894:	b25b      	sxtb	r3, r3
 8000896:	b2da      	uxtb	r2, r3
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	701a      	strb	r2, [r3, #0]
    // SIDH 2:0 
    regId->SIDH |= ((extId.frame.pf & REG_MASK_PF_MSB) >> 5);
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	781a      	ldrb	r2, [r3, #0]
 80008a0:	89bb      	ldrh	r3, [r7, #12]
 80008a2:	f3c3 1347 	ubfx	r3, r3, #5, #8
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	095b      	lsrs	r3, r3, #5
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	4313      	orrs	r3, r2
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	701a      	strb	r2, [r3, #0]

    // SIDL 7:5 
    regId->SIDL |= ((extId.frame.pf & REG_MASK_PF_LSBUB) << 3); 
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	785b      	ldrb	r3, [r3, #1]
 80008b8:	b25a      	sxtb	r2, r3
 80008ba:	89bb      	ldrh	r3, [r7, #12]
 80008bc:	f3c3 1347 	ubfx	r3, r3, #5, #8
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	00db      	lsls	r3, r3, #3
 80008c4:	b25b      	sxtb	r3, r3
 80008c6:	f023 031f 	bic.w	r3, r3, #31
 80008ca:	b25b      	sxtb	r3, r3
 80008cc:	4313      	orrs	r3, r2
 80008ce:	b25b      	sxtb	r3, r3
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	705a      	strb	r2, [r3, #1]
    // SIDL 3:3 Always set the Ext ID bit high
    regId->SIDL |= REG_MASK_IDE; 
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	785b      	ldrb	r3, [r3, #1]
 80008da:	f043 0308 	orr.w	r3, r3, #8
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	705a      	strb	r2, [r3, #1]
    // SIDL 2:0 
    regId->SIDL |= ((extId.frame.pf & REG_MASK_PF_LSBLB));
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	785b      	ldrb	r3, [r3, #1]
 80008e8:	b25a      	sxtb	r2, r3
 80008ea:	89bb      	ldrh	r3, [r7, #12]
 80008ec:	f3c3 1347 	ubfx	r3, r3, #5, #8
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	b25b      	sxtb	r3, r3
 80008f4:	f003 0303 	and.w	r3, r3, #3
 80008f8:	b25b      	sxtb	r3, r3
 80008fa:	4313      	orrs	r3, r2
 80008fc:	b25b      	sxtb	r3, r3
 80008fe:	b2da      	uxtb	r2, r3
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	705a      	strb	r2, [r3, #1]
    
    // EID8 7:0
    regId->EID8 = extId.frame.ps; 
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	f3c3 3347 	ubfx	r3, r3, #13, #8
 800090a:	b2da      	uxtb	r2, r3
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	709a      	strb	r2, [r3, #2]

    // EID0 7:0
    regId->EID0 = extId.frame.source_address;
 8000910:	89fb      	ldrh	r3, [r7, #14]
 8000912:	f3c3 1347 	ubfx	r3, r3, #5, #8
 8000916:	b2da      	uxtb	r2, r3
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	70da      	strb	r2, [r3, #3]
}
 800091c:	bf00      	nop
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <canspi_CanLoopTest>:




void canspi_CanLoopTest(can_msg_t canMsg)
{
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b08f      	sub	sp, #60	@ 0x3c
 800092c:	af00      	add	r7, sp, #0
 800092e:	463c      	mov	r4, r7
 8000930:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    char printStr[30]; 
    can_ext_id_t tempId;
    tempId.id = canMsg.frame.canId; 
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	617b      	str	r3, [r7, #20]

    // sprintf(printStr, "edp = %x\r\n", tempId.frame.edp); 
    // uart_serial_print(printStr, sizeof(printStr));
    // memset(printStr, '\0', sizeof(printStr));

    sprintf(printStr, "pgn = %x%x\r\n", tempId.frame.pf, tempId.frame.ps); 
 8000938:	8abb      	ldrh	r3, [r7, #20]
 800093a:	f3c3 1347 	ubfx	r3, r3, #5, #8
 800093e:	b2db      	uxtb	r3, r3
 8000940:	461a      	mov	r2, r3
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	f3c3 3347 	ubfx	r3, r3, #13, #8
 8000948:	b2db      	uxtb	r3, r3
 800094a:	f107 0018 	add.w	r0, r7, #24
 800094e:	497e      	ldr	r1, [pc, #504]	@ (8000b48 <canspi_CanLoopTest+0x220>)
 8000950:	f004 f8a6 	bl	8004aa0 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 8000954:	f107 0318 	add.w	r3, r7, #24
 8000958:	211e      	movs	r1, #30
 800095a:	4618      	mov	r0, r3
 800095c:	f000 ff96 	bl	800188c <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 8000960:	f107 0318 	add.w	r3, r7, #24
 8000964:	221e      	movs	r2, #30
 8000966:	2100      	movs	r1, #0
 8000968:	4618      	mov	r0, r3
 800096a:	f004 f8b9 	bl	8004ae0 <memset>

    sprintf(printStr, "source address = %x\r\n\n", tempId.frame.source_address); 
 800096e:	8afb      	ldrh	r3, [r7, #22]
 8000970:	f3c3 1347 	ubfx	r3, r3, #5, #8
 8000974:	b2db      	uxtb	r3, r3
 8000976:	461a      	mov	r2, r3
 8000978:	f107 0318 	add.w	r3, r7, #24
 800097c:	4973      	ldr	r1, [pc, #460]	@ (8000b4c <canspi_CanLoopTest+0x224>)
 800097e:	4618      	mov	r0, r3
 8000980:	f004 f88e 	bl	8004aa0 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 8000984:	f107 0318 	add.w	r3, r7, #24
 8000988:	211e      	movs	r1, #30
 800098a:	4618      	mov	r0, r3
 800098c:	f000 ff7e 	bl	800188c <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 8000990:	f107 0318 	add.w	r3, r7, #24
 8000994:	221e      	movs	r2, #30
 8000996:	2100      	movs	r1, #0
 8000998:	4618      	mov	r0, r3
 800099a:	f004 f8a1 	bl	8004ae0 <memset>

    sprintf(printStr, "**** DATA ****\r\n"); 
 800099e:	f107 0318 	add.w	r3, r7, #24
 80009a2:	496b      	ldr	r1, [pc, #428]	@ (8000b50 <canspi_CanLoopTest+0x228>)
 80009a4:	4618      	mov	r0, r3
 80009a6:	f004 f87b 	bl	8004aa0 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 80009aa:	f107 0318 	add.w	r3, r7, #24
 80009ae:	211e      	movs	r1, #30
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 ff6b 	bl	800188c <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr)); 
 80009b6:	f107 0318 	add.w	r3, r7, #24
 80009ba:	221e      	movs	r2, #30
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f004 f88e 	bl	8004ae0 <memset>

    sprintf(printStr, "dlc = %x\r\n", canMsg.frame.dlc); 
 80009c4:	793b      	ldrb	r3, [r7, #4]
 80009c6:	461a      	mov	r2, r3
 80009c8:	f107 0318 	add.w	r3, r7, #24
 80009cc:	4961      	ldr	r1, [pc, #388]	@ (8000b54 <canspi_CanLoopTest+0x22c>)
 80009ce:	4618      	mov	r0, r3
 80009d0:	f004 f866 	bl	8004aa0 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 80009d4:	f107 0318 	add.w	r3, r7, #24
 80009d8:	211e      	movs	r1, #30
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 ff56 	bl	800188c <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 80009e0:	f107 0318 	add.w	r3, r7, #24
 80009e4:	221e      	movs	r2, #30
 80009e6:	2100      	movs	r1, #0
 80009e8:	4618      	mov	r0, r3
 80009ea:	f004 f879 	bl	8004ae0 <memset>

    sprintf(printStr, "data0 = %x\r\n", canMsg.frame.data0); 
 80009ee:	797b      	ldrb	r3, [r7, #5]
 80009f0:	461a      	mov	r2, r3
 80009f2:	f107 0318 	add.w	r3, r7, #24
 80009f6:	4958      	ldr	r1, [pc, #352]	@ (8000b58 <canspi_CanLoopTest+0x230>)
 80009f8:	4618      	mov	r0, r3
 80009fa:	f004 f851 	bl	8004aa0 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 80009fe:	f107 0318 	add.w	r3, r7, #24
 8000a02:	211e      	movs	r1, #30
 8000a04:	4618      	mov	r0, r3
 8000a06:	f000 ff41 	bl	800188c <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 8000a0a:	f107 0318 	add.w	r3, r7, #24
 8000a0e:	221e      	movs	r2, #30
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f004 f864 	bl	8004ae0 <memset>

    sprintf(printStr, "data1 = %x\r\n", canMsg.frame.data1); 
 8000a18:	79bb      	ldrb	r3, [r7, #6]
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	f107 0318 	add.w	r3, r7, #24
 8000a20:	494e      	ldr	r1, [pc, #312]	@ (8000b5c <canspi_CanLoopTest+0x234>)
 8000a22:	4618      	mov	r0, r3
 8000a24:	f004 f83c 	bl	8004aa0 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 8000a28:	f107 0318 	add.w	r3, r7, #24
 8000a2c:	211e      	movs	r1, #30
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 ff2c 	bl	800188c <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 8000a34:	f107 0318 	add.w	r3, r7, #24
 8000a38:	221e      	movs	r2, #30
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f004 f84f 	bl	8004ae0 <memset>

    sprintf(printStr, "data2 = %x\r\n", canMsg.frame.data2); 
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	461a      	mov	r2, r3
 8000a46:	f107 0318 	add.w	r3, r7, #24
 8000a4a:	4945      	ldr	r1, [pc, #276]	@ (8000b60 <canspi_CanLoopTest+0x238>)
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f004 f827 	bl	8004aa0 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 8000a52:	f107 0318 	add.w	r3, r7, #24
 8000a56:	211e      	movs	r1, #30
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f000 ff17 	bl	800188c <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 8000a5e:	f107 0318 	add.w	r3, r7, #24
 8000a62:	221e      	movs	r2, #30
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f004 f83a 	bl	8004ae0 <memset>

    sprintf(printStr, "data3 = %x\r\n", canMsg.frame.data3); 
 8000a6c:	7a3b      	ldrb	r3, [r7, #8]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	f107 0318 	add.w	r3, r7, #24
 8000a74:	493b      	ldr	r1, [pc, #236]	@ (8000b64 <canspi_CanLoopTest+0x23c>)
 8000a76:	4618      	mov	r0, r3
 8000a78:	f004 f812 	bl	8004aa0 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 8000a7c:	f107 0318 	add.w	r3, r7, #24
 8000a80:	211e      	movs	r1, #30
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 ff02 	bl	800188c <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 8000a88:	f107 0318 	add.w	r3, r7, #24
 8000a8c:	221e      	movs	r2, #30
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f004 f825 	bl	8004ae0 <memset>

    sprintf(printStr, "data4 = %x\r\n", canMsg.frame.data4); 
 8000a96:	7a7b      	ldrb	r3, [r7, #9]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	f107 0318 	add.w	r3, r7, #24
 8000a9e:	4932      	ldr	r1, [pc, #200]	@ (8000b68 <canspi_CanLoopTest+0x240>)
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f003 fffd 	bl	8004aa0 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 8000aa6:	f107 0318 	add.w	r3, r7, #24
 8000aaa:	211e      	movs	r1, #30
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 feed 	bl	800188c <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 8000ab2:	f107 0318 	add.w	r3, r7, #24
 8000ab6:	221e      	movs	r2, #30
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f004 f810 	bl	8004ae0 <memset>

    sprintf(printStr, "data5 = %x\r\n", canMsg.frame.data5); 
 8000ac0:	7abb      	ldrb	r3, [r7, #10]
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	f107 0318 	add.w	r3, r7, #24
 8000ac8:	4928      	ldr	r1, [pc, #160]	@ (8000b6c <canspi_CanLoopTest+0x244>)
 8000aca:	4618      	mov	r0, r3
 8000acc:	f003 ffe8 	bl	8004aa0 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 8000ad0:	f107 0318 	add.w	r3, r7, #24
 8000ad4:	211e      	movs	r1, #30
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 fed8 	bl	800188c <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 8000adc:	f107 0318 	add.w	r3, r7, #24
 8000ae0:	221e      	movs	r2, #30
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f003 fffb 	bl	8004ae0 <memset>

    sprintf(printStr, "data6 = %x\r\n", canMsg.frame.data6); 
 8000aea:	7afb      	ldrb	r3, [r7, #11]
 8000aec:	461a      	mov	r2, r3
 8000aee:	f107 0318 	add.w	r3, r7, #24
 8000af2:	491f      	ldr	r1, [pc, #124]	@ (8000b70 <canspi_CanLoopTest+0x248>)
 8000af4:	4618      	mov	r0, r3
 8000af6:	f003 ffd3 	bl	8004aa0 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 8000afa:	f107 0318 	add.w	r3, r7, #24
 8000afe:	211e      	movs	r1, #30
 8000b00:	4618      	mov	r0, r3
 8000b02:	f000 fec3 	bl	800188c <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 8000b06:	f107 0318 	add.w	r3, r7, #24
 8000b0a:	221e      	movs	r2, #30
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f003 ffe6 	bl	8004ae0 <memset>

    sprintf(printStr, "data7 = %x\r\n\n", canMsg.frame.data7); 
 8000b14:	7b3b      	ldrb	r3, [r7, #12]
 8000b16:	461a      	mov	r2, r3
 8000b18:	f107 0318 	add.w	r3, r7, #24
 8000b1c:	4915      	ldr	r1, [pc, #84]	@ (8000b74 <canspi_CanLoopTest+0x24c>)
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f003 ffbe 	bl	8004aa0 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 8000b24:	f107 0318 	add.w	r3, r7, #24
 8000b28:	211e      	movs	r1, #30
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 feae 	bl	800188c <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 8000b30:	f107 0318 	add.w	r3, r7, #24
 8000b34:	221e      	movs	r2, #30
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f003 ffd1 	bl	8004ae0 <memset>
}
 8000b3e:	bf00      	nop
 8000b40:	373c      	adds	r7, #60	@ 0x3c
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd90      	pop	{r4, r7, pc}
 8000b46:	bf00      	nop
 8000b48:	080053f8 	.word	0x080053f8
 8000b4c:	08005408 	.word	0x08005408
 8000b50:	08005420 	.word	0x08005420
 8000b54:	08005434 	.word	0x08005434
 8000b58:	08005440 	.word	0x08005440
 8000b5c:	08005450 	.word	0x08005450
 8000b60:	08005460 	.word	0x08005460
 8000b64:	08005470 	.word	0x08005470
 8000b68:	08005480 	.word	0x08005480
 8000b6c:	08005490 	.word	0x08005490
 8000b70:	080054a0 	.word	0x080054a0
 8000b74:	080054b0 	.word	0x080054b0

08000b78 <canspi_ReadRegIdPrint>:
    uart_serial_print(buf, sizeof(buf));
    memset(buf, '\0', sizeof(buf));
}

void canspi_ReadRegIdPrint(id_reg_t regId)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b090      	sub	sp, #64	@ 0x40
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
    char bufprint[50]; 
    // uint8_t readByte = 0;  

    sprintf(bufprint, "\r\n\r\n***Rx Register Values***\r\n\n");
 8000b80:	f107 030c 	add.w	r3, r7, #12
 8000b84:	4934      	ldr	r1, [pc, #208]	@ (8000c58 <canspi_ReadRegIdPrint+0xe0>)
 8000b86:	4618      	mov	r0, r3
 8000b88:	f003 ff8a 	bl	8004aa0 <siprintf>
    uart_serial_print(bufprint, sizeof(bufprint));
 8000b8c:	f107 030c 	add.w	r3, r7, #12
 8000b90:	2132      	movs	r1, #50	@ 0x32
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 fe7a 	bl	800188c <uart_serial_print>
    memset(bufprint, '\0', sizeof(bufprint));
 8000b98:	f107 030c 	add.w	r3, r7, #12
 8000b9c:	2232      	movs	r2, #50	@ 0x32
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f003 ff9d 	bl	8004ae0 <memset>

    sprintf(bufprint, "\rRXB0SIDH = %x\r\n", regId.SIDH); 
 8000ba6:	793b      	ldrb	r3, [r7, #4]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	f107 030c 	add.w	r3, r7, #12
 8000bae:	492b      	ldr	r1, [pc, #172]	@ (8000c5c <canspi_ReadRegIdPrint+0xe4>)
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f003 ff75 	bl	8004aa0 <siprintf>
    uart_serial_print(bufprint, sizeof(bufprint));
 8000bb6:	f107 030c 	add.w	r3, r7, #12
 8000bba:	2132      	movs	r1, #50	@ 0x32
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f000 fe65 	bl	800188c <uart_serial_print>
    memset(bufprint, '\0', sizeof(bufprint));
 8000bc2:	f107 030c 	add.w	r3, r7, #12
 8000bc6:	2232      	movs	r2, #50	@ 0x32
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f003 ff88 	bl	8004ae0 <memset>

    sprintf(bufprint, "RXB0SIDL = %x\r\n", regId.SIDL); 
 8000bd0:	797b      	ldrb	r3, [r7, #5]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	f107 030c 	add.w	r3, r7, #12
 8000bd8:	4921      	ldr	r1, [pc, #132]	@ (8000c60 <canspi_ReadRegIdPrint+0xe8>)
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f003 ff60 	bl	8004aa0 <siprintf>
    uart_serial_print(bufprint, sizeof(bufprint));
 8000be0:	f107 030c 	add.w	r3, r7, #12
 8000be4:	2132      	movs	r1, #50	@ 0x32
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 fe50 	bl	800188c <uart_serial_print>
    memset(bufprint, '\0', sizeof(bufprint));
 8000bec:	f107 030c 	add.w	r3, r7, #12
 8000bf0:	2232      	movs	r2, #50	@ 0x32
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f003 ff73 	bl	8004ae0 <memset>

    sprintf(bufprint, "RXB0EID8 = %x\r\n", regId.EID8); 
 8000bfa:	79bb      	ldrb	r3, [r7, #6]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	f107 030c 	add.w	r3, r7, #12
 8000c02:	4918      	ldr	r1, [pc, #96]	@ (8000c64 <canspi_ReadRegIdPrint+0xec>)
 8000c04:	4618      	mov	r0, r3
 8000c06:	f003 ff4b 	bl	8004aa0 <siprintf>
    uart_serial_print(bufprint, sizeof(bufprint));
 8000c0a:	f107 030c 	add.w	r3, r7, #12
 8000c0e:	2132      	movs	r1, #50	@ 0x32
 8000c10:	4618      	mov	r0, r3
 8000c12:	f000 fe3b 	bl	800188c <uart_serial_print>
    memset(bufprint, '\0', sizeof(bufprint));
 8000c16:	f107 030c 	add.w	r3, r7, #12
 8000c1a:	2232      	movs	r2, #50	@ 0x32
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f003 ff5e 	bl	8004ae0 <memset>

    sprintf(bufprint, "RXB0EID0 = %x\r\n", regId.EID0); 
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	461a      	mov	r2, r3
 8000c28:	f107 030c 	add.w	r3, r7, #12
 8000c2c:	490e      	ldr	r1, [pc, #56]	@ (8000c68 <canspi_ReadRegIdPrint+0xf0>)
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f003 ff36 	bl	8004aa0 <siprintf>
    uart_serial_print(bufprint, sizeof(bufprint));
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	2132      	movs	r1, #50	@ 0x32
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 fe26 	bl	800188c <uart_serial_print>
    memset(bufprint, '\0', sizeof(bufprint));
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	2232      	movs	r2, #50	@ 0x32
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f003 ff49 	bl	8004ae0 <memset>
}
 8000c4e:	bf00      	nop
 8000c50:	3740      	adds	r7, #64	@ 0x40
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	080055b0 	.word	0x080055b0
 8000c5c:	080055d0 	.word	0x080055d0
 8000c60:	080055e4 	.word	0x080055e4
 8000c64:	080055f4 	.word	0x080055f4
 8000c68:	08005604 	.word	0x08005604

08000c6c <canspi_ReadRx0RegisterPrint>:
    // uart_serial_print(buf, sizeof(buf));
    // memset(buf, '\0', sizeof(buf));
}

void canspi_ReadRx0RegisterPrint(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	@ 0x28
 8000c70:	af00      	add	r7, sp, #0
    char buf[34]; 
    uint8_t readByte = 0;  
 8000c72:	2300      	movs	r3, #0
 8000c74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    sprintf(buf, "\r\n\r\n***RX0 Register Values***\r\n\n");
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	4951      	ldr	r1, [pc, #324]	@ (8000dc0 <canspi_ReadRx0RegisterPrint+0x154>)
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f003 ff0f 	bl	8004aa0 <siprintf>
    uart_serial_print(buf, sizeof(buf));
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	2122      	movs	r1, #34	@ 0x22
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 fe00 	bl	800188c <uart_serial_print>
    memset(buf, '\0', sizeof(buf));
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	2222      	movs	r2, #34	@ 0x22
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f003 ff24 	bl	8004ae0 <memset>

    readByte = MCP2515_ReadByte(MCP2515_RXB0SIDH);
 8000c98:	2061      	movs	r0, #97	@ 0x61
 8000c9a:	f000 fbc5 	bl	8001428 <MCP2515_ReadByte>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    sprintf(buf, "\rRXB0SIDH = %x\r\n", readByte); 
 8000ca4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	4946      	ldr	r1, [pc, #280]	@ (8000dc4 <canspi_ReadRx0RegisterPrint+0x158>)
 8000cac:	4618      	mov	r0, r3
 8000cae:	f003 fef7 	bl	8004aa0 <siprintf>
    uart_serial_print(buf, sizeof(buf));
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	2122      	movs	r1, #34	@ 0x22
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 fde8 	bl	800188c <uart_serial_print>
    memset(buf, '\0', sizeof(buf));
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	2222      	movs	r2, #34	@ 0x22
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f003 ff0c 	bl	8004ae0 <memset>

    readByte = MCP2515_ReadByte(MCP2515_RXB0SIDL);
 8000cc8:	2062      	movs	r0, #98	@ 0x62
 8000cca:	f000 fbad 	bl	8001428 <MCP2515_ReadByte>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    sprintf(buf, "RXB0SIDL = %x\r\n", readByte); 
 8000cd4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	493b      	ldr	r1, [pc, #236]	@ (8000dc8 <canspi_ReadRx0RegisterPrint+0x15c>)
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f003 fedf 	bl	8004aa0 <siprintf>
    uart_serial_print(buf, sizeof(buf));
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2122      	movs	r1, #34	@ 0x22
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 fdd0 	bl	800188c <uart_serial_print>
    memset(buf, '\0', sizeof(buf));
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	2222      	movs	r2, #34	@ 0x22
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f003 fef4 	bl	8004ae0 <memset>

    readByte = MCP2515_ReadByte(MCP2515_RXB0EID8);
 8000cf8:	2063      	movs	r0, #99	@ 0x63
 8000cfa:	f000 fb95 	bl	8001428 <MCP2515_ReadByte>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    sprintf(buf, "RXB0EID8 = %x\r\n", readByte); 
 8000d04:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	4930      	ldr	r1, [pc, #192]	@ (8000dcc <canspi_ReadRx0RegisterPrint+0x160>)
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f003 fec7 	bl	8004aa0 <siprintf>
    uart_serial_print(buf, sizeof(buf));
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	2122      	movs	r1, #34	@ 0x22
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 fdb8 	bl	800188c <uart_serial_print>
    memset(buf, '\0', sizeof(buf));
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	2222      	movs	r2, #34	@ 0x22
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f003 fedc 	bl	8004ae0 <memset>

    readByte = MCP2515_ReadByte(MCP2515_RXB0EID0);
 8000d28:	2064      	movs	r0, #100	@ 0x64
 8000d2a:	f000 fb7d 	bl	8001428 <MCP2515_ReadByte>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    sprintf(buf, "RXB0EID0 = %x\r\n", readByte); 
 8000d34:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	4925      	ldr	r1, [pc, #148]	@ (8000dd0 <canspi_ReadRx0RegisterPrint+0x164>)
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f003 feaf 	bl	8004aa0 <siprintf>
    uart_serial_print(buf, sizeof(buf));
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	2122      	movs	r1, #34	@ 0x22
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 fda0 	bl	800188c <uart_serial_print>
    memset(buf, '\0', sizeof(buf));
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	2222      	movs	r2, #34	@ 0x22
 8000d50:	2100      	movs	r1, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f003 fec4 	bl	8004ae0 <memset>

    readByte = MCP2515_ReadByte(MCP2515_RXB0DLC);
 8000d58:	2065      	movs	r0, #101	@ 0x65
 8000d5a:	f000 fb65 	bl	8001428 <MCP2515_ReadByte>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    sprintf(buf, "RXB0DLC = %x\r\n", readByte); 
 8000d64:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	491a      	ldr	r1, [pc, #104]	@ (8000dd4 <canspi_ReadRx0RegisterPrint+0x168>)
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f003 fe97 	bl	8004aa0 <siprintf>
    uart_serial_print(buf, sizeof(buf));
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	2122      	movs	r1, #34	@ 0x22
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 fd88 	bl	800188c <uart_serial_print>
    memset(buf, '\0', sizeof(buf));
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	2222      	movs	r2, #34	@ 0x22
 8000d80:	2100      	movs	r1, #0
 8000d82:	4618      	mov	r0, r3
 8000d84:	f003 feac 	bl	8004ae0 <memset>

    readByte = MCP2515_ReadByte(MCP2515_RXB0D0);
 8000d88:	2066      	movs	r0, #102	@ 0x66
 8000d8a:	f000 fb4d 	bl	8001428 <MCP2515_ReadByte>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    sprintf(buf, "RXB0D0 = %x\r\n", readByte); 
 8000d94:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	490f      	ldr	r1, [pc, #60]	@ (8000dd8 <canspi_ReadRx0RegisterPrint+0x16c>)
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f003 fe7f 	bl	8004aa0 <siprintf>
    uart_serial_print(buf, sizeof(buf));
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	2122      	movs	r1, #34	@ 0x22
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 fd70 	bl	800188c <uart_serial_print>
    memset(buf, '\0', sizeof(buf));
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	2222      	movs	r2, #34	@ 0x22
 8000db0:	2100      	movs	r1, #0
 8000db2:	4618      	mov	r0, r3
 8000db4:	f003 fe94 	bl	8004ae0 <memset>
}
 8000db8:	bf00      	nop
 8000dba:	3728      	adds	r7, #40	@ 0x28
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	08005640 	.word	0x08005640
 8000dc4:	080055d0 	.word	0x080055d0
 8000dc8:	080055e4 	.word	0x080055e4
 8000dcc:	080055f4 	.word	0x080055f4
 8000dd0:	08005604 	.word	0x08005604
 8000dd4:	08005664 	.word	0x08005664
 8000dd8:	08005674 	.word	0x08005674

08000ddc <canspi_ReadRx1RegisterPrint>:

void canspi_ReadRx1RegisterPrint(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	@ 0x28
 8000de0:	af00      	add	r7, sp, #0
    char buf[34]; 
    uint8_t readByte = 0;  
 8000de2:	2300      	movs	r3, #0
 8000de4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    sprintf(buf, "\r\n\r\n***RX1 Register Values***\r\n\n");
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	4951      	ldr	r1, [pc, #324]	@ (8000f30 <canspi_ReadRx1RegisterPrint+0x154>)
 8000dec:	4618      	mov	r0, r3
 8000dee:	f003 fe57 	bl	8004aa0 <siprintf>
    uart_serial_print(buf, sizeof(buf));
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	2122      	movs	r1, #34	@ 0x22
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 fd48 	bl	800188c <uart_serial_print>
    memset(buf, '\0', sizeof(buf));
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2222      	movs	r2, #34	@ 0x22
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f003 fe6c 	bl	8004ae0 <memset>

    readByte = MCP2515_ReadByte(MCP2515_RXB1SIDH);
 8000e08:	2071      	movs	r0, #113	@ 0x71
 8000e0a:	f000 fb0d 	bl	8001428 <MCP2515_ReadByte>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    sprintf(buf, "\rRXB1SIDH = %x\r\n", readByte); 
 8000e14:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	4946      	ldr	r1, [pc, #280]	@ (8000f34 <canspi_ReadRx1RegisterPrint+0x158>)
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f003 fe3f 	bl	8004aa0 <siprintf>
    uart_serial_print(buf, sizeof(buf));
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	2122      	movs	r1, #34	@ 0x22
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 fd30 	bl	800188c <uart_serial_print>
    memset(buf, '\0', sizeof(buf));
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	2222      	movs	r2, #34	@ 0x22
 8000e30:	2100      	movs	r1, #0
 8000e32:	4618      	mov	r0, r3
 8000e34:	f003 fe54 	bl	8004ae0 <memset>

    readByte = MCP2515_ReadByte(MCP2515_RXB1SIDL);
 8000e38:	2072      	movs	r0, #114	@ 0x72
 8000e3a:	f000 faf5 	bl	8001428 <MCP2515_ReadByte>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    sprintf(buf, "RXB1SIDL = %x\r\n", readByte); 
 8000e44:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	493b      	ldr	r1, [pc, #236]	@ (8000f38 <canspi_ReadRx1RegisterPrint+0x15c>)
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f003 fe27 	bl	8004aa0 <siprintf>
    uart_serial_print(buf, sizeof(buf));
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2122      	movs	r1, #34	@ 0x22
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 fd18 	bl	800188c <uart_serial_print>
    memset(buf, '\0', sizeof(buf));
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	2222      	movs	r2, #34	@ 0x22
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f003 fe3c 	bl	8004ae0 <memset>

    readByte = MCP2515_ReadByte(MCP2515_RXB1EID8);
 8000e68:	2073      	movs	r0, #115	@ 0x73
 8000e6a:	f000 fadd 	bl	8001428 <MCP2515_ReadByte>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    sprintf(buf, "RXB1EID8 = %x\r\n", readByte); 
 8000e74:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	4930      	ldr	r1, [pc, #192]	@ (8000f3c <canspi_ReadRx1RegisterPrint+0x160>)
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f003 fe0f 	bl	8004aa0 <siprintf>
    uart_serial_print(buf, sizeof(buf));
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	2122      	movs	r1, #34	@ 0x22
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 fd00 	bl	800188c <uart_serial_print>
    memset(buf, '\0', sizeof(buf));
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	2222      	movs	r2, #34	@ 0x22
 8000e90:	2100      	movs	r1, #0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f003 fe24 	bl	8004ae0 <memset>

    readByte = MCP2515_ReadByte(MCP2515_RXB1EID0);
 8000e98:	2074      	movs	r0, #116	@ 0x74
 8000e9a:	f000 fac5 	bl	8001428 <MCP2515_ReadByte>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    sprintf(buf, "RXB1EID0 = %x\r\n", readByte); 
 8000ea4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	4925      	ldr	r1, [pc, #148]	@ (8000f40 <canspi_ReadRx1RegisterPrint+0x164>)
 8000eac:	4618      	mov	r0, r3
 8000eae:	f003 fdf7 	bl	8004aa0 <siprintf>
    uart_serial_print(buf, sizeof(buf));
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	2122      	movs	r1, #34	@ 0x22
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 fce8 	bl	800188c <uart_serial_print>
    memset(buf, '\0', sizeof(buf));
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	2222      	movs	r2, #34	@ 0x22
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f003 fe0c 	bl	8004ae0 <memset>

    readByte = MCP2515_ReadByte(MCP2515_RXB1DLC);
 8000ec8:	2075      	movs	r0, #117	@ 0x75
 8000eca:	f000 faad 	bl	8001428 <MCP2515_ReadByte>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    sprintf(buf, "RXB1DLC = %x\r\n", readByte); 
 8000ed4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	491a      	ldr	r1, [pc, #104]	@ (8000f44 <canspi_ReadRx1RegisterPrint+0x168>)
 8000edc:	4618      	mov	r0, r3
 8000ede:	f003 fddf 	bl	8004aa0 <siprintf>
    uart_serial_print(buf, sizeof(buf));
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	2122      	movs	r1, #34	@ 0x22
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 fcd0 	bl	800188c <uart_serial_print>
    memset(buf, '\0', sizeof(buf));
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	2222      	movs	r2, #34	@ 0x22
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f003 fdf4 	bl	8004ae0 <memset>

    readByte = MCP2515_ReadByte(MCP2515_RXB1D0);
 8000ef8:	2076      	movs	r0, #118	@ 0x76
 8000efa:	f000 fa95 	bl	8001428 <MCP2515_ReadByte>
 8000efe:	4603      	mov	r3, r0
 8000f00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    sprintf(buf, "RXB1D0 = %x\r\n", readByte); 
 8000f04:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000f08:	1d3b      	adds	r3, r7, #4
 8000f0a:	490f      	ldr	r1, [pc, #60]	@ (8000f48 <canspi_ReadRx1RegisterPrint+0x16c>)
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f003 fdc7 	bl	8004aa0 <siprintf>
    uart_serial_print(buf, sizeof(buf));
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	2122      	movs	r1, #34	@ 0x22
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 fcb8 	bl	800188c <uart_serial_print>
    memset(buf, '\0', sizeof(buf));
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	2222      	movs	r2, #34	@ 0x22
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f003 fddc 	bl	8004ae0 <memset>
}
 8000f28:	bf00      	nop
 8000f2a:	3728      	adds	r7, #40	@ 0x28
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	08005684 	.word	0x08005684
 8000f34:	080056a8 	.word	0x080056a8
 8000f38:	080056bc 	.word	0x080056bc
 8000f3c:	080056cc 	.word	0x080056cc
 8000f40:	080056dc 	.word	0x080056dc
 8000f44:	080056ec 	.word	0x080056ec
 8000f48:	080056fc 	.word	0x080056fc

08000f4c <MCP_test_loopback_function>:
    memset(printStr, '\0', sizeof(printStr));

}

void MCP_test_loopback_function(void)
{  
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b092      	sub	sp, #72	@ 0x48
 8000f50:	af00      	add	r7, sp, #0
    static uint8_t canMessage[13];

    can_msg_t rx_message; 
    can_msg_t tx_message;  
    can_ext_id_t tx_id; 
    tx_id.id = 0; 
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]

    // Load ID
    tx_id.frame.priority = 6; 
 8000f56:	793b      	ldrb	r3, [r7, #4]
 8000f58:	2206      	movs	r2, #6
 8000f5a:	f362 0302 	bfi	r3, r2, #0, #3
 8000f5e:	713b      	strb	r3, [r7, #4]
    tx_id.frame.edp = 0;
 8000f60:	793b      	ldrb	r3, [r7, #4]
 8000f62:	f36f 03c3 	bfc	r3, #3, #1
 8000f66:	713b      	strb	r3, [r7, #4]
    tx_id.frame.dp = 0; 
 8000f68:	793b      	ldrb	r3, [r7, #4]
 8000f6a:	f36f 1304 	bfc	r3, #4, #1
 8000f6e:	713b      	strb	r3, [r7, #4]
    tx_id.frame.pf = 0xFA; 
 8000f70:	88bb      	ldrh	r3, [r7, #4]
 8000f72:	f06f 0205 	mvn.w	r2, #5
 8000f76:	f362 134c 	bfi	r3, r2, #5, #8
 8000f7a:	80bb      	strh	r3, [r7, #4]
    tx_id.frame.ps = 0xBC; 
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f06f 0243 	mvn.w	r2, #67	@ 0x43
 8000f82:	f362 3354 	bfi	r3, r2, #13, #8
 8000f86:	607b      	str	r3, [r7, #4]
    tx_id.frame.source_address = 0x33; 
 8000f88:	88fb      	ldrh	r3, [r7, #6]
 8000f8a:	2233      	movs	r2, #51	@ 0x33
 8000f8c:	f362 134c 	bfi	r3, r2, #5, #8
 8000f90:	80fb      	strh	r3, [r7, #6]
    // Load Frame
    tx_message.frame.canId = tx_id.id; 
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	60bb      	str	r3, [r7, #8]
    tx_message.frame.dlc = 8;
 8000f96:	2308      	movs	r3, #8
 8000f98:	733b      	strb	r3, [r7, #12]
    tx_message.frame.data0 = 0x01; 
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	737b      	strb	r3, [r7, #13]
    tx_message.frame.data1 = 0x11; 
 8000f9e:	2311      	movs	r3, #17
 8000fa0:	73bb      	strb	r3, [r7, #14]
    tx_message.frame.data2 = 0x21;
 8000fa2:	2321      	movs	r3, #33	@ 0x21
 8000fa4:	73fb      	strb	r3, [r7, #15]
    tx_message.frame.data3 = 0x31;
 8000fa6:	2331      	movs	r3, #49	@ 0x31
 8000fa8:	743b      	strb	r3, [r7, #16]
    tx_message.frame.data4 = 0x41;
 8000faa:	2341      	movs	r3, #65	@ 0x41
 8000fac:	747b      	strb	r3, [r7, #17]
    tx_message.frame.data5 = 0x51;
 8000fae:	2351      	movs	r3, #81	@ 0x51
 8000fb0:	74bb      	strb	r3, [r7, #18]
    tx_message.frame.data6 = 0x61;
 8000fb2:	2361      	movs	r3, #97	@ 0x61
 8000fb4:	74fb      	strb	r3, [r7, #19]
    tx_message.frame.data7 = 0x71;
 8000fb6:	2371      	movs	r3, #113	@ 0x71
 8000fb8:	753b      	strb	r3, [r7, #20]
    // test_print_ID(tx_id);

    // canspi_ConvertIDToReg(tx_id.id, &regID); 
    // canspi_ReadRegIdPrint(regID); 

    canspi_TransmitMessage(&tx_message);
 8000fba:	f107 0308 	add.w	r3, r7, #8
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff faef 	bl	80005a2 <canspi_TransmitMessage>
    HAL_Delay(1000);
 8000fc4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fc8:	f000 fd12 	bl	80019f0 <HAL_Delay>
    if(canspi_ReceiveMessage(&rx_message))
 8000fcc:	f107 0318 	add.w	r3, r7, #24
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fb48 	bl	8000666 <canspi_ReceiveMessage>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d011      	beq.n	8001000 <MCP_test_loopback_function+0xb4>
    {
        canspi_CanLoopTest(rx_message); 
 8000fdc:	f107 0318 	add.w	r3, r7, #24
 8000fe0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fe2:	f7ff fca1 	bl	8000928 <canspi_CanLoopTest>
        // sprintf(buf, "****** PCAN ******\r\n\r\n"); 
        uart_serial_print(buf, sizeof(buf));
 8000fe6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fea:	211e      	movs	r1, #30
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 fc4d 	bl	800188c <uart_serial_print>
        memset(buf, '\0', sizeof(buf));
 8000ff2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ff6:	221e      	movs	r2, #30
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f003 fd70 	bl	8004ae0 <memset>
    } 
}
 8001000:	bf00      	nop
 8001002:	3748      	adds	r7, #72	@ 0x48
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100c:	f000 fc7b 	bl	8001906 <HAL_Init>
  
  /*************** ****************/
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001010:	f000 f80b 	bl	800102a <SystemClock_Config>

  /*************** ****************/
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001014:	f000 f8bc 	bl	8001190 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001018:	f000 f84c 	bl	80010b4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800101c:	f000 f888 	bl	8001130 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /*************** ****************/
  canspi_Init(); 
 8001020:	f7ff fa9e 	bl	8000560 <canspi_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /*************** ****************/
  while (1)
  { 
    MCP_test_loopback_function(); 
 8001024:	f7ff ff92 	bl	8000f4c <MCP_test_loopback_function>
 8001028:	e7fc      	b.n	8001024 <main+0x1c>

0800102a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b096      	sub	sp, #88	@ 0x58
 800102e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	2244      	movs	r2, #68	@ 0x44
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f003 fd51 	bl	8004ae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800103e:	463b      	mov	r3, r7
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800104c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001050:	f000 ff68 	bl	8001f24 <HAL_PWREx_ControlVoltageScaling>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <SystemClock_Config+0x34>
  {
    Error_Handler();
 800105a:	f000 f8e3 	bl	8001224 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800105e:	2302      	movs	r3, #2
 8001060:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001062:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001066:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001068:	2310      	movs	r3, #16
 800106a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800106c:	2300      	movs	r3, #0
 800106e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4618      	mov	r0, r3
 8001076:	f000 ffab 	bl	8001fd0 <HAL_RCC_OscConfig>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8001080:	f000 f8d0 	bl	8001224 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001084:	230f      	movs	r3, #15
 8001086:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001088:	2301      	movs	r3, #1
 800108a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108c:	2300      	movs	r3, #0
 800108e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001098:	463b      	mov	r3, r7
 800109a:	2100      	movs	r1, #0
 800109c:	4618      	mov	r0, r3
 800109e:	f001 fbab 	bl	80027f8 <HAL_RCC_ClockConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0x82>
  {
    Error_Handler();
 80010a8:	f000 f8bc 	bl	8001224 <Error_Handler>
  }
}
 80010ac:	bf00      	nop
 80010ae:	3758      	adds	r7, #88	@ 0x58
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001128 <MX_SPI1_Init+0x74>)
 80010ba:	4a1c      	ldr	r2, [pc, #112]	@ (800112c <MX_SPI1_Init+0x78>)
 80010bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010be:	4b1a      	ldr	r3, [pc, #104]	@ (8001128 <MX_SPI1_Init+0x74>)
 80010c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010c6:	4b18      	ldr	r3, [pc, #96]	@ (8001128 <MX_SPI1_Init+0x74>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010cc:	4b16      	ldr	r3, [pc, #88]	@ (8001128 <MX_SPI1_Init+0x74>)
 80010ce:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80010d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010d4:	4b14      	ldr	r3, [pc, #80]	@ (8001128 <MX_SPI1_Init+0x74>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010da:	4b13      	ldr	r3, [pc, #76]	@ (8001128 <MX_SPI1_Init+0x74>)
 80010dc:	2200      	movs	r2, #0
 80010de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010e0:	4b11      	ldr	r3, [pc, #68]	@ (8001128 <MX_SPI1_Init+0x74>)
 80010e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001128 <MX_SPI1_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001128 <MX_SPI1_Init+0x74>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001128 <MX_SPI1_Init+0x74>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <MX_SPI1_Init+0x74>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001100:	4b09      	ldr	r3, [pc, #36]	@ (8001128 <MX_SPI1_Init+0x74>)
 8001102:	2207      	movs	r2, #7
 8001104:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001106:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <MX_SPI1_Init+0x74>)
 8001108:	2200      	movs	r2, #0
 800110a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <MX_SPI1_Init+0x74>)
 800110e:	2208      	movs	r2, #8
 8001110:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001112:	4805      	ldr	r0, [pc, #20]	@ (8001128 <MX_SPI1_Init+0x74>)
 8001114:	f002 f87c 	bl	8003210 <HAL_SPI_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800111e:	f000 f881 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000078 	.word	0x20000078
 800112c:	40013000 	.word	0x40013000

08001130 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001134:	4b14      	ldr	r3, [pc, #80]	@ (8001188 <MX_USART2_UART_Init+0x58>)
 8001136:	4a15      	ldr	r2, [pc, #84]	@ (800118c <MX_USART2_UART_Init+0x5c>)
 8001138:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800113a:	4b13      	ldr	r3, [pc, #76]	@ (8001188 <MX_USART2_UART_Init+0x58>)
 800113c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001140:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001142:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <MX_USART2_UART_Init+0x58>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001148:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <MX_USART2_UART_Init+0x58>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800114e:	4b0e      	ldr	r3, [pc, #56]	@ (8001188 <MX_USART2_UART_Init+0x58>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001154:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <MX_USART2_UART_Init+0x58>)
 8001156:	220c      	movs	r2, #12
 8001158:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115a:	4b0b      	ldr	r3, [pc, #44]	@ (8001188 <MX_USART2_UART_Init+0x58>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001160:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <MX_USART2_UART_Init+0x58>)
 8001162:	2200      	movs	r2, #0
 8001164:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001166:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <MX_USART2_UART_Init+0x58>)
 8001168:	2200      	movs	r2, #0
 800116a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800116c:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <MX_USART2_UART_Init+0x58>)
 800116e:	2200      	movs	r2, #0
 8001170:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001172:	4805      	ldr	r0, [pc, #20]	@ (8001188 <MX_USART2_UART_Init+0x58>)
 8001174:	f002 ff7a 	bl	800406c <HAL_UART_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800117e:	f000 f851 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200000dc 	.word	0x200000dc
 800118c:	40004400 	.word	0x40004400

08001190 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001196:	f107 030c 	add.w	r3, r7, #12
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a6:	4b1d      	ldr	r3, [pc, #116]	@ (800121c <MX_GPIO_Init+0x8c>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011aa:	4a1c      	ldr	r2, [pc, #112]	@ (800121c <MX_GPIO_Init+0x8c>)
 80011ac:	f043 0304 	orr.w	r3, r3, #4
 80011b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011b2:	4b1a      	ldr	r3, [pc, #104]	@ (800121c <MX_GPIO_Init+0x8c>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b6:	f003 0304 	and.w	r3, r3, #4
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011be:	4b17      	ldr	r3, [pc, #92]	@ (800121c <MX_GPIO_Init+0x8c>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c2:	4a16      	ldr	r2, [pc, #88]	@ (800121c <MX_GPIO_Init+0x8c>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ca:	4b14      	ldr	r3, [pc, #80]	@ (800121c <MX_GPIO_Init+0x8c>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d6:	4b11      	ldr	r3, [pc, #68]	@ (800121c <MX_GPIO_Init+0x8c>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011da:	4a10      	ldr	r2, [pc, #64]	@ (800121c <MX_GPIO_Init+0x8c>)
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e2:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <MX_GPIO_Init+0x8c>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, GPIO_PIN_SET);
 80011ee:	2201      	movs	r2, #1
 80011f0:	2180      	movs	r1, #128	@ 0x80
 80011f2:	480b      	ldr	r0, [pc, #44]	@ (8001220 <MX_GPIO_Init+0x90>)
 80011f4:	f000 fe70 	bl	8001ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SP1_CS_Pin */
  GPIO_InitStruct.Pin = SP1_CS_Pin;
 80011f8:	2380      	movs	r3, #128	@ 0x80
 80011fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fc:	2301      	movs	r3, #1
 80011fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001204:	2300      	movs	r3, #0
 8001206:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SP1_CS_GPIO_Port, &GPIO_InitStruct);
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	4619      	mov	r1, r3
 800120e:	4804      	ldr	r0, [pc, #16]	@ (8001220 <MX_GPIO_Init+0x90>)
 8001210:	f000 fcf8 	bl	8001c04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001214:	bf00      	nop
 8001216:	3720      	adds	r7, #32
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40021000 	.word	0x40021000
 8001220:	48000400 	.word	0x48000400

08001224 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001228:	b672      	cpsid	i
}
 800122a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <Error_Handler+0x8>

08001230 <MCP2515_SetConfigurationMode>:

    @{
*/
/******************************************************************************/
bool MCP2515_SetConfigurationMode(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
  uint8_t retVal = false; 
 8001236:	2300      	movs	r3, #0
 8001238:	73fb      	strb	r3, [r7, #15]
  uint8_t mode; 
  mode = MCP2515_ReadByte(MCP2515_CANCTRL); 
 800123a:	200f      	movs	r0, #15
 800123c:	f000 f8f4 	bl	8001428 <MCP2515_ReadByte>
 8001240:	4603      	mov	r3, r0
 8001242:	71fb      	strb	r3, [r7, #7]
  mode |= MODE_CONFIGURATION; 
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800124a:	71fb      	strb	r3, [r7, #7]
  MCP2515_WriteByte(MCP2515_CANCTRL, mode); 
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	4619      	mov	r1, r3
 8001250:	200f      	movs	r0, #15
 8001252:	f000 f899 	bl	8001388 <MCP2515_WriteByte>

  for(int i = 0; i < 10; i ++)
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	e02e      	b.n	80012ba <MCP2515_SetConfigurationMode+0x8a>
  {
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & MCP2515_OPMODE_MASK) == MODE_CONFIGURATION)
 800125c:	200e      	movs	r0, #14
 800125e:	f000 f8e3 	bl	8001428 <MCP2515_ReadByte>
 8001262:	4603      	mov	r3, r0
 8001264:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8001268:	2b80      	cmp	r3, #128	@ 0x80
 800126a:	d10f      	bne.n	800128c <MCP2515_SetConfigurationMode+0x5c>
    {
      sprintf(test, "config mode\r\n"); 
 800126c:	4919      	ldr	r1, [pc, #100]	@ (80012d4 <MCP2515_SetConfigurationMode+0xa4>)
 800126e:	481a      	ldr	r0, [pc, #104]	@ (80012d8 <MCP2515_SetConfigurationMode+0xa8>)
 8001270:	f003 fc16 	bl	8004aa0 <siprintf>
      uart_serial_print(test, sizeof(test));
 8001274:	211e      	movs	r1, #30
 8001276:	4818      	ldr	r0, [pc, #96]	@ (80012d8 <MCP2515_SetConfigurationMode+0xa8>)
 8001278:	f000 fb08 	bl	800188c <uart_serial_print>
      memset(test, '\0', sizeof(test));
 800127c:	221e      	movs	r2, #30
 800127e:	2100      	movs	r1, #0
 8001280:	4815      	ldr	r0, [pc, #84]	@ (80012d8 <MCP2515_SetConfigurationMode+0xa8>)
 8001282:	f003 fc2d 	bl	8004ae0 <memset>
      retVal = true; 
 8001286:	2301      	movs	r3, #1
 8001288:	73fb      	strb	r3, [r7, #15]
      break;
 800128a:	e019      	b.n	80012c0 <MCP2515_SetConfigurationMode+0x90>
    } 
    else
    {
      mode = MCP2515_ReadByte(MCP2515_CANSTAT); 
 800128c:	200e      	movs	r0, #14
 800128e:	f000 f8cb 	bl	8001428 <MCP2515_ReadByte>
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
      sprintf(test, "mode = %x\r\n", mode); 
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	461a      	mov	r2, r3
 800129a:	4910      	ldr	r1, [pc, #64]	@ (80012dc <MCP2515_SetConfigurationMode+0xac>)
 800129c:	480e      	ldr	r0, [pc, #56]	@ (80012d8 <MCP2515_SetConfigurationMode+0xa8>)
 800129e:	f003 fbff 	bl	8004aa0 <siprintf>
      uart_serial_print(test, sizeof(test));
 80012a2:	211e      	movs	r1, #30
 80012a4:	480c      	ldr	r0, [pc, #48]	@ (80012d8 <MCP2515_SetConfigurationMode+0xa8>)
 80012a6:	f000 faf1 	bl	800188c <uart_serial_print>
      memset(test, '\0', sizeof(test));
 80012aa:	221e      	movs	r2, #30
 80012ac:	2100      	movs	r1, #0
 80012ae:	480a      	ldr	r0, [pc, #40]	@ (80012d8 <MCP2515_SetConfigurationMode+0xa8>)
 80012b0:	f003 fc16 	bl	8004ae0 <memset>
  for(int i = 0; i < 10; i ++)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	3301      	adds	r3, #1
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	2b09      	cmp	r3, #9
 80012be:	ddcd      	ble.n	800125c <MCP2515_SetConfigurationMode+0x2c>
    }
  }
  return retVal;
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	bf14      	ite	ne
 80012c6:	2301      	movne	r3, #1
 80012c8:	2300      	moveq	r3, #0
 80012ca:	b2db      	uxtb	r3, r3
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	080057a0 	.word	0x080057a0
 80012d8:	20000164 	.word	0x20000164
 80012dc:	080057b0 	.word	0x080057b0

080012e0 <MCP2515_SetNormalMode>:

    @{
*/
/******************************************************************************/
bool MCP2515_SetNormalMode(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
  bool retVal = false; 
 80012e6:	2300      	movs	r3, #0
 80012e8:	73fb      	strb	r3, [r7, #15]
  uint8_t mode; 
  mode = MCP2515_ReadByte(MCP2515_CANCTRL); 
 80012ea:	200f      	movs	r0, #15
 80012ec:	f000 f89c 	bl	8001428 <MCP2515_ReadByte>
 80012f0:	4603      	mov	r3, r0
 80012f2:	71fb      	strb	r3, [r7, #7]
  mode &= MODE_MASK_NORMAL; 
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	f003 031f 	and.w	r3, r3, #31
 80012fa:	71fb      	strb	r3, [r7, #7]
  MCP2515_WriteByte(MCP2515_CANCTRL, mode); 
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	4619      	mov	r1, r3
 8001300:	200f      	movs	r0, #15
 8001302:	f000 f841 	bl	8001388 <MCP2515_WriteByte>
  
  for(int i = 0; i < 10; i ++)
 8001306:	2300      	movs	r3, #0
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	e02e      	b.n	800136a <MCP2515_SetNormalMode+0x8a>
  {
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & MCP2515_OPMODE_MASK) == MODE_NORMAL)
 800130c:	200e      	movs	r0, #14
 800130e:	f000 f88b 	bl	8001428 <MCP2515_ReadByte>
 8001312:	4603      	mov	r3, r0
 8001314:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d10f      	bne.n	800133c <MCP2515_SetNormalMode+0x5c>
    {
      sprintf(test, "normal mode\r\n"); 
 800131c:	4917      	ldr	r1, [pc, #92]	@ (800137c <MCP2515_SetNormalMode+0x9c>)
 800131e:	4818      	ldr	r0, [pc, #96]	@ (8001380 <MCP2515_SetNormalMode+0xa0>)
 8001320:	f003 fbbe 	bl	8004aa0 <siprintf>
      uart_serial_print(test, sizeof(test));
 8001324:	211e      	movs	r1, #30
 8001326:	4816      	ldr	r0, [pc, #88]	@ (8001380 <MCP2515_SetNormalMode+0xa0>)
 8001328:	f000 fab0 	bl	800188c <uart_serial_print>
      memset(test, '\0', sizeof(test));
 800132c:	221e      	movs	r2, #30
 800132e:	2100      	movs	r1, #0
 8001330:	4813      	ldr	r0, [pc, #76]	@ (8001380 <MCP2515_SetNormalMode+0xa0>)
 8001332:	f003 fbd5 	bl	8004ae0 <memset>
      retVal = true; 
 8001336:	2301      	movs	r3, #1
 8001338:	73fb      	strb	r3, [r7, #15]
      break; 
 800133a:	e019      	b.n	8001370 <MCP2515_SetNormalMode+0x90>
    }
    else
    {
      mode = MCP2515_ReadByte(MCP2515_CANSTAT); 
 800133c:	200e      	movs	r0, #14
 800133e:	f000 f873 	bl	8001428 <MCP2515_ReadByte>
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
      sprintf(test, "mode = %x\r\n", mode); 
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	461a      	mov	r2, r3
 800134a:	490e      	ldr	r1, [pc, #56]	@ (8001384 <MCP2515_SetNormalMode+0xa4>)
 800134c:	480c      	ldr	r0, [pc, #48]	@ (8001380 <MCP2515_SetNormalMode+0xa0>)
 800134e:	f003 fba7 	bl	8004aa0 <siprintf>
      uart_serial_print(test, sizeof(test));
 8001352:	211e      	movs	r1, #30
 8001354:	480a      	ldr	r0, [pc, #40]	@ (8001380 <MCP2515_SetNormalMode+0xa0>)
 8001356:	f000 fa99 	bl	800188c <uart_serial_print>
      memset(test, '\0', sizeof(test));
 800135a:	221e      	movs	r2, #30
 800135c:	2100      	movs	r1, #0
 800135e:	4808      	ldr	r0, [pc, #32]	@ (8001380 <MCP2515_SetNormalMode+0xa0>)
 8001360:	f003 fbbe 	bl	8004ae0 <memset>
  for(int i = 0; i < 10; i ++)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	3301      	adds	r3, #1
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	2b09      	cmp	r3, #9
 800136e:	ddcd      	ble.n	800130c <MCP2515_SetNormalMode+0x2c>
    } 
  }
  return retVal;
 8001370:	7bfb      	ldrb	r3, [r7, #15]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	080057bc 	.word	0x080057bc
 8001380:	20000164 	.word	0x20000164
 8001384:	080057b0 	.word	0x080057b0

08001388 <MCP2515_WriteByte>:

    @{
*/
/******************************************************************************/
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	460a      	mov	r2, r1
 8001392:	71fb      	strb	r3, [r7, #7]
 8001394:	4613      	mov	r3, r2
 8001396:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();  
 8001398:	2200      	movs	r2, #0
 800139a:	2180      	movs	r1, #128	@ 0x80
 800139c:	480b      	ldr	r0, [pc, #44]	@ (80013cc <MCP2515_WriteByte+0x44>)
 800139e:	f000 fd9b 	bl	8001ed8 <HAL_GPIO_WritePin>

  SPI_Tx((uint8_t)INSTRUCTION_WRITE);
 80013a2:	2002      	movs	r0, #2
 80013a4:	f000 f8da 	bl	800155c <SPI_Tx>
  SPI_Tx(address);
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 f8d6 	bl	800155c <SPI_Tx>
  SPI_Tx(data);  
 80013b0:	79bb      	ldrb	r3, [r7, #6]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 f8d2 	bl	800155c <SPI_Tx>
  
  MCP2515_CS_HIGH();
 80013b8:	2201      	movs	r2, #1
 80013ba:	2180      	movs	r1, #128	@ 0x80
 80013bc:	4803      	ldr	r0, [pc, #12]	@ (80013cc <MCP2515_WriteByte+0x44>)
 80013be:	f000 fd8b 	bl	8001ed8 <HAL_GPIO_WritePin>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	48000400 	.word	0x48000400

080013d0 <MCP2515_WriteTxBuffer>:

    @{
*/
/******************************************************************************/
void MCP2515_WriteTxBuffer(load_tx_buf_instr_t instruction, uint8_t* idReg, uint8_t* data, uint8_t dlc)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
 80013da:	461a      	mov	r2, r3
 80013dc:	4603      	mov	r3, r0
 80013de:	73fb      	strb	r3, [r7, #15]
 80013e0:	4613      	mov	r3, r2
 80013e2:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 80013e4:	2200      	movs	r2, #0
 80013e6:	2180      	movs	r1, #128	@ 0x80
 80013e8:	480e      	ldr	r0, [pc, #56]	@ (8001424 <MCP2515_WriteTxBuffer+0x54>)
 80013ea:	f000 fd75 	bl	8001ed8 <HAL_GPIO_WritePin>

  SPI_Tx((uint8_t)instruction);
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f000 f8b3 	bl	800155c <SPI_Tx>
  SPI_TxBuffer(idReg, 4); 
 80013f6:	2104      	movs	r1, #4
 80013f8:	68b8      	ldr	r0, [r7, #8]
 80013fa:	f000 f8c1 	bl	8001580 <SPI_TxBuffer>
  SPI_Tx(dlc); 
 80013fe:	7bbb      	ldrb	r3, [r7, #14]
 8001400:	4618      	mov	r0, r3
 8001402:	f000 f8ab 	bl	800155c <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 8001406:	7bbb      	ldrb	r3, [r7, #14]
 8001408:	4619      	mov	r1, r3
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 f8b8 	bl	8001580 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 8001410:	2201      	movs	r2, #1
 8001412:	2180      	movs	r1, #128	@ 0x80
 8001414:	4803      	ldr	r0, [pc, #12]	@ (8001424 <MCP2515_WriteTxBuffer+0x54>)
 8001416:	f000 fd5f 	bl	8001ed8 <HAL_GPIO_WritePin>
}
 800141a:	bf00      	nop
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	48000400 	.word	0x48000400

08001428 <MCP2515_ReadByte>:

    @{
*/
/******************************************************************************/
uint8_t MCP2515_ReadByte(uint8_t address)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
    uint8_t retVal = 0; 
 8001432:	2300      	movs	r3, #0
 8001434:	73fb      	strb	r3, [r7, #15]

    MCP2515_CS_LOW();
 8001436:	2200      	movs	r2, #0
 8001438:	2180      	movs	r1, #128	@ 0x80
 800143a:	480c      	ldr	r0, [pc, #48]	@ (800146c <MCP2515_ReadByte+0x44>)
 800143c:	f000 fd4c 	bl	8001ed8 <HAL_GPIO_WritePin>
  
    SPI_Tx((uint8_t)INSTRUCTION_READ);
 8001440:	2003      	movs	r0, #3
 8001442:	f000 f88b 	bl	800155c <SPI_Tx>
    SPI_Tx(address);
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	4618      	mov	r0, r3
 800144a:	f000 f887 	bl	800155c <SPI_Tx>
    retVal = SPI_Rx();
 800144e:	f000 f8ab 	bl	80015a8 <SPI_Rx>
 8001452:	4603      	mov	r3, r0
 8001454:	73fb      	strb	r3, [r7, #15]
  
    MCP2515_CS_HIGH();
 8001456:	2201      	movs	r2, #1
 8001458:	2180      	movs	r1, #128	@ 0x80
 800145a:	4804      	ldr	r0, [pc, #16]	@ (800146c <MCP2515_ReadByte+0x44>)
 800145c:	f000 fd3c 	bl	8001ed8 <HAL_GPIO_WritePin>

    return retVal;
 8001460:	7bfb      	ldrb	r3, [r7, #15]
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	48000400 	.word	0x48000400

08001470 <MCP2515_ReadMultipleBytes>:

    @{
*/
/******************************************************************************/
void MCP2515_ReadMultipleBytes(uint8_t address, uint8_t* data, uint8_t length)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	6039      	str	r1, [r7, #0]
 800147a:	71fb      	strb	r3, [r7, #7]
 800147c:	4613      	mov	r3, r2
 800147e:	71bb      	strb	r3, [r7, #6]

    MCP2515_CS_LOW();
 8001480:	2200      	movs	r2, #0
 8001482:	2180      	movs	r1, #128	@ 0x80
 8001484:	480b      	ldr	r0, [pc, #44]	@ (80014b4 <MCP2515_ReadMultipleBytes+0x44>)
 8001486:	f000 fd27 	bl	8001ed8 <HAL_GPIO_WritePin>
  
    SPI_Tx((uint8_t)INSTRUCTION_READ);
 800148a:	2003      	movs	r0, #3
 800148c:	f000 f866 	bl	800155c <SPI_Tx>
    SPI_Tx(address);
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	4618      	mov	r0, r3
 8001494:	f000 f862 	bl	800155c <SPI_Tx>
    SPI_RxBuffer(data, length); 
 8001498:	79bb      	ldrb	r3, [r7, #6]
 800149a:	4619      	mov	r1, r3
 800149c:	6838      	ldr	r0, [r7, #0]
 800149e:	f000 f899 	bl	80015d4 <SPI_RxBuffer>
  
    MCP2515_CS_HIGH();
 80014a2:	2201      	movs	r2, #1
 80014a4:	2180      	movs	r1, #128	@ 0x80
 80014a6:	4803      	ldr	r0, [pc, #12]	@ (80014b4 <MCP2515_ReadMultipleBytes+0x44>)
 80014a8:	f000 fd16 	bl	8001ed8 <HAL_GPIO_WritePin>
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	48000400 	.word	0x48000400

080014b8 <MCP2515_GetRxStatus>:

    @{
*/
/******************************************************************************/
rx_status_t MCP2515_GetRxStatus(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
  rx_status_t retVal;
  
  MCP2515_CS_LOW();
 80014be:	2200      	movs	r2, #0
 80014c0:	2180      	movs	r1, #128	@ 0x80
 80014c2:	480a      	ldr	r0, [pc, #40]	@ (80014ec <MCP2515_GetRxStatus+0x34>)
 80014c4:	f000 fd08 	bl	8001ed8 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_RX_STATUS);
 80014c8:	20b0      	movs	r0, #176	@ 0xb0
 80014ca:	f000 f847 	bl	800155c <SPI_Tx>
  retVal.ctrl_rx_status = SPI_Rx();
 80014ce:	f000 f86b 	bl	80015a8 <SPI_Rx>
 80014d2:	4603      	mov	r3, r0
 80014d4:	713b      	strb	r3, [r7, #4]
        
  MCP2515_CS_HIGH();
 80014d6:	2201      	movs	r2, #1
 80014d8:	2180      	movs	r1, #128	@ 0x80
 80014da:	4804      	ldr	r0, [pc, #16]	@ (80014ec <MCP2515_GetRxStatus+0x34>)
 80014dc:	f000 fcfc 	bl	8001ed8 <HAL_GPIO_WritePin>
  
  return retVal;
 80014e0:	687b      	ldr	r3, [r7, #4]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	48000400 	.word	0x48000400

080014f0 <MCP2515_GetControlStatus>:

    @{
*/
/******************************************************************************/
ctrl_status_t MCP2515_GetControlStatus(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
  ctrl_status_t retVal;
  
  MCP2515_CS_LOW();
 80014f6:	2200      	movs	r2, #0
 80014f8:	2180      	movs	r1, #128	@ 0x80
 80014fa:	480a      	ldr	r0, [pc, #40]	@ (8001524 <MCP2515_GetControlStatus+0x34>)
 80014fc:	f000 fcec 	bl	8001ed8 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_READ_STATUS);
 8001500:	20a0      	movs	r0, #160	@ 0xa0
 8001502:	f000 f82b 	bl	800155c <SPI_Tx>
  retVal.ctrl_status = SPI_Rx();
 8001506:	f000 f84f 	bl	80015a8 <SPI_Rx>
 800150a:	4603      	mov	r3, r0
 800150c:	713b      	strb	r3, [r7, #4]
        
  MCP2515_CS_HIGH();
 800150e:	2201      	movs	r2, #1
 8001510:	2180      	movs	r1, #128	@ 0x80
 8001512:	4804      	ldr	r0, [pc, #16]	@ (8001524 <MCP2515_GetControlStatus+0x34>)
 8001514:	f000 fce0 	bl	8001ed8 <HAL_GPIO_WritePin>
  
  return retVal;
 8001518:	687b      	ldr	r3, [r7, #4]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	48000400 	.word	0x48000400

08001528 <MCP2515_RequestToSend>:

/* request to send */
void MCP2515_RequestToSend(uint8_t instruction)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 8001532:	2200      	movs	r2, #0
 8001534:	2180      	movs	r1, #128	@ 0x80
 8001536:	4808      	ldr	r0, [pc, #32]	@ (8001558 <MCP2515_RequestToSend+0x30>)
 8001538:	f000 fcce 	bl	8001ed8 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	4618      	mov	r0, r3
 8001540:	f000 f80c 	bl	800155c <SPI_Tx>
      
  MCP2515_CS_HIGH();
 8001544:	2201      	movs	r2, #1
 8001546:	2180      	movs	r1, #128	@ 0x80
 8001548:	4803      	ldr	r0, [pc, #12]	@ (8001558 <MCP2515_RequestToSend+0x30>)
 800154a:	f000 fcc5 	bl	8001ed8 <HAL_GPIO_WritePin>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	48000400 	.word	0x48000400

0800155c <SPI_Tx>:

    @{
*/
/******************************************************************************/
static void SPI_Tx(uint8_t data)
{ 
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]

  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);  
 8001566:	1df9      	adds	r1, r7, #7
 8001568:	2364      	movs	r3, #100	@ 0x64
 800156a:	2201      	movs	r2, #1
 800156c:	4803      	ldr	r0, [pc, #12]	@ (800157c <SPI_Tx+0x20>)
 800156e:	f001 fef2 	bl	8003356 <HAL_SPI_Transmit>

}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000078 	.word	0x20000078

08001580 <SPI_TxBuffer>:

    @{
*/
/******************************************************************************/
void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(&hspi1, buffer, length, SPI_TIMEOUT);    
 800158c:	78fb      	ldrb	r3, [r7, #3]
 800158e:	b29a      	uxth	r2, r3
 8001590:	2364      	movs	r3, #100	@ 0x64
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	4803      	ldr	r0, [pc, #12]	@ (80015a4 <SPI_TxBuffer+0x24>)
 8001596:	f001 fede 	bl	8003356 <HAL_SPI_Transmit>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000078 	.word	0x20000078

080015a8 <SPI_Rx>:

    @{
*/
/******************************************************************************/
static uint8_t SPI_Rx(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  read_error = (uint8_t) HAL_SPI_Receive(&hspi1, &retVal, 1, SPI_TIMEOUT);
 80015ae:	1df9      	adds	r1, r7, #7
 80015b0:	2364      	movs	r3, #100	@ 0x64
 80015b2:	2201      	movs	r2, #1
 80015b4:	4805      	ldr	r0, [pc, #20]	@ (80015cc <SPI_Rx+0x24>)
 80015b6:	f002 f843 	bl	8003640 <HAL_SPI_Receive>
 80015ba:	4603      	mov	r3, r0
 80015bc:	461a      	mov	r2, r3
 80015be:	4b04      	ldr	r3, [pc, #16]	@ (80015d0 <SPI_Rx+0x28>)
 80015c0:	701a      	strb	r2, [r3, #0]

  return retVal;
 80015c2:	79fb      	ldrb	r3, [r7, #7]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000078 	.word	0x20000078
 80015d0:	20000182 	.word	0x20000182

080015d4 <SPI_RxBuffer>:

    @{
*/
/******************************************************************************/
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(&hspi1, buffer, length, SPI_TIMEOUT);
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	2364      	movs	r3, #100	@ 0x64
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	4803      	ldr	r0, [pc, #12]	@ (80015f8 <SPI_RxBuffer+0x24>)
 80015ea:	f002 f829 	bl	8003640 <HAL_SPI_Receive>
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000078 	.word	0x20000078

080015fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001602:	4b0f      	ldr	r3, [pc, #60]	@ (8001640 <HAL_MspInit+0x44>)
 8001604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001606:	4a0e      	ldr	r2, [pc, #56]	@ (8001640 <HAL_MspInit+0x44>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6613      	str	r3, [r2, #96]	@ 0x60
 800160e:	4b0c      	ldr	r3, [pc, #48]	@ (8001640 <HAL_MspInit+0x44>)
 8001610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800161a:	4b09      	ldr	r3, [pc, #36]	@ (8001640 <HAL_MspInit+0x44>)
 800161c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161e:	4a08      	ldr	r2, [pc, #32]	@ (8001640 <HAL_MspInit+0x44>)
 8001620:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001624:	6593      	str	r3, [r2, #88]	@ 0x58
 8001626:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <HAL_MspInit+0x44>)
 8001628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800162a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800162e:	603b      	str	r3, [r7, #0]
 8001630:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	40021000 	.word	0x40021000

08001644 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08a      	sub	sp, #40	@ 0x28
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a17      	ldr	r2, [pc, #92]	@ (80016c0 <HAL_SPI_MspInit+0x7c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d128      	bne.n	80016b8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001666:	4b17      	ldr	r3, [pc, #92]	@ (80016c4 <HAL_SPI_MspInit+0x80>)
 8001668:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800166a:	4a16      	ldr	r2, [pc, #88]	@ (80016c4 <HAL_SPI_MspInit+0x80>)
 800166c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001670:	6613      	str	r3, [r2, #96]	@ 0x60
 8001672:	4b14      	ldr	r3, [pc, #80]	@ (80016c4 <HAL_SPI_MspInit+0x80>)
 8001674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001676:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	4b11      	ldr	r3, [pc, #68]	@ (80016c4 <HAL_SPI_MspInit+0x80>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001682:	4a10      	ldr	r2, [pc, #64]	@ (80016c4 <HAL_SPI_MspInit+0x80>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800168a:	4b0e      	ldr	r3, [pc, #56]	@ (80016c4 <HAL_SPI_MspInit+0x80>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8001696:	23c2      	movs	r3, #194	@ 0xc2
 8001698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a2:	2303      	movs	r3, #3
 80016a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016a6:	2305      	movs	r3, #5
 80016a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	4619      	mov	r1, r3
 80016b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016b4:	f000 faa6 	bl	8001c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016b8:	bf00      	nop
 80016ba:	3728      	adds	r7, #40	@ 0x28
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40013000 	.word	0x40013000
 80016c4:	40021000 	.word	0x40021000

080016c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b09e      	sub	sp, #120	@ 0x78
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016e0:	f107 0310 	add.w	r3, r7, #16
 80016e4:	2254      	movs	r2, #84	@ 0x54
 80016e6:	2100      	movs	r1, #0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f003 f9f9 	bl	8004ae0 <memset>
  if(huart->Instance==USART2)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a28      	ldr	r2, [pc, #160]	@ (8001794 <HAL_UART_MspInit+0xcc>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d148      	bne.n	800178a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016f8:	2302      	movs	r3, #2
 80016fa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016fc:	2300      	movs	r3, #0
 80016fe:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001700:	f107 0310 	add.w	r3, r7, #16
 8001704:	4618      	mov	r0, r3
 8001706:	f001 fa9b 	bl	8002c40 <HAL_RCCEx_PeriphCLKConfig>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001710:	f7ff fd88 	bl	8001224 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001714:	4b20      	ldr	r3, [pc, #128]	@ (8001798 <HAL_UART_MspInit+0xd0>)
 8001716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001718:	4a1f      	ldr	r2, [pc, #124]	@ (8001798 <HAL_UART_MspInit+0xd0>)
 800171a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800171e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001720:	4b1d      	ldr	r3, [pc, #116]	@ (8001798 <HAL_UART_MspInit+0xd0>)
 8001722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001724:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172c:	4b1a      	ldr	r3, [pc, #104]	@ (8001798 <HAL_UART_MspInit+0xd0>)
 800172e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001730:	4a19      	ldr	r2, [pc, #100]	@ (8001798 <HAL_UART_MspInit+0xd0>)
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001738:	4b17      	ldr	r3, [pc, #92]	@ (8001798 <HAL_UART_MspInit+0xd0>)
 800173a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001744:	2304      	movs	r3, #4
 8001746:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001750:	2303      	movs	r3, #3
 8001752:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001754:	2307      	movs	r3, #7
 8001756:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001758:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800175c:	4619      	mov	r1, r3
 800175e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001762:	f000 fa4f 	bl	8001c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001766:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800176a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176c:	2302      	movs	r3, #2
 800176e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001774:	2303      	movs	r3, #3
 8001776:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001778:	2303      	movs	r3, #3
 800177a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800177c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001780:	4619      	mov	r1, r3
 8001782:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001786:	f000 fa3d 	bl	8001c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800178a:	bf00      	nop
 800178c:	3778      	adds	r7, #120	@ 0x78
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40004400 	.word	0x40004400
 8001798:	40021000 	.word	0x40021000

0800179c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <NMI_Handler+0x4>

080017a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <HardFault_Handler+0x4>

080017ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <MemManage_Handler+0x4>

080017b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <BusFault_Handler+0x4>

080017bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <UsageFault_Handler+0x4>

080017c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f2:	f000 f8dd 	bl	80019b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001804:	4a14      	ldr	r2, [pc, #80]	@ (8001858 <_sbrk+0x5c>)
 8001806:	4b15      	ldr	r3, [pc, #84]	@ (800185c <_sbrk+0x60>)
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001810:	4b13      	ldr	r3, [pc, #76]	@ (8001860 <_sbrk+0x64>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d102      	bne.n	800181e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001818:	4b11      	ldr	r3, [pc, #68]	@ (8001860 <_sbrk+0x64>)
 800181a:	4a12      	ldr	r2, [pc, #72]	@ (8001864 <_sbrk+0x68>)
 800181c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800181e:	4b10      	ldr	r3, [pc, #64]	@ (8001860 <_sbrk+0x64>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	429a      	cmp	r2, r3
 800182a:	d207      	bcs.n	800183c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800182c:	f003 f960 	bl	8004af0 <__errno>
 8001830:	4603      	mov	r3, r0
 8001832:	220c      	movs	r2, #12
 8001834:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001836:	f04f 33ff 	mov.w	r3, #4294967295
 800183a:	e009      	b.n	8001850 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800183c:	4b08      	ldr	r3, [pc, #32]	@ (8001860 <_sbrk+0x64>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001842:	4b07      	ldr	r3, [pc, #28]	@ (8001860 <_sbrk+0x64>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	4a05      	ldr	r2, [pc, #20]	@ (8001860 <_sbrk+0x64>)
 800184c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800184e:	68fb      	ldr	r3, [r7, #12]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20010000 	.word	0x20010000
 800185c:	00000400 	.word	0x00000400
 8001860:	20000184 	.word	0x20000184
 8001864:	200002d8 	.word	0x200002d8

08001868 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800186c:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <SystemInit+0x20>)
 800186e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001872:	4a05      	ldr	r2, [pc, #20]	@ (8001888 <SystemInit+0x20>)
 8001874:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001878:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <uart_serial_print>:

    @{
*/
/******************************************************************************/
void uart_serial_print(char* data, uint8_t size)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	70fb      	strb	r3, [r7, #3]
    HAL_UART_Transmit(&huart2, data, size, 100);
 8001898:	78fb      	ldrb	r3, [r7, #3]
 800189a:	b29a      	uxth	r2, r3
 800189c:	2364      	movs	r3, #100	@ 0x64
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	4803      	ldr	r0, [pc, #12]	@ (80018b0 <uart_serial_print+0x24>)
 80018a2:	f002 fc31 	bl	8004108 <HAL_UART_Transmit>
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	200000dc 	.word	0x200000dc

080018b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018b8:	f7ff ffd6 	bl	8001868 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018bc:	480c      	ldr	r0, [pc, #48]	@ (80018f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80018be:	490d      	ldr	r1, [pc, #52]	@ (80018f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018c0:	4a0d      	ldr	r2, [pc, #52]	@ (80018f8 <LoopForever+0xe>)
  movs r3, #0
 80018c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018c4:	e002      	b.n	80018cc <LoopCopyDataInit>

080018c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ca:	3304      	adds	r3, #4

080018cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d0:	d3f9      	bcc.n	80018c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018d2:	4a0a      	ldr	r2, [pc, #40]	@ (80018fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80018d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001900 <LoopForever+0x16>)
  movs r3, #0
 80018d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d8:	e001      	b.n	80018de <LoopFillZerobss>

080018da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018dc:	3204      	adds	r2, #4

080018de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e0:	d3fb      	bcc.n	80018da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018e2:	f003 f90b 	bl	8004afc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018e6:	f7ff fb8f 	bl	8001008 <main>

080018ea <LoopForever>:

LoopForever:
    b LoopForever
 80018ea:	e7fe      	b.n	80018ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018ec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80018f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018f4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80018f8:	08005868 	.word	0x08005868
  ldr r2, =_sbss
 80018fc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001900:	200002d4 	.word	0x200002d4

08001904 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001904:	e7fe      	b.n	8001904 <ADC1_IRQHandler>

08001906 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800190c:	2300      	movs	r3, #0
 800190e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001910:	2003      	movs	r0, #3
 8001912:	f000 f943 	bl	8001b9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001916:	2000      	movs	r0, #0
 8001918:	f000 f80e 	bl	8001938 <HAL_InitTick>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d002      	beq.n	8001928 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	71fb      	strb	r3, [r7, #7]
 8001926:	e001      	b.n	800192c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001928:	f7ff fe68 	bl	80015fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800192c:	79fb      	ldrb	r3, [r7, #7]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
	...

08001938 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001940:	2300      	movs	r3, #0
 8001942:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001944:	4b17      	ldr	r3, [pc, #92]	@ (80019a4 <HAL_InitTick+0x6c>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d023      	beq.n	8001994 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800194c:	4b16      	ldr	r3, [pc, #88]	@ (80019a8 <HAL_InitTick+0x70>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4b14      	ldr	r3, [pc, #80]	@ (80019a4 <HAL_InitTick+0x6c>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	4619      	mov	r1, r3
 8001956:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800195a:	fbb3 f3f1 	udiv	r3, r3, r1
 800195e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001962:	4618      	mov	r0, r3
 8001964:	f000 f941 	bl	8001bea <HAL_SYSTICK_Config>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d10f      	bne.n	800198e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b0f      	cmp	r3, #15
 8001972:	d809      	bhi.n	8001988 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001974:	2200      	movs	r2, #0
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	f04f 30ff 	mov.w	r0, #4294967295
 800197c:	f000 f919 	bl	8001bb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001980:	4a0a      	ldr	r2, [pc, #40]	@ (80019ac <HAL_InitTick+0x74>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	e007      	b.n	8001998 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	73fb      	strb	r3, [r7, #15]
 800198c:	e004      	b.n	8001998 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	73fb      	strb	r3, [r7, #15]
 8001992:	e001      	b.n	8001998 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001998:	7bfb      	ldrb	r3, [r7, #15]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000008 	.word	0x20000008
 80019a8:	20000000 	.word	0x20000000
 80019ac:	20000004 	.word	0x20000004

080019b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019b4:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <HAL_IncTick+0x20>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	461a      	mov	r2, r3
 80019ba:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <HAL_IncTick+0x24>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4413      	add	r3, r2
 80019c0:	4a04      	ldr	r2, [pc, #16]	@ (80019d4 <HAL_IncTick+0x24>)
 80019c2:	6013      	str	r3, [r2, #0]
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	20000008 	.word	0x20000008
 80019d4:	20000188 	.word	0x20000188

080019d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return uwTick;
 80019dc:	4b03      	ldr	r3, [pc, #12]	@ (80019ec <HAL_GetTick+0x14>)
 80019de:	681b      	ldr	r3, [r3, #0]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	20000188 	.word	0x20000188

080019f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019f8:	f7ff ffee 	bl	80019d8 <HAL_GetTick>
 80019fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a08:	d005      	beq.n	8001a16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a34 <HAL_Delay+0x44>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4413      	add	r3, r2
 8001a14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a16:	bf00      	nop
 8001a18:	f7ff ffde 	bl	80019d8 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d8f7      	bhi.n	8001a18 <HAL_Delay+0x28>
  {
  }
}
 8001a28:	bf00      	nop
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000008 	.word	0x20000008

08001a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a48:	4b0c      	ldr	r3, [pc, #48]	@ (8001a7c <__NVIC_SetPriorityGrouping+0x44>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a4e:	68ba      	ldr	r2, [r7, #8]
 8001a50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a54:	4013      	ands	r3, r2
 8001a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a6a:	4a04      	ldr	r2, [pc, #16]	@ (8001a7c <__NVIC_SetPriorityGrouping+0x44>)
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	60d3      	str	r3, [r2, #12]
}
 8001a70:	bf00      	nop
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a84:	4b04      	ldr	r3, [pc, #16]	@ (8001a98 <__NVIC_GetPriorityGrouping+0x18>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	0a1b      	lsrs	r3, r3, #8
 8001a8a:	f003 0307 	and.w	r3, r3, #7
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	6039      	str	r1, [r7, #0]
 8001aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	db0a      	blt.n	8001ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	490c      	ldr	r1, [pc, #48]	@ (8001ae8 <__NVIC_SetPriority+0x4c>)
 8001ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aba:	0112      	lsls	r2, r2, #4
 8001abc:	b2d2      	uxtb	r2, r2
 8001abe:	440b      	add	r3, r1
 8001ac0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ac4:	e00a      	b.n	8001adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	4908      	ldr	r1, [pc, #32]	@ (8001aec <__NVIC_SetPriority+0x50>)
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	f003 030f 	and.w	r3, r3, #15
 8001ad2:	3b04      	subs	r3, #4
 8001ad4:	0112      	lsls	r2, r2, #4
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	440b      	add	r3, r1
 8001ada:	761a      	strb	r2, [r3, #24]
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	e000e100 	.word	0xe000e100
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b089      	sub	sp, #36	@ 0x24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f1c3 0307 	rsb	r3, r3, #7
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	bf28      	it	cs
 8001b0e:	2304      	movcs	r3, #4
 8001b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	3304      	adds	r3, #4
 8001b16:	2b06      	cmp	r3, #6
 8001b18:	d902      	bls.n	8001b20 <NVIC_EncodePriority+0x30>
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3b03      	subs	r3, #3
 8001b1e:	e000      	b.n	8001b22 <NVIC_EncodePriority+0x32>
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b24:	f04f 32ff 	mov.w	r2, #4294967295
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43da      	mvns	r2, r3
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	401a      	ands	r2, r3
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b38:	f04f 31ff 	mov.w	r1, #4294967295
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b42:	43d9      	mvns	r1, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b48:	4313      	orrs	r3, r2
         );
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3724      	adds	r7, #36	@ 0x24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3b01      	subs	r3, #1
 8001b64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b68:	d301      	bcc.n	8001b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e00f      	b.n	8001b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b98 <SysTick_Config+0x40>)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b76:	210f      	movs	r1, #15
 8001b78:	f04f 30ff 	mov.w	r0, #4294967295
 8001b7c:	f7ff ff8e 	bl	8001a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b80:	4b05      	ldr	r3, [pc, #20]	@ (8001b98 <SysTick_Config+0x40>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b86:	4b04      	ldr	r3, [pc, #16]	@ (8001b98 <SysTick_Config+0x40>)
 8001b88:	2207      	movs	r2, #7
 8001b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	e000e010 	.word	0xe000e010

08001b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff ff47 	bl	8001a38 <__NVIC_SetPriorityGrouping>
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b086      	sub	sp, #24
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	4603      	mov	r3, r0
 8001bba:	60b9      	str	r1, [r7, #8]
 8001bbc:	607a      	str	r2, [r7, #4]
 8001bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bc4:	f7ff ff5c 	bl	8001a80 <__NVIC_GetPriorityGrouping>
 8001bc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	68b9      	ldr	r1, [r7, #8]
 8001bce:	6978      	ldr	r0, [r7, #20]
 8001bd0:	f7ff ff8e 	bl	8001af0 <NVIC_EncodePriority>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bda:	4611      	mov	r1, r2
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ff5d 	bl	8001a9c <__NVIC_SetPriority>
}
 8001be2:	bf00      	nop
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff ffb0 	bl	8001b58 <SysTick_Config>
 8001bf8:	4603      	mov	r3, r0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b087      	sub	sp, #28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c12:	e148      	b.n	8001ea6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	2101      	movs	r1, #1
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c20:	4013      	ands	r3, r2
 8001c22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 813a 	beq.w	8001ea0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d005      	beq.n	8001c44 <HAL_GPIO_Init+0x40>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d130      	bne.n	8001ca6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	2203      	movs	r2, #3
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43db      	mvns	r3, r3
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	4013      	ands	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	091b      	lsrs	r3, r3, #4
 8001c90:	f003 0201 	and.w	r2, r3, #1
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	2b03      	cmp	r3, #3
 8001cb0:	d017      	beq.n	8001ce2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	689a      	ldr	r2, [r3, #8]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d123      	bne.n	8001d36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	08da      	lsrs	r2, r3, #3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3208      	adds	r2, #8
 8001cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	220f      	movs	r2, #15
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	691a      	ldr	r2, [r3, #16]
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	08da      	lsrs	r2, r3, #3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3208      	adds	r2, #8
 8001d30:	6939      	ldr	r1, [r7, #16]
 8001d32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	2203      	movs	r2, #3
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 0203 	and.w	r2, r3, #3
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 8094 	beq.w	8001ea0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d78:	4b52      	ldr	r3, [pc, #328]	@ (8001ec4 <HAL_GPIO_Init+0x2c0>)
 8001d7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d7c:	4a51      	ldr	r2, [pc, #324]	@ (8001ec4 <HAL_GPIO_Init+0x2c0>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d84:	4b4f      	ldr	r3, [pc, #316]	@ (8001ec4 <HAL_GPIO_Init+0x2c0>)
 8001d86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d90:	4a4d      	ldr	r2, [pc, #308]	@ (8001ec8 <HAL_GPIO_Init+0x2c4>)
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	089b      	lsrs	r3, r3, #2
 8001d96:	3302      	adds	r3, #2
 8001d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	220f      	movs	r2, #15
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	4013      	ands	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001dba:	d00d      	beq.n	8001dd8 <HAL_GPIO_Init+0x1d4>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a43      	ldr	r2, [pc, #268]	@ (8001ecc <HAL_GPIO_Init+0x2c8>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d007      	beq.n	8001dd4 <HAL_GPIO_Init+0x1d0>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a42      	ldr	r2, [pc, #264]	@ (8001ed0 <HAL_GPIO_Init+0x2cc>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d101      	bne.n	8001dd0 <HAL_GPIO_Init+0x1cc>
 8001dcc:	2302      	movs	r3, #2
 8001dce:	e004      	b.n	8001dda <HAL_GPIO_Init+0x1d6>
 8001dd0:	2307      	movs	r3, #7
 8001dd2:	e002      	b.n	8001dda <HAL_GPIO_Init+0x1d6>
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <HAL_GPIO_Init+0x1d6>
 8001dd8:	2300      	movs	r3, #0
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	f002 0203 	and.w	r2, r2, #3
 8001de0:	0092      	lsls	r2, r2, #2
 8001de2:	4093      	lsls	r3, r2
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dea:	4937      	ldr	r1, [pc, #220]	@ (8001ec8 <HAL_GPIO_Init+0x2c4>)
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	089b      	lsrs	r3, r3, #2
 8001df0:	3302      	adds	r3, #2
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001df8:	4b36      	ldr	r3, [pc, #216]	@ (8001ed4 <HAL_GPIO_Init+0x2d0>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	43db      	mvns	r3, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4013      	ands	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e1c:	4a2d      	ldr	r2, [pc, #180]	@ (8001ed4 <HAL_GPIO_Init+0x2d0>)
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e22:	4b2c      	ldr	r3, [pc, #176]	@ (8001ed4 <HAL_GPIO_Init+0x2d0>)
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e46:	4a23      	ldr	r2, [pc, #140]	@ (8001ed4 <HAL_GPIO_Init+0x2d0>)
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e4c:	4b21      	ldr	r3, [pc, #132]	@ (8001ed4 <HAL_GPIO_Init+0x2d0>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	43db      	mvns	r3, r3
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e70:	4a18      	ldr	r2, [pc, #96]	@ (8001ed4 <HAL_GPIO_Init+0x2d0>)
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e76:	4b17      	ldr	r3, [pc, #92]	@ (8001ed4 <HAL_GPIO_Init+0x2d0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	4013      	ands	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e9a:	4a0e      	ldr	r2, [pc, #56]	@ (8001ed4 <HAL_GPIO_Init+0x2d0>)
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f47f aeaf 	bne.w	8001c14 <HAL_GPIO_Init+0x10>
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	bf00      	nop
 8001eba:	371c      	adds	r7, #28
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40010000 	.word	0x40010000
 8001ecc:	48000400 	.word	0x48000400
 8001ed0:	48000800 	.word	0x48000800
 8001ed4:	40010400 	.word	0x40010400

08001ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	807b      	strh	r3, [r7, #2]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ee8:	787b      	ldrb	r3, [r7, #1]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001eee:	887a      	ldrh	r2, [r7, #2]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ef4:	e002      	b.n	8001efc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ef6:	887a      	ldrh	r2, [r7, #2]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f0c:	4b04      	ldr	r3, [pc, #16]	@ (8001f20 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40007000 	.word	0x40007000

08001f24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f32:	d130      	bne.n	8001f96 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f34:	4b23      	ldr	r3, [pc, #140]	@ (8001fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f40:	d038      	beq.n	8001fb4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f42:	4b20      	ldr	r3, [pc, #128]	@ (8001fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f4a:	4a1e      	ldr	r2, [pc, #120]	@ (8001fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f4c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f50:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f52:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2232      	movs	r2, #50	@ 0x32
 8001f58:	fb02 f303 	mul.w	r3, r2, r3
 8001f5c:	4a1b      	ldr	r2, [pc, #108]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f62:	0c9b      	lsrs	r3, r3, #18
 8001f64:	3301      	adds	r3, #1
 8001f66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f68:	e002      	b.n	8001f70 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f70:	4b14      	ldr	r3, [pc, #80]	@ (8001fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f72:	695b      	ldr	r3, [r3, #20]
 8001f74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f7c:	d102      	bne.n	8001f84 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1f2      	bne.n	8001f6a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f84:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f90:	d110      	bne.n	8001fb4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e00f      	b.n	8001fb6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f96:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fa2:	d007      	beq.n	8001fb4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fa4:	4b07      	ldr	r3, [pc, #28]	@ (8001fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fac:	4a05      	ldr	r2, [pc, #20]	@ (8001fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fb2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	40007000 	.word	0x40007000
 8001fc8:	20000000 	.word	0x20000000
 8001fcc:	431bde83 	.word	0x431bde83

08001fd0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d102      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	f000 bc02 	b.w	80027e8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fe4:	4b96      	ldr	r3, [pc, #600]	@ (8002240 <HAL_RCC_OscConfig+0x270>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 030c 	and.w	r3, r3, #12
 8001fec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fee:	4b94      	ldr	r3, [pc, #592]	@ (8002240 <HAL_RCC_OscConfig+0x270>)
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0310 	and.w	r3, r3, #16
 8002000:	2b00      	cmp	r3, #0
 8002002:	f000 80e4 	beq.w	80021ce <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d007      	beq.n	800201c <HAL_RCC_OscConfig+0x4c>
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	2b0c      	cmp	r3, #12
 8002010:	f040 808b 	bne.w	800212a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	2b01      	cmp	r3, #1
 8002018:	f040 8087 	bne.w	800212a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800201c:	4b88      	ldr	r3, [pc, #544]	@ (8002240 <HAL_RCC_OscConfig+0x270>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <HAL_RCC_OscConfig+0x64>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e3d9      	b.n	80027e8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a1a      	ldr	r2, [r3, #32]
 8002038:	4b81      	ldr	r3, [pc, #516]	@ (8002240 <HAL_RCC_OscConfig+0x270>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0308 	and.w	r3, r3, #8
 8002040:	2b00      	cmp	r3, #0
 8002042:	d004      	beq.n	800204e <HAL_RCC_OscConfig+0x7e>
 8002044:	4b7e      	ldr	r3, [pc, #504]	@ (8002240 <HAL_RCC_OscConfig+0x270>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800204c:	e005      	b.n	800205a <HAL_RCC_OscConfig+0x8a>
 800204e:	4b7c      	ldr	r3, [pc, #496]	@ (8002240 <HAL_RCC_OscConfig+0x270>)
 8002050:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002054:	091b      	lsrs	r3, r3, #4
 8002056:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800205a:	4293      	cmp	r3, r2
 800205c:	d223      	bcs.n	80020a6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	4618      	mov	r0, r3
 8002064:	f000 fd8c 	bl	8002b80 <RCC_SetFlashLatencyFromMSIRange>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e3ba      	b.n	80027e8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002072:	4b73      	ldr	r3, [pc, #460]	@ (8002240 <HAL_RCC_OscConfig+0x270>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a72      	ldr	r2, [pc, #456]	@ (8002240 <HAL_RCC_OscConfig+0x270>)
 8002078:	f043 0308 	orr.w	r3, r3, #8
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	4b70      	ldr	r3, [pc, #448]	@ (8002240 <HAL_RCC_OscConfig+0x270>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	496d      	ldr	r1, [pc, #436]	@ (8002240 <HAL_RCC_OscConfig+0x270>)
 800208c:	4313      	orrs	r3, r2
 800208e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002090:	4b6b      	ldr	r3, [pc, #428]	@ (8002240 <HAL_RCC_OscConfig+0x270>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	021b      	lsls	r3, r3, #8
 800209e:	4968      	ldr	r1, [pc, #416]	@ (8002240 <HAL_RCC_OscConfig+0x270>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	604b      	str	r3, [r1, #4]
 80020a4:	e025      	b.n	80020f2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020a6:	4b66      	ldr	r3, [pc, #408]	@ (8002240 <HAL_RCC_OscConfig+0x270>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a65      	ldr	r2, [pc, #404]	@ (8002240 <HAL_RCC_OscConfig+0x270>)
 80020ac:	f043 0308 	orr.w	r3, r3, #8
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	4b63      	ldr	r3, [pc, #396]	@ (8002240 <HAL_RCC_OscConfig+0x270>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	4960      	ldr	r1, [pc, #384]	@ (8002240 <HAL_RCC_OscConfig+0x270>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020c4:	4b5e      	ldr	r3, [pc, #376]	@ (8002240 <HAL_RCC_OscConfig+0x270>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	69db      	ldr	r3, [r3, #28]
 80020d0:	021b      	lsls	r3, r3, #8
 80020d2:	495b      	ldr	r1, [pc, #364]	@ (8002240 <HAL_RCC_OscConfig+0x270>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d109      	bne.n	80020f2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 fd4c 	bl	8002b80 <RCC_SetFlashLatencyFromMSIRange>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e37a      	b.n	80027e8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020f2:	f000 fc81 	bl	80029f8 <HAL_RCC_GetSysClockFreq>
 80020f6:	4602      	mov	r2, r0
 80020f8:	4b51      	ldr	r3, [pc, #324]	@ (8002240 <HAL_RCC_OscConfig+0x270>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	091b      	lsrs	r3, r3, #4
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	4950      	ldr	r1, [pc, #320]	@ (8002244 <HAL_RCC_OscConfig+0x274>)
 8002104:	5ccb      	ldrb	r3, [r1, r3]
 8002106:	f003 031f 	and.w	r3, r3, #31
 800210a:	fa22 f303 	lsr.w	r3, r2, r3
 800210e:	4a4e      	ldr	r2, [pc, #312]	@ (8002248 <HAL_RCC_OscConfig+0x278>)
 8002110:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002112:	4b4e      	ldr	r3, [pc, #312]	@ (800224c <HAL_RCC_OscConfig+0x27c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff fc0e 	bl	8001938 <HAL_InitTick>
 800211c:	4603      	mov	r3, r0
 800211e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002120:	7bfb      	ldrb	r3, [r7, #15]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d052      	beq.n	80021cc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002126:	7bfb      	ldrb	r3, [r7, #15]
 8002128:	e35e      	b.n	80027e8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d032      	beq.n	8002198 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002132:	4b43      	ldr	r3, [pc, #268]	@ (8002240 <HAL_RCC_OscConfig+0x270>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a42      	ldr	r2, [pc, #264]	@ (8002240 <HAL_RCC_OscConfig+0x270>)
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800213e:	f7ff fc4b 	bl	80019d8 <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002146:	f7ff fc47 	bl	80019d8 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e347      	b.n	80027e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002158:	4b39      	ldr	r3, [pc, #228]	@ (8002240 <HAL_RCC_OscConfig+0x270>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0f0      	beq.n	8002146 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002164:	4b36      	ldr	r3, [pc, #216]	@ (8002240 <HAL_RCC_OscConfig+0x270>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a35      	ldr	r2, [pc, #212]	@ (8002240 <HAL_RCC_OscConfig+0x270>)
 800216a:	f043 0308 	orr.w	r3, r3, #8
 800216e:	6013      	str	r3, [r2, #0]
 8002170:	4b33      	ldr	r3, [pc, #204]	@ (8002240 <HAL_RCC_OscConfig+0x270>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	4930      	ldr	r1, [pc, #192]	@ (8002240 <HAL_RCC_OscConfig+0x270>)
 800217e:	4313      	orrs	r3, r2
 8002180:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002182:	4b2f      	ldr	r3, [pc, #188]	@ (8002240 <HAL_RCC_OscConfig+0x270>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	021b      	lsls	r3, r3, #8
 8002190:	492b      	ldr	r1, [pc, #172]	@ (8002240 <HAL_RCC_OscConfig+0x270>)
 8002192:	4313      	orrs	r3, r2
 8002194:	604b      	str	r3, [r1, #4]
 8002196:	e01a      	b.n	80021ce <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002198:	4b29      	ldr	r3, [pc, #164]	@ (8002240 <HAL_RCC_OscConfig+0x270>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a28      	ldr	r2, [pc, #160]	@ (8002240 <HAL_RCC_OscConfig+0x270>)
 800219e:	f023 0301 	bic.w	r3, r3, #1
 80021a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021a4:	f7ff fc18 	bl	80019d8 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021ac:	f7ff fc14 	bl	80019d8 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e314      	b.n	80027e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021be:	4b20      	ldr	r3, [pc, #128]	@ (8002240 <HAL_RCC_OscConfig+0x270>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f0      	bne.n	80021ac <HAL_RCC_OscConfig+0x1dc>
 80021ca:	e000      	b.n	80021ce <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d073      	beq.n	80022c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	2b08      	cmp	r3, #8
 80021de:	d005      	beq.n	80021ec <HAL_RCC_OscConfig+0x21c>
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	2b0c      	cmp	r3, #12
 80021e4:	d10e      	bne.n	8002204 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	2b03      	cmp	r3, #3
 80021ea:	d10b      	bne.n	8002204 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ec:	4b14      	ldr	r3, [pc, #80]	@ (8002240 <HAL_RCC_OscConfig+0x270>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d063      	beq.n	80022c0 <HAL_RCC_OscConfig+0x2f0>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d15f      	bne.n	80022c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e2f1      	b.n	80027e8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800220c:	d106      	bne.n	800221c <HAL_RCC_OscConfig+0x24c>
 800220e:	4b0c      	ldr	r3, [pc, #48]	@ (8002240 <HAL_RCC_OscConfig+0x270>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a0b      	ldr	r2, [pc, #44]	@ (8002240 <HAL_RCC_OscConfig+0x270>)
 8002214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	e025      	b.n	8002268 <HAL_RCC_OscConfig+0x298>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002224:	d114      	bne.n	8002250 <HAL_RCC_OscConfig+0x280>
 8002226:	4b06      	ldr	r3, [pc, #24]	@ (8002240 <HAL_RCC_OscConfig+0x270>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a05      	ldr	r2, [pc, #20]	@ (8002240 <HAL_RCC_OscConfig+0x270>)
 800222c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	4b03      	ldr	r3, [pc, #12]	@ (8002240 <HAL_RCC_OscConfig+0x270>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a02      	ldr	r2, [pc, #8]	@ (8002240 <HAL_RCC_OscConfig+0x270>)
 8002238:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	e013      	b.n	8002268 <HAL_RCC_OscConfig+0x298>
 8002240:	40021000 	.word	0x40021000
 8002244:	080057dc 	.word	0x080057dc
 8002248:	20000000 	.word	0x20000000
 800224c:	20000004 	.word	0x20000004
 8002250:	4ba0      	ldr	r3, [pc, #640]	@ (80024d4 <HAL_RCC_OscConfig+0x504>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a9f      	ldr	r2, [pc, #636]	@ (80024d4 <HAL_RCC_OscConfig+0x504>)
 8002256:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800225a:	6013      	str	r3, [r2, #0]
 800225c:	4b9d      	ldr	r3, [pc, #628]	@ (80024d4 <HAL_RCC_OscConfig+0x504>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a9c      	ldr	r2, [pc, #624]	@ (80024d4 <HAL_RCC_OscConfig+0x504>)
 8002262:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002266:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d013      	beq.n	8002298 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002270:	f7ff fbb2 	bl	80019d8 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002278:	f7ff fbae 	bl	80019d8 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b64      	cmp	r3, #100	@ 0x64
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e2ae      	b.n	80027e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800228a:	4b92      	ldr	r3, [pc, #584]	@ (80024d4 <HAL_RCC_OscConfig+0x504>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0f0      	beq.n	8002278 <HAL_RCC_OscConfig+0x2a8>
 8002296:	e014      	b.n	80022c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002298:	f7ff fb9e 	bl	80019d8 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a0:	f7ff fb9a 	bl	80019d8 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b64      	cmp	r3, #100	@ 0x64
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e29a      	b.n	80027e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022b2:	4b88      	ldr	r3, [pc, #544]	@ (80024d4 <HAL_RCC_OscConfig+0x504>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f0      	bne.n	80022a0 <HAL_RCC_OscConfig+0x2d0>
 80022be:	e000      	b.n	80022c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d060      	beq.n	8002390 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	d005      	beq.n	80022e0 <HAL_RCC_OscConfig+0x310>
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	2b0c      	cmp	r3, #12
 80022d8:	d119      	bne.n	800230e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d116      	bne.n	800230e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022e0:	4b7c      	ldr	r3, [pc, #496]	@ (80024d4 <HAL_RCC_OscConfig+0x504>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d005      	beq.n	80022f8 <HAL_RCC_OscConfig+0x328>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e277      	b.n	80027e8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f8:	4b76      	ldr	r3, [pc, #472]	@ (80024d4 <HAL_RCC_OscConfig+0x504>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	061b      	lsls	r3, r3, #24
 8002306:	4973      	ldr	r1, [pc, #460]	@ (80024d4 <HAL_RCC_OscConfig+0x504>)
 8002308:	4313      	orrs	r3, r2
 800230a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800230c:	e040      	b.n	8002390 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d023      	beq.n	800235e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002316:	4b6f      	ldr	r3, [pc, #444]	@ (80024d4 <HAL_RCC_OscConfig+0x504>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a6e      	ldr	r2, [pc, #440]	@ (80024d4 <HAL_RCC_OscConfig+0x504>)
 800231c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002322:	f7ff fb59 	bl	80019d8 <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800232a:	f7ff fb55 	bl	80019d8 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e255      	b.n	80027e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800233c:	4b65      	ldr	r3, [pc, #404]	@ (80024d4 <HAL_RCC_OscConfig+0x504>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0f0      	beq.n	800232a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002348:	4b62      	ldr	r3, [pc, #392]	@ (80024d4 <HAL_RCC_OscConfig+0x504>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	061b      	lsls	r3, r3, #24
 8002356:	495f      	ldr	r1, [pc, #380]	@ (80024d4 <HAL_RCC_OscConfig+0x504>)
 8002358:	4313      	orrs	r3, r2
 800235a:	604b      	str	r3, [r1, #4]
 800235c:	e018      	b.n	8002390 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800235e:	4b5d      	ldr	r3, [pc, #372]	@ (80024d4 <HAL_RCC_OscConfig+0x504>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a5c      	ldr	r2, [pc, #368]	@ (80024d4 <HAL_RCC_OscConfig+0x504>)
 8002364:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002368:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236a:	f7ff fb35 	bl	80019d8 <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002372:	f7ff fb31 	bl	80019d8 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e231      	b.n	80027e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002384:	4b53      	ldr	r3, [pc, #332]	@ (80024d4 <HAL_RCC_OscConfig+0x504>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1f0      	bne.n	8002372 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0308 	and.w	r3, r3, #8
 8002398:	2b00      	cmp	r3, #0
 800239a:	d03c      	beq.n	8002416 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d01c      	beq.n	80023de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023a4:	4b4b      	ldr	r3, [pc, #300]	@ (80024d4 <HAL_RCC_OscConfig+0x504>)
 80023a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023aa:	4a4a      	ldr	r2, [pc, #296]	@ (80024d4 <HAL_RCC_OscConfig+0x504>)
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b4:	f7ff fb10 	bl	80019d8 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023bc:	f7ff fb0c 	bl	80019d8 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e20c      	b.n	80027e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023ce:	4b41      	ldr	r3, [pc, #260]	@ (80024d4 <HAL_RCC_OscConfig+0x504>)
 80023d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0ef      	beq.n	80023bc <HAL_RCC_OscConfig+0x3ec>
 80023dc:	e01b      	b.n	8002416 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023de:	4b3d      	ldr	r3, [pc, #244]	@ (80024d4 <HAL_RCC_OscConfig+0x504>)
 80023e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023e4:	4a3b      	ldr	r2, [pc, #236]	@ (80024d4 <HAL_RCC_OscConfig+0x504>)
 80023e6:	f023 0301 	bic.w	r3, r3, #1
 80023ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ee:	f7ff faf3 	bl	80019d8 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023f6:	f7ff faef 	bl	80019d8 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e1ef      	b.n	80027e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002408:	4b32      	ldr	r3, [pc, #200]	@ (80024d4 <HAL_RCC_OscConfig+0x504>)
 800240a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1ef      	bne.n	80023f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 80a6 	beq.w	8002570 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002424:	2300      	movs	r3, #0
 8002426:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002428:	4b2a      	ldr	r3, [pc, #168]	@ (80024d4 <HAL_RCC_OscConfig+0x504>)
 800242a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800242c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10d      	bne.n	8002450 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002434:	4b27      	ldr	r3, [pc, #156]	@ (80024d4 <HAL_RCC_OscConfig+0x504>)
 8002436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002438:	4a26      	ldr	r2, [pc, #152]	@ (80024d4 <HAL_RCC_OscConfig+0x504>)
 800243a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800243e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002440:	4b24      	ldr	r3, [pc, #144]	@ (80024d4 <HAL_RCC_OscConfig+0x504>)
 8002442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002444:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800244c:	2301      	movs	r3, #1
 800244e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002450:	4b21      	ldr	r3, [pc, #132]	@ (80024d8 <HAL_RCC_OscConfig+0x508>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002458:	2b00      	cmp	r3, #0
 800245a:	d118      	bne.n	800248e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800245c:	4b1e      	ldr	r3, [pc, #120]	@ (80024d8 <HAL_RCC_OscConfig+0x508>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a1d      	ldr	r2, [pc, #116]	@ (80024d8 <HAL_RCC_OscConfig+0x508>)
 8002462:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002466:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002468:	f7ff fab6 	bl	80019d8 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002470:	f7ff fab2 	bl	80019d8 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e1b2      	b.n	80027e8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002482:	4b15      	ldr	r3, [pc, #84]	@ (80024d8 <HAL_RCC_OscConfig+0x508>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0f0      	beq.n	8002470 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d108      	bne.n	80024a8 <HAL_RCC_OscConfig+0x4d8>
 8002496:	4b0f      	ldr	r3, [pc, #60]	@ (80024d4 <HAL_RCC_OscConfig+0x504>)
 8002498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800249c:	4a0d      	ldr	r2, [pc, #52]	@ (80024d4 <HAL_RCC_OscConfig+0x504>)
 800249e:	f043 0301 	orr.w	r3, r3, #1
 80024a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024a6:	e029      	b.n	80024fc <HAL_RCC_OscConfig+0x52c>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2b05      	cmp	r3, #5
 80024ae:	d115      	bne.n	80024dc <HAL_RCC_OscConfig+0x50c>
 80024b0:	4b08      	ldr	r3, [pc, #32]	@ (80024d4 <HAL_RCC_OscConfig+0x504>)
 80024b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024b6:	4a07      	ldr	r2, [pc, #28]	@ (80024d4 <HAL_RCC_OscConfig+0x504>)
 80024b8:	f043 0304 	orr.w	r3, r3, #4
 80024bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024c0:	4b04      	ldr	r3, [pc, #16]	@ (80024d4 <HAL_RCC_OscConfig+0x504>)
 80024c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024c6:	4a03      	ldr	r2, [pc, #12]	@ (80024d4 <HAL_RCC_OscConfig+0x504>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024d0:	e014      	b.n	80024fc <HAL_RCC_OscConfig+0x52c>
 80024d2:	bf00      	nop
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40007000 	.word	0x40007000
 80024dc:	4b9a      	ldr	r3, [pc, #616]	@ (8002748 <HAL_RCC_OscConfig+0x778>)
 80024de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024e2:	4a99      	ldr	r2, [pc, #612]	@ (8002748 <HAL_RCC_OscConfig+0x778>)
 80024e4:	f023 0301 	bic.w	r3, r3, #1
 80024e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024ec:	4b96      	ldr	r3, [pc, #600]	@ (8002748 <HAL_RCC_OscConfig+0x778>)
 80024ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024f2:	4a95      	ldr	r2, [pc, #596]	@ (8002748 <HAL_RCC_OscConfig+0x778>)
 80024f4:	f023 0304 	bic.w	r3, r3, #4
 80024f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d016      	beq.n	8002532 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002504:	f7ff fa68 	bl	80019d8 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800250a:	e00a      	b.n	8002522 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800250c:	f7ff fa64 	bl	80019d8 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800251a:	4293      	cmp	r3, r2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e162      	b.n	80027e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002522:	4b89      	ldr	r3, [pc, #548]	@ (8002748 <HAL_RCC_OscConfig+0x778>)
 8002524:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0ed      	beq.n	800250c <HAL_RCC_OscConfig+0x53c>
 8002530:	e015      	b.n	800255e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002532:	f7ff fa51 	bl	80019d8 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002538:	e00a      	b.n	8002550 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800253a:	f7ff fa4d 	bl	80019d8 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002548:	4293      	cmp	r3, r2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e14b      	b.n	80027e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002550:	4b7d      	ldr	r3, [pc, #500]	@ (8002748 <HAL_RCC_OscConfig+0x778>)
 8002552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1ed      	bne.n	800253a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800255e:	7ffb      	ldrb	r3, [r7, #31]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d105      	bne.n	8002570 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002564:	4b78      	ldr	r3, [pc, #480]	@ (8002748 <HAL_RCC_OscConfig+0x778>)
 8002566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002568:	4a77      	ldr	r2, [pc, #476]	@ (8002748 <HAL_RCC_OscConfig+0x778>)
 800256a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800256e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0320 	and.w	r3, r3, #32
 8002578:	2b00      	cmp	r3, #0
 800257a:	d03c      	beq.n	80025f6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002580:	2b00      	cmp	r3, #0
 8002582:	d01c      	beq.n	80025be <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002584:	4b70      	ldr	r3, [pc, #448]	@ (8002748 <HAL_RCC_OscConfig+0x778>)
 8002586:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800258a:	4a6f      	ldr	r2, [pc, #444]	@ (8002748 <HAL_RCC_OscConfig+0x778>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002594:	f7ff fa20 	bl	80019d8 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800259c:	f7ff fa1c 	bl	80019d8 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e11c      	b.n	80027e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025ae:	4b66      	ldr	r3, [pc, #408]	@ (8002748 <HAL_RCC_OscConfig+0x778>)
 80025b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0ef      	beq.n	800259c <HAL_RCC_OscConfig+0x5cc>
 80025bc:	e01b      	b.n	80025f6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025be:	4b62      	ldr	r3, [pc, #392]	@ (8002748 <HAL_RCC_OscConfig+0x778>)
 80025c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025c4:	4a60      	ldr	r2, [pc, #384]	@ (8002748 <HAL_RCC_OscConfig+0x778>)
 80025c6:	f023 0301 	bic.w	r3, r3, #1
 80025ca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ce:	f7ff fa03 	bl	80019d8 <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025d6:	f7ff f9ff 	bl	80019d8 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e0ff      	b.n	80027e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025e8:	4b57      	ldr	r3, [pc, #348]	@ (8002748 <HAL_RCC_OscConfig+0x778>)
 80025ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1ef      	bne.n	80025d6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 80f3 	beq.w	80027e6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002604:	2b02      	cmp	r3, #2
 8002606:	f040 80c9 	bne.w	800279c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800260a:	4b4f      	ldr	r3, [pc, #316]	@ (8002748 <HAL_RCC_OscConfig+0x778>)
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f003 0203 	and.w	r2, r3, #3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800261a:	429a      	cmp	r2, r3
 800261c:	d12c      	bne.n	8002678 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002628:	3b01      	subs	r3, #1
 800262a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800262c:	429a      	cmp	r2, r3
 800262e:	d123      	bne.n	8002678 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800263a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800263c:	429a      	cmp	r2, r3
 800263e:	d11b      	bne.n	8002678 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800264a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800264c:	429a      	cmp	r2, r3
 800264e:	d113      	bne.n	8002678 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800265a:	085b      	lsrs	r3, r3, #1
 800265c:	3b01      	subs	r3, #1
 800265e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002660:	429a      	cmp	r2, r3
 8002662:	d109      	bne.n	8002678 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266e:	085b      	lsrs	r3, r3, #1
 8002670:	3b01      	subs	r3, #1
 8002672:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002674:	429a      	cmp	r2, r3
 8002676:	d06b      	beq.n	8002750 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	2b0c      	cmp	r3, #12
 800267c:	d062      	beq.n	8002744 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800267e:	4b32      	ldr	r3, [pc, #200]	@ (8002748 <HAL_RCC_OscConfig+0x778>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e0ac      	b.n	80027e8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800268e:	4b2e      	ldr	r3, [pc, #184]	@ (8002748 <HAL_RCC_OscConfig+0x778>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a2d      	ldr	r2, [pc, #180]	@ (8002748 <HAL_RCC_OscConfig+0x778>)
 8002694:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002698:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800269a:	f7ff f99d 	bl	80019d8 <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a2:	f7ff f999 	bl	80019d8 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e099      	b.n	80027e8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026b4:	4b24      	ldr	r3, [pc, #144]	@ (8002748 <HAL_RCC_OscConfig+0x778>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1f0      	bne.n	80026a2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026c0:	4b21      	ldr	r3, [pc, #132]	@ (8002748 <HAL_RCC_OscConfig+0x778>)
 80026c2:	68da      	ldr	r2, [r3, #12]
 80026c4:	4b21      	ldr	r3, [pc, #132]	@ (800274c <HAL_RCC_OscConfig+0x77c>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80026d0:	3a01      	subs	r2, #1
 80026d2:	0112      	lsls	r2, r2, #4
 80026d4:	4311      	orrs	r1, r2
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80026da:	0212      	lsls	r2, r2, #8
 80026dc:	4311      	orrs	r1, r2
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80026e2:	0852      	lsrs	r2, r2, #1
 80026e4:	3a01      	subs	r2, #1
 80026e6:	0552      	lsls	r2, r2, #21
 80026e8:	4311      	orrs	r1, r2
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80026ee:	0852      	lsrs	r2, r2, #1
 80026f0:	3a01      	subs	r2, #1
 80026f2:	0652      	lsls	r2, r2, #25
 80026f4:	4311      	orrs	r1, r2
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80026fa:	06d2      	lsls	r2, r2, #27
 80026fc:	430a      	orrs	r2, r1
 80026fe:	4912      	ldr	r1, [pc, #72]	@ (8002748 <HAL_RCC_OscConfig+0x778>)
 8002700:	4313      	orrs	r3, r2
 8002702:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002704:	4b10      	ldr	r3, [pc, #64]	@ (8002748 <HAL_RCC_OscConfig+0x778>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a0f      	ldr	r2, [pc, #60]	@ (8002748 <HAL_RCC_OscConfig+0x778>)
 800270a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800270e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002710:	4b0d      	ldr	r3, [pc, #52]	@ (8002748 <HAL_RCC_OscConfig+0x778>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	4a0c      	ldr	r2, [pc, #48]	@ (8002748 <HAL_RCC_OscConfig+0x778>)
 8002716:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800271a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800271c:	f7ff f95c 	bl	80019d8 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002724:	f7ff f958 	bl	80019d8 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e058      	b.n	80027e8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002736:	4b04      	ldr	r3, [pc, #16]	@ (8002748 <HAL_RCC_OscConfig+0x778>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f0      	beq.n	8002724 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002742:	e050      	b.n	80027e6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e04f      	b.n	80027e8 <HAL_RCC_OscConfig+0x818>
 8002748:	40021000 	.word	0x40021000
 800274c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002750:	4b27      	ldr	r3, [pc, #156]	@ (80027f0 <HAL_RCC_OscConfig+0x820>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d144      	bne.n	80027e6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800275c:	4b24      	ldr	r3, [pc, #144]	@ (80027f0 <HAL_RCC_OscConfig+0x820>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a23      	ldr	r2, [pc, #140]	@ (80027f0 <HAL_RCC_OscConfig+0x820>)
 8002762:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002766:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002768:	4b21      	ldr	r3, [pc, #132]	@ (80027f0 <HAL_RCC_OscConfig+0x820>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	4a20      	ldr	r2, [pc, #128]	@ (80027f0 <HAL_RCC_OscConfig+0x820>)
 800276e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002772:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002774:	f7ff f930 	bl	80019d8 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800277c:	f7ff f92c 	bl	80019d8 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e02c      	b.n	80027e8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800278e:	4b18      	ldr	r3, [pc, #96]	@ (80027f0 <HAL_RCC_OscConfig+0x820>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0f0      	beq.n	800277c <HAL_RCC_OscConfig+0x7ac>
 800279a:	e024      	b.n	80027e6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	2b0c      	cmp	r3, #12
 80027a0:	d01f      	beq.n	80027e2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a2:	4b13      	ldr	r3, [pc, #76]	@ (80027f0 <HAL_RCC_OscConfig+0x820>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a12      	ldr	r2, [pc, #72]	@ (80027f0 <HAL_RCC_OscConfig+0x820>)
 80027a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ae:	f7ff f913 	bl	80019d8 <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b6:	f7ff f90f 	bl	80019d8 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e00f      	b.n	80027e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027c8:	4b09      	ldr	r3, [pc, #36]	@ (80027f0 <HAL_RCC_OscConfig+0x820>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1f0      	bne.n	80027b6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80027d4:	4b06      	ldr	r3, [pc, #24]	@ (80027f0 <HAL_RCC_OscConfig+0x820>)
 80027d6:	68da      	ldr	r2, [r3, #12]
 80027d8:	4905      	ldr	r1, [pc, #20]	@ (80027f0 <HAL_RCC_OscConfig+0x820>)
 80027da:	4b06      	ldr	r3, [pc, #24]	@ (80027f4 <HAL_RCC_OscConfig+0x824>)
 80027dc:	4013      	ands	r3, r2
 80027de:	60cb      	str	r3, [r1, #12]
 80027e0:	e001      	b.n	80027e6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e000      	b.n	80027e8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3720      	adds	r7, #32
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40021000 	.word	0x40021000
 80027f4:	feeefffc 	.word	0xfeeefffc

080027f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e0e7      	b.n	80029dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800280c:	4b75      	ldr	r3, [pc, #468]	@ (80029e4 <HAL_RCC_ClockConfig+0x1ec>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0307 	and.w	r3, r3, #7
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	429a      	cmp	r2, r3
 8002818:	d910      	bls.n	800283c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281a:	4b72      	ldr	r3, [pc, #456]	@ (80029e4 <HAL_RCC_ClockConfig+0x1ec>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f023 0207 	bic.w	r2, r3, #7
 8002822:	4970      	ldr	r1, [pc, #448]	@ (80029e4 <HAL_RCC_ClockConfig+0x1ec>)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	4313      	orrs	r3, r2
 8002828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800282a:	4b6e      	ldr	r3, [pc, #440]	@ (80029e4 <HAL_RCC_ClockConfig+0x1ec>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	d001      	beq.n	800283c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0cf      	b.n	80029dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d010      	beq.n	800286a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	4b66      	ldr	r3, [pc, #408]	@ (80029e8 <HAL_RCC_ClockConfig+0x1f0>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002854:	429a      	cmp	r2, r3
 8002856:	d908      	bls.n	800286a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002858:	4b63      	ldr	r3, [pc, #396]	@ (80029e8 <HAL_RCC_ClockConfig+0x1f0>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	4960      	ldr	r1, [pc, #384]	@ (80029e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002866:	4313      	orrs	r3, r2
 8002868:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d04c      	beq.n	8002910 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b03      	cmp	r3, #3
 800287c:	d107      	bne.n	800288e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800287e:	4b5a      	ldr	r3, [pc, #360]	@ (80029e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d121      	bne.n	80028ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e0a6      	b.n	80029dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b02      	cmp	r3, #2
 8002894:	d107      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002896:	4b54      	ldr	r3, [pc, #336]	@ (80029e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d115      	bne.n	80028ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e09a      	b.n	80029dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d107      	bne.n	80028be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028ae:	4b4e      	ldr	r3, [pc, #312]	@ (80029e8 <HAL_RCC_ClockConfig+0x1f0>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d109      	bne.n	80028ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e08e      	b.n	80029dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028be:	4b4a      	ldr	r3, [pc, #296]	@ (80029e8 <HAL_RCC_ClockConfig+0x1f0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e086      	b.n	80029dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028ce:	4b46      	ldr	r3, [pc, #280]	@ (80029e8 <HAL_RCC_ClockConfig+0x1f0>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f023 0203 	bic.w	r2, r3, #3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	4943      	ldr	r1, [pc, #268]	@ (80029e8 <HAL_RCC_ClockConfig+0x1f0>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028e0:	f7ff f87a 	bl	80019d8 <HAL_GetTick>
 80028e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e6:	e00a      	b.n	80028fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e8:	f7ff f876 	bl	80019d8 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e06e      	b.n	80029dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fe:	4b3a      	ldr	r3, [pc, #232]	@ (80029e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 020c 	and.w	r2, r3, #12
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	429a      	cmp	r2, r3
 800290e:	d1eb      	bne.n	80028e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d010      	beq.n	800293e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	4b31      	ldr	r3, [pc, #196]	@ (80029e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002928:	429a      	cmp	r2, r3
 800292a:	d208      	bcs.n	800293e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800292c:	4b2e      	ldr	r3, [pc, #184]	@ (80029e8 <HAL_RCC_ClockConfig+0x1f0>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	492b      	ldr	r1, [pc, #172]	@ (80029e8 <HAL_RCC_ClockConfig+0x1f0>)
 800293a:	4313      	orrs	r3, r2
 800293c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800293e:	4b29      	ldr	r3, [pc, #164]	@ (80029e4 <HAL_RCC_ClockConfig+0x1ec>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d210      	bcs.n	800296e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294c:	4b25      	ldr	r3, [pc, #148]	@ (80029e4 <HAL_RCC_ClockConfig+0x1ec>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f023 0207 	bic.w	r2, r3, #7
 8002954:	4923      	ldr	r1, [pc, #140]	@ (80029e4 <HAL_RCC_ClockConfig+0x1ec>)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	4313      	orrs	r3, r2
 800295a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800295c:	4b21      	ldr	r3, [pc, #132]	@ (80029e4 <HAL_RCC_ClockConfig+0x1ec>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	429a      	cmp	r2, r3
 8002968:	d001      	beq.n	800296e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e036      	b.n	80029dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	2b00      	cmp	r3, #0
 8002978:	d008      	beq.n	800298c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800297a:	4b1b      	ldr	r3, [pc, #108]	@ (80029e8 <HAL_RCC_ClockConfig+0x1f0>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	4918      	ldr	r1, [pc, #96]	@ (80029e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002988:	4313      	orrs	r3, r2
 800298a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	2b00      	cmp	r3, #0
 8002996:	d009      	beq.n	80029ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002998:	4b13      	ldr	r3, [pc, #76]	@ (80029e8 <HAL_RCC_ClockConfig+0x1f0>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	4910      	ldr	r1, [pc, #64]	@ (80029e8 <HAL_RCC_ClockConfig+0x1f0>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029ac:	f000 f824 	bl	80029f8 <HAL_RCC_GetSysClockFreq>
 80029b0:	4602      	mov	r2, r0
 80029b2:	4b0d      	ldr	r3, [pc, #52]	@ (80029e8 <HAL_RCC_ClockConfig+0x1f0>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	091b      	lsrs	r3, r3, #4
 80029b8:	f003 030f 	and.w	r3, r3, #15
 80029bc:	490b      	ldr	r1, [pc, #44]	@ (80029ec <HAL_RCC_ClockConfig+0x1f4>)
 80029be:	5ccb      	ldrb	r3, [r1, r3]
 80029c0:	f003 031f 	and.w	r3, r3, #31
 80029c4:	fa22 f303 	lsr.w	r3, r2, r3
 80029c8:	4a09      	ldr	r2, [pc, #36]	@ (80029f0 <HAL_RCC_ClockConfig+0x1f8>)
 80029ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80029cc:	4b09      	ldr	r3, [pc, #36]	@ (80029f4 <HAL_RCC_ClockConfig+0x1fc>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7fe ffb1 	bl	8001938 <HAL_InitTick>
 80029d6:	4603      	mov	r3, r0
 80029d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80029da:	7afb      	ldrb	r3, [r7, #11]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40022000 	.word	0x40022000
 80029e8:	40021000 	.word	0x40021000
 80029ec:	080057dc 	.word	0x080057dc
 80029f0:	20000000 	.word	0x20000000
 80029f4:	20000004 	.word	0x20000004

080029f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b089      	sub	sp, #36	@ 0x24
 80029fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	61fb      	str	r3, [r7, #28]
 8002a02:	2300      	movs	r3, #0
 8002a04:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a06:	4b3e      	ldr	r3, [pc, #248]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 030c 	and.w	r3, r3, #12
 8002a0e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a10:	4b3b      	ldr	r3, [pc, #236]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	f003 0303 	and.w	r3, r3, #3
 8002a18:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d005      	beq.n	8002a2c <HAL_RCC_GetSysClockFreq+0x34>
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	2b0c      	cmp	r3, #12
 8002a24:	d121      	bne.n	8002a6a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d11e      	bne.n	8002a6a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a2c:	4b34      	ldr	r3, [pc, #208]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0308 	and.w	r3, r3, #8
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d107      	bne.n	8002a48 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a38:	4b31      	ldr	r3, [pc, #196]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a3e:	0a1b      	lsrs	r3, r3, #8
 8002a40:	f003 030f 	and.w	r3, r3, #15
 8002a44:	61fb      	str	r3, [r7, #28]
 8002a46:	e005      	b.n	8002a54 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a48:	4b2d      	ldr	r3, [pc, #180]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	091b      	lsrs	r3, r3, #4
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a54:	4a2b      	ldr	r2, [pc, #172]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a5c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10d      	bne.n	8002a80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a68:	e00a      	b.n	8002a80 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d102      	bne.n	8002a76 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a70:	4b25      	ldr	r3, [pc, #148]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a72:	61bb      	str	r3, [r7, #24]
 8002a74:	e004      	b.n	8002a80 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d101      	bne.n	8002a80 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a7c:	4b23      	ldr	r3, [pc, #140]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0x114>)
 8002a7e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	2b0c      	cmp	r3, #12
 8002a84:	d134      	bne.n	8002af0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a86:	4b1e      	ldr	r3, [pc, #120]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d003      	beq.n	8002a9e <HAL_RCC_GetSysClockFreq+0xa6>
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b03      	cmp	r3, #3
 8002a9a:	d003      	beq.n	8002aa4 <HAL_RCC_GetSysClockFreq+0xac>
 8002a9c:	e005      	b.n	8002aaa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x110>)
 8002aa0:	617b      	str	r3, [r7, #20]
      break;
 8002aa2:	e005      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002aa4:	4b19      	ldr	r3, [pc, #100]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0x114>)
 8002aa6:	617b      	str	r3, [r7, #20]
      break;
 8002aa8:	e002      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	617b      	str	r3, [r7, #20]
      break;
 8002aae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ab0:	4b13      	ldr	r3, [pc, #76]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	091b      	lsrs	r3, r3, #4
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	3301      	adds	r3, #1
 8002abc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002abe:	4b10      	ldr	r3, [pc, #64]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	0a1b      	lsrs	r3, r3, #8
 8002ac4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	fb03 f202 	mul.w	r2, r3, r2
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	0e5b      	lsrs	r3, r3, #25
 8002adc:	f003 0303 	and.w	r3, r3, #3
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002af0:	69bb      	ldr	r3, [r7, #24]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3724      	adds	r7, #36	@ 0x24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	40021000 	.word	0x40021000
 8002b04:	080057f4 	.word	0x080057f4
 8002b08:	00f42400 	.word	0x00f42400
 8002b0c:	007a1200 	.word	0x007a1200

08002b10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b14:	4b03      	ldr	r3, [pc, #12]	@ (8002b24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b16:	681b      	ldr	r3, [r3, #0]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	20000000 	.word	0x20000000

08002b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b2c:	f7ff fff0 	bl	8002b10 <HAL_RCC_GetHCLKFreq>
 8002b30:	4602      	mov	r2, r0
 8002b32:	4b06      	ldr	r3, [pc, #24]	@ (8002b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	0a1b      	lsrs	r3, r3, #8
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	4904      	ldr	r1, [pc, #16]	@ (8002b50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b3e:	5ccb      	ldrb	r3, [r1, r3]
 8002b40:	f003 031f 	and.w	r3, r3, #31
 8002b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	080057ec 	.word	0x080057ec

08002b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b58:	f7ff ffda 	bl	8002b10 <HAL_RCC_GetHCLKFreq>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	4b06      	ldr	r3, [pc, #24]	@ (8002b78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	0adb      	lsrs	r3, r3, #11
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	4904      	ldr	r1, [pc, #16]	@ (8002b7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b6a:	5ccb      	ldrb	r3, [r1, r3]
 8002b6c:	f003 031f 	and.w	r3, r3, #31
 8002b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	080057ec 	.word	0x080057ec

08002b80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b88:	2300      	movs	r3, #0
 8002b8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b8c:	4b2a      	ldr	r3, [pc, #168]	@ (8002c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b98:	f7ff f9b6 	bl	8001f08 <HAL_PWREx_GetVoltageRange>
 8002b9c:	6178      	str	r0, [r7, #20]
 8002b9e:	e014      	b.n	8002bca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ba0:	4b25      	ldr	r3, [pc, #148]	@ (8002c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba4:	4a24      	ldr	r2, [pc, #144]	@ (8002c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ba6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002baa:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bac:	4b22      	ldr	r3, [pc, #136]	@ (8002c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002bb8:	f7ff f9a6 	bl	8001f08 <HAL_PWREx_GetVoltageRange>
 8002bbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002bbe:	4b1e      	ldr	r3, [pc, #120]	@ (8002c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc2:	4a1d      	ldr	r2, [pc, #116]	@ (8002c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bc8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bd0:	d10b      	bne.n	8002bea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b80      	cmp	r3, #128	@ 0x80
 8002bd6:	d919      	bls.n	8002c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2ba0      	cmp	r3, #160	@ 0xa0
 8002bdc:	d902      	bls.n	8002be4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bde:	2302      	movs	r3, #2
 8002be0:	613b      	str	r3, [r7, #16]
 8002be2:	e013      	b.n	8002c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002be4:	2301      	movs	r3, #1
 8002be6:	613b      	str	r3, [r7, #16]
 8002be8:	e010      	b.n	8002c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b80      	cmp	r3, #128	@ 0x80
 8002bee:	d902      	bls.n	8002bf6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	613b      	str	r3, [r7, #16]
 8002bf4:	e00a      	b.n	8002c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b80      	cmp	r3, #128	@ 0x80
 8002bfa:	d102      	bne.n	8002c02 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	613b      	str	r3, [r7, #16]
 8002c00:	e004      	b.n	8002c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b70      	cmp	r3, #112	@ 0x70
 8002c06:	d101      	bne.n	8002c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c08:	2301      	movs	r3, #1
 8002c0a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f023 0207 	bic.w	r2, r3, #7
 8002c14:	4909      	ldr	r1, [pc, #36]	@ (8002c3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c1c:	4b07      	ldr	r3, [pc, #28]	@ (8002c3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d001      	beq.n	8002c2e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e000      	b.n	8002c30 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	40022000 	.word	0x40022000

08002c40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c48:	2300      	movs	r3, #0
 8002c4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d031      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c60:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c64:	d01a      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002c66:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c6a:	d814      	bhi.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d009      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c70:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c74:	d10f      	bne.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002c76:	4b5d      	ldr	r3, [pc, #372]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	4a5c      	ldr	r2, [pc, #368]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c80:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c82:	e00c      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3304      	adds	r3, #4
 8002c88:	2100      	movs	r1, #0
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 f9ce 	bl	800302c <RCCEx_PLLSAI1_Config>
 8002c90:	4603      	mov	r3, r0
 8002c92:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c94:	e003      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	74fb      	strb	r3, [r7, #19]
      break;
 8002c9a:	e000      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002c9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c9e:	7cfb      	ldrb	r3, [r7, #19]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10b      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ca4:	4b51      	ldr	r3, [pc, #324]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002caa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cb2:	494e      	ldr	r1, [pc, #312]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002cba:	e001      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cbc:	7cfb      	ldrb	r3, [r7, #19]
 8002cbe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 809e 	beq.w	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cd2:	4b46      	ldr	r3, [pc, #280]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00d      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce8:	4b40      	ldr	r3, [pc, #256]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cec:	4a3f      	ldr	r2, [pc, #252]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cf2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cf4:	4b3d      	ldr	r3, [pc, #244]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d00:	2301      	movs	r3, #1
 8002d02:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d04:	4b3a      	ldr	r3, [pc, #232]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a39      	ldr	r2, [pc, #228]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d10:	f7fe fe62 	bl	80019d8 <HAL_GetTick>
 8002d14:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d16:	e009      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d18:	f7fe fe5e 	bl	80019d8 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d902      	bls.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	74fb      	strb	r3, [r7, #19]
        break;
 8002d2a:	e005      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d2c:	4b30      	ldr	r3, [pc, #192]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0ef      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002d38:	7cfb      	ldrb	r3, [r7, #19]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d15a      	bne.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d3e:	4b2b      	ldr	r3, [pc, #172]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d48:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d01e      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d019      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d5a:	4b24      	ldr	r3, [pc, #144]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d64:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d66:	4b21      	ldr	r3, [pc, #132]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d6c:	4a1f      	ldr	r2, [pc, #124]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d76:	4b1d      	ldr	r3, [pc, #116]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d7c:	4a1b      	ldr	r2, [pc, #108]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d86:	4a19      	ldr	r2, [pc, #100]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d016      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d98:	f7fe fe1e 	bl	80019d8 <HAL_GetTick>
 8002d9c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d9e:	e00b      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da0:	f7fe fe1a 	bl	80019d8 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d902      	bls.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	74fb      	strb	r3, [r7, #19]
            break;
 8002db6:	e006      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002db8:	4b0c      	ldr	r3, [pc, #48]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0ec      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002dc6:	7cfb      	ldrb	r3, [r7, #19]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10b      	bne.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dcc:	4b07      	ldr	r3, [pc, #28]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dd2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dda:	4904      	ldr	r1, [pc, #16]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002de2:	e009      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002de4:	7cfb      	ldrb	r3, [r7, #19]
 8002de6:	74bb      	strb	r3, [r7, #18]
 8002de8:	e006      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002dea:	bf00      	nop
 8002dec:	40021000 	.word	0x40021000
 8002df0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df4:	7cfb      	ldrb	r3, [r7, #19]
 8002df6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002df8:	7c7b      	ldrb	r3, [r7, #17]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d105      	bne.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dfe:	4b8a      	ldr	r3, [pc, #552]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e02:	4a89      	ldr	r2, [pc, #548]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e08:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00a      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e16:	4b84      	ldr	r3, [pc, #528]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e1c:	f023 0203 	bic.w	r2, r3, #3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	4980      	ldr	r1, [pc, #512]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00a      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e38:	4b7b      	ldr	r3, [pc, #492]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e3e:	f023 020c 	bic.w	r2, r3, #12
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e46:	4978      	ldr	r1, [pc, #480]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0320 	and.w	r3, r3, #32
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e5a:	4b73      	ldr	r3, [pc, #460]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e60:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e68:	496f      	ldr	r1, [pc, #444]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00a      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e7c:	4b6a      	ldr	r3, [pc, #424]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e82:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e8a:	4967      	ldr	r1, [pc, #412]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e9e:	4b62      	ldr	r3, [pc, #392]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eac:	495e      	ldr	r1, [pc, #376]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00a      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ec0:	4b59      	ldr	r3, [pc, #356]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ec6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ece:	4956      	ldr	r1, [pc, #344]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ee2:	4b51      	ldr	r3, [pc, #324]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef0:	494d      	ldr	r1, [pc, #308]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d028      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f04:	4b48      	ldr	r3, [pc, #288]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f0a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f12:	4945      	ldr	r1, [pc, #276]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f22:	d106      	bne.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f24:	4b40      	ldr	r3, [pc, #256]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	4a3f      	ldr	r2, [pc, #252]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f2e:	60d3      	str	r3, [r2, #12]
 8002f30:	e011      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f36:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f3a:	d10c      	bne.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3304      	adds	r3, #4
 8002f40:	2101      	movs	r1, #1
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 f872 	bl	800302c <RCCEx_PLLSAI1_Config>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f4c:	7cfb      	ldrb	r3, [r7, #19]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002f52:	7cfb      	ldrb	r3, [r7, #19]
 8002f54:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d028      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f62:	4b31      	ldr	r3, [pc, #196]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f68:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f70:	492d      	ldr	r1, [pc, #180]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f80:	d106      	bne.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f82:	4b29      	ldr	r3, [pc, #164]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	4a28      	ldr	r2, [pc, #160]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f8c:	60d3      	str	r3, [r2, #12]
 8002f8e:	e011      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f94:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f98:	d10c      	bne.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 f843 	bl	800302c <RCCEx_PLLSAI1_Config>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002faa:	7cfb      	ldrb	r3, [r7, #19]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002fb0:	7cfb      	ldrb	r3, [r7, #19]
 8002fb2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d01c      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fc0:	4b19      	ldr	r3, [pc, #100]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fce:	4916      	ldr	r1, [pc, #88]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002fde:	d10c      	bne.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	2102      	movs	r1, #2
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 f820 	bl	800302c <RCCEx_PLLSAI1_Config>
 8002fec:	4603      	mov	r3, r0
 8002fee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ff0:	7cfb      	ldrb	r3, [r7, #19]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002ff6:	7cfb      	ldrb	r3, [r7, #19]
 8002ff8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00a      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003006:	4b08      	ldr	r3, [pc, #32]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800300c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003014:	4904      	ldr	r1, [pc, #16]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003016:	4313      	orrs	r3, r2
 8003018:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800301c:	7cbb      	ldrb	r3, [r7, #18]
}
 800301e:	4618      	mov	r0, r3
 8003020:	3718      	adds	r7, #24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40021000 	.word	0x40021000

0800302c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003036:	2300      	movs	r3, #0
 8003038:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800303a:	4b74      	ldr	r3, [pc, #464]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e0>)
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d018      	beq.n	8003078 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003046:	4b71      	ldr	r3, [pc, #452]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f003 0203 	and.w	r2, r3, #3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d10d      	bne.n	8003072 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
       ||
 800305a:	2b00      	cmp	r3, #0
 800305c:	d009      	beq.n	8003072 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800305e:	4b6b      	ldr	r3, [pc, #428]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	091b      	lsrs	r3, r3, #4
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
       ||
 800306e:	429a      	cmp	r2, r3
 8003070:	d047      	beq.n	8003102 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	73fb      	strb	r3, [r7, #15]
 8003076:	e044      	b.n	8003102 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b03      	cmp	r3, #3
 800307e:	d018      	beq.n	80030b2 <RCCEx_PLLSAI1_Config+0x86>
 8003080:	2b03      	cmp	r3, #3
 8003082:	d825      	bhi.n	80030d0 <RCCEx_PLLSAI1_Config+0xa4>
 8003084:	2b01      	cmp	r3, #1
 8003086:	d002      	beq.n	800308e <RCCEx_PLLSAI1_Config+0x62>
 8003088:	2b02      	cmp	r3, #2
 800308a:	d009      	beq.n	80030a0 <RCCEx_PLLSAI1_Config+0x74>
 800308c:	e020      	b.n	80030d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800308e:	4b5f      	ldr	r3, [pc, #380]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d11d      	bne.n	80030d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800309e:	e01a      	b.n	80030d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030a0:	4b5a      	ldr	r3, [pc, #360]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d116      	bne.n	80030da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030b0:	e013      	b.n	80030da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030b2:	4b56      	ldr	r3, [pc, #344]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10f      	bne.n	80030de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030be:	4b53      	ldr	r3, [pc, #332]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d109      	bne.n	80030de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030ce:	e006      	b.n	80030de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	73fb      	strb	r3, [r7, #15]
      break;
 80030d4:	e004      	b.n	80030e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030d6:	bf00      	nop
 80030d8:	e002      	b.n	80030e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030da:	bf00      	nop
 80030dc:	e000      	b.n	80030e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030de:	bf00      	nop
    }

    if(status == HAL_OK)
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10d      	bne.n	8003102 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030e6:	4b49      	ldr	r3, [pc, #292]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6819      	ldr	r1, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	430b      	orrs	r3, r1
 80030fc:	4943      	ldr	r1, [pc, #268]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003102:	7bfb      	ldrb	r3, [r7, #15]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d17c      	bne.n	8003202 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003108:	4b40      	ldr	r3, [pc, #256]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e0>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a3f      	ldr	r2, [pc, #252]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e0>)
 800310e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003112:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003114:	f7fe fc60 	bl	80019d8 <HAL_GetTick>
 8003118:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800311a:	e009      	b.n	8003130 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800311c:	f7fe fc5c 	bl	80019d8 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d902      	bls.n	8003130 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	73fb      	strb	r3, [r7, #15]
        break;
 800312e:	e005      	b.n	800313c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003130:	4b36      	ldr	r3, [pc, #216]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1ef      	bne.n	800311c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800313c:	7bfb      	ldrb	r3, [r7, #15]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d15f      	bne.n	8003202 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d110      	bne.n	800316a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003148:	4b30      	ldr	r3, [pc, #192]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e0>)
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003150:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6892      	ldr	r2, [r2, #8]
 8003158:	0211      	lsls	r1, r2, #8
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	68d2      	ldr	r2, [r2, #12]
 800315e:	06d2      	lsls	r2, r2, #27
 8003160:	430a      	orrs	r2, r1
 8003162:	492a      	ldr	r1, [pc, #168]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003164:	4313      	orrs	r3, r2
 8003166:	610b      	str	r3, [r1, #16]
 8003168:	e027      	b.n	80031ba <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d112      	bne.n	8003196 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003170:	4b26      	ldr	r3, [pc, #152]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003178:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	6892      	ldr	r2, [r2, #8]
 8003180:	0211      	lsls	r1, r2, #8
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6912      	ldr	r2, [r2, #16]
 8003186:	0852      	lsrs	r2, r2, #1
 8003188:	3a01      	subs	r2, #1
 800318a:	0552      	lsls	r2, r2, #21
 800318c:	430a      	orrs	r2, r1
 800318e:	491f      	ldr	r1, [pc, #124]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003190:	4313      	orrs	r3, r2
 8003192:	610b      	str	r3, [r1, #16]
 8003194:	e011      	b.n	80031ba <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003196:	4b1d      	ldr	r3, [pc, #116]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800319e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	6892      	ldr	r2, [r2, #8]
 80031a6:	0211      	lsls	r1, r2, #8
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6952      	ldr	r2, [r2, #20]
 80031ac:	0852      	lsrs	r2, r2, #1
 80031ae:	3a01      	subs	r2, #1
 80031b0:	0652      	lsls	r2, r2, #25
 80031b2:	430a      	orrs	r2, r1
 80031b4:	4915      	ldr	r1, [pc, #84]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e0>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80031ba:	4b14      	ldr	r3, [pc, #80]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e0>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a13      	ldr	r2, [pc, #76]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e0>)
 80031c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80031c4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c6:	f7fe fc07 	bl	80019d8 <HAL_GetTick>
 80031ca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031cc:	e009      	b.n	80031e2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031ce:	f7fe fc03 	bl	80019d8 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d902      	bls.n	80031e2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	73fb      	strb	r3, [r7, #15]
          break;
 80031e0:	e005      	b.n	80031ee <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031e2:	4b0a      	ldr	r3, [pc, #40]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0ef      	beq.n	80031ce <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80031ee:	7bfb      	ldrb	r3, [r7, #15]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d106      	bne.n	8003202 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80031f4:	4b05      	ldr	r3, [pc, #20]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e0>)
 80031f6:	691a      	ldr	r2, [r3, #16]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	4903      	ldr	r1, [pc, #12]	@ (800320c <RCCEx_PLLSAI1_Config+0x1e0>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003202:	7bfb      	ldrb	r3, [r7, #15]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40021000 	.word	0x40021000

08003210 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e095      	b.n	800334e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003226:	2b00      	cmp	r3, #0
 8003228:	d108      	bne.n	800323c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003232:	d009      	beq.n	8003248 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	61da      	str	r2, [r3, #28]
 800323a:	e005      	b.n	8003248 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d106      	bne.n	8003268 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7fe f9ee 	bl	8001644 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800327e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003288:	d902      	bls.n	8003290 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800328a:	2300      	movs	r3, #0
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	e002      	b.n	8003296 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003290:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003294:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800329e:	d007      	beq.n	80032b0 <HAL_SPI_Init+0xa0>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80032a8:	d002      	beq.n	80032b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80032c0:	431a      	orrs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	431a      	orrs	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80032e8:	431a      	orrs	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032f2:	ea42 0103 	orr.w	r1, r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032fa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	430a      	orrs	r2, r1
 8003304:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	0c1b      	lsrs	r3, r3, #16
 800330c:	f003 0204 	and.w	r2, r3, #4
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003314:	f003 0310 	and.w	r3, r3, #16
 8003318:	431a      	orrs	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800332c:	ea42 0103 	orr.w	r1, r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b088      	sub	sp, #32
 800335a:	af00      	add	r7, sp, #0
 800335c:	60f8      	str	r0, [r7, #12]
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	603b      	str	r3, [r7, #0]
 8003362:	4613      	mov	r3, r2
 8003364:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003366:	2300      	movs	r3, #0
 8003368:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003370:	2b01      	cmp	r3, #1
 8003372:	d101      	bne.n	8003378 <HAL_SPI_Transmit+0x22>
 8003374:	2302      	movs	r3, #2
 8003376:	e15f      	b.n	8003638 <HAL_SPI_Transmit+0x2e2>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003380:	f7fe fb2a 	bl	80019d8 <HAL_GetTick>
 8003384:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003386:	88fb      	ldrh	r3, [r7, #6]
 8003388:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b01      	cmp	r3, #1
 8003394:	d002      	beq.n	800339c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003396:	2302      	movs	r3, #2
 8003398:	77fb      	strb	r3, [r7, #31]
    goto error;
 800339a:	e148      	b.n	800362e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d002      	beq.n	80033a8 <HAL_SPI_Transmit+0x52>
 80033a2:	88fb      	ldrh	r3, [r7, #6]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d102      	bne.n	80033ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033ac:	e13f      	b.n	800362e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2203      	movs	r2, #3
 80033b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	88fa      	ldrh	r2, [r7, #6]
 80033c6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	88fa      	ldrh	r2, [r7, #6]
 80033cc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033f8:	d10f      	bne.n	800341a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003408:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003418:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003424:	2b40      	cmp	r3, #64	@ 0x40
 8003426:	d007      	beq.n	8003438 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003436:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003440:	d94f      	bls.n	80034e2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d002      	beq.n	8003450 <HAL_SPI_Transmit+0xfa>
 800344a:	8afb      	ldrh	r3, [r7, #22]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d142      	bne.n	80034d6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003454:	881a      	ldrh	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003460:	1c9a      	adds	r2, r3, #2
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800346a:	b29b      	uxth	r3, r3
 800346c:	3b01      	subs	r3, #1
 800346e:	b29a      	uxth	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003474:	e02f      	b.n	80034d6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b02      	cmp	r3, #2
 8003482:	d112      	bne.n	80034aa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003488:	881a      	ldrh	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003494:	1c9a      	adds	r2, r3, #2
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800349e:	b29b      	uxth	r3, r3
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034a8:	e015      	b.n	80034d6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034aa:	f7fe fa95 	bl	80019d8 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d803      	bhi.n	80034c2 <HAL_SPI_Transmit+0x16c>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c0:	d102      	bne.n	80034c8 <HAL_SPI_Transmit+0x172>
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d106      	bne.n	80034d6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80034d4:	e0ab      	b.n	800362e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034da:	b29b      	uxth	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1ca      	bne.n	8003476 <HAL_SPI_Transmit+0x120>
 80034e0:	e080      	b.n	80035e4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d002      	beq.n	80034f0 <HAL_SPI_Transmit+0x19a>
 80034ea:	8afb      	ldrh	r3, [r7, #22]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d174      	bne.n	80035da <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d912      	bls.n	8003520 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034fe:	881a      	ldrh	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800350a:	1c9a      	adds	r2, r3, #2
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003514:	b29b      	uxth	r3, r3
 8003516:	3b02      	subs	r3, #2
 8003518:	b29a      	uxth	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800351e:	e05c      	b.n	80035da <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	330c      	adds	r3, #12
 800352a:	7812      	ldrb	r2, [r2, #0]
 800352c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800353c:	b29b      	uxth	r3, r3
 800353e:	3b01      	subs	r3, #1
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003546:	e048      	b.n	80035da <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b02      	cmp	r3, #2
 8003554:	d12b      	bne.n	80035ae <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800355a:	b29b      	uxth	r3, r3
 800355c:	2b01      	cmp	r3, #1
 800355e:	d912      	bls.n	8003586 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003564:	881a      	ldrh	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003570:	1c9a      	adds	r2, r3, #2
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800357a:	b29b      	uxth	r3, r3
 800357c:	3b02      	subs	r3, #2
 800357e:	b29a      	uxth	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003584:	e029      	b.n	80035da <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	330c      	adds	r3, #12
 8003590:	7812      	ldrb	r2, [r2, #0]
 8003592:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80035ac:	e015      	b.n	80035da <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035ae:	f7fe fa13 	bl	80019d8 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d803      	bhi.n	80035c6 <HAL_SPI_Transmit+0x270>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c4:	d102      	bne.n	80035cc <HAL_SPI_Transmit+0x276>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d106      	bne.n	80035da <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80035d8:	e029      	b.n	800362e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035de:	b29b      	uxth	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1b1      	bne.n	8003548 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	6839      	ldr	r1, [r7, #0]
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 fcf9 	bl	8003fe0 <SPI_EndRxTxTransaction>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d002      	beq.n	80035fa <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2220      	movs	r2, #32
 80035f8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10a      	bne.n	8003618 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003602:	2300      	movs	r3, #0
 8003604:	613b      	str	r3, [r7, #16]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	613b      	str	r3, [r7, #16]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	613b      	str	r3, [r7, #16]
 8003616:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	77fb      	strb	r3, [r7, #31]
 8003624:	e003      	b.n	800362e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003636:	7ffb      	ldrb	r3, [r7, #31]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3720      	adds	r7, #32
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b088      	sub	sp, #32
 8003644:	af02      	add	r7, sp, #8
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	603b      	str	r3, [r7, #0]
 800364c:	4613      	mov	r3, r2
 800364e:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003650:	2300      	movs	r3, #0
 8003652:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b01      	cmp	r3, #1
 800365e:	d002      	beq.n	8003666 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003660:	2302      	movs	r3, #2
 8003662:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003664:	e11a      	b.n	800389c <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800366e:	d112      	bne.n	8003696 <HAL_SPI_Receive+0x56>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10e      	bne.n	8003696 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2204      	movs	r2, #4
 800367c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003680:	88fa      	ldrh	r2, [r7, #6]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	4613      	mov	r3, r2
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	68b9      	ldr	r1, [r7, #8]
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 f90e 	bl	80038ae <HAL_SPI_TransmitReceive>
 8003692:	4603      	mov	r3, r0
 8003694:	e107      	b.n	80038a6 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_SPI_Receive+0x64>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e100      	b.n	80038a6 <HAL_SPI_Receive+0x266>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036ac:	f7fe f994 	bl	80019d8 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d002      	beq.n	80036be <HAL_SPI_Receive+0x7e>
 80036b8:	88fb      	ldrh	r3, [r7, #6]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d102      	bne.n	80036c4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80036c2:	e0eb      	b.n	800389c <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2204      	movs	r2, #4
 80036c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	88fa      	ldrh	r2, [r7, #6]
 80036dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	88fa      	ldrh	r2, [r7, #6]
 80036e4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800370e:	d908      	bls.n	8003722 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800371e:	605a      	str	r2, [r3, #4]
 8003720:	e007      	b.n	8003732 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003730:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800373a:	d10f      	bne.n	800375c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800374a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800375a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003766:	2b40      	cmp	r3, #64	@ 0x40
 8003768:	d007      	beq.n	800377a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003778:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003782:	d86f      	bhi.n	8003864 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003784:	e034      	b.n	80037f0 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b01      	cmp	r3, #1
 8003792:	d117      	bne.n	80037c4 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f103 020c 	add.w	r2, r3, #12
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a0:	7812      	ldrb	r2, [r2, #0]
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037aa:	1c5a      	adds	r2, r3, #1
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80037c2:	e015      	b.n	80037f0 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037c4:	f7fe f908 	bl	80019d8 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d803      	bhi.n	80037dc <HAL_SPI_Receive+0x19c>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037da:	d102      	bne.n	80037e2 <HAL_SPI_Receive+0x1a2>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d106      	bne.n	80037f0 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80037ee:	e055      	b.n	800389c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1c4      	bne.n	8003786 <HAL_SPI_Receive+0x146>
 80037fc:	e038      	b.n	8003870 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b01      	cmp	r3, #1
 800380a:	d115      	bne.n	8003838 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68da      	ldr	r2, [r3, #12]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003816:	b292      	uxth	r2, r2
 8003818:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381e:	1c9a      	adds	r2, r3, #2
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800382a:	b29b      	uxth	r3, r3
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003836:	e015      	b.n	8003864 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003838:	f7fe f8ce 	bl	80019d8 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	429a      	cmp	r2, r3
 8003846:	d803      	bhi.n	8003850 <HAL_SPI_Receive+0x210>
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384e:	d102      	bne.n	8003856 <HAL_SPI_Receive+0x216>
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d106      	bne.n	8003864 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003862:	e01b      	b.n	800389c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800386a:	b29b      	uxth	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1c6      	bne.n	80037fe <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	6839      	ldr	r1, [r7, #0]
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 fb5b 	bl	8003f30 <SPI_EndRxTransaction>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d002      	beq.n	8003886 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2220      	movs	r2, #32
 8003884:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800388a:	2b00      	cmp	r3, #0
 800388c:	d002      	beq.n	8003894 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	75fb      	strb	r3, [r7, #23]
 8003892:	e003      	b.n	800389c <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80038a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3718      	adds	r7, #24
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b08a      	sub	sp, #40	@ 0x28
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	60f8      	str	r0, [r7, #12]
 80038b6:	60b9      	str	r1, [r7, #8]
 80038b8:	607a      	str	r2, [r7, #4]
 80038ba:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80038bc:	2301      	movs	r3, #1
 80038be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80038c0:	2300      	movs	r3, #0
 80038c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d101      	bne.n	80038d4 <HAL_SPI_TransmitReceive+0x26>
 80038d0:	2302      	movs	r3, #2
 80038d2:	e20a      	b.n	8003cea <HAL_SPI_TransmitReceive+0x43c>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038dc:	f7fe f87c 	bl	80019d8 <HAL_GetTick>
 80038e0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80038e8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80038f0:	887b      	ldrh	r3, [r7, #2]
 80038f2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80038f4:	887b      	ldrh	r3, [r7, #2]
 80038f6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80038f8:	7efb      	ldrb	r3, [r7, #27]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d00e      	beq.n	800391c <HAL_SPI_TransmitReceive+0x6e>
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003904:	d106      	bne.n	8003914 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d102      	bne.n	8003914 <HAL_SPI_TransmitReceive+0x66>
 800390e:	7efb      	ldrb	r3, [r7, #27]
 8003910:	2b04      	cmp	r3, #4
 8003912:	d003      	beq.n	800391c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003914:	2302      	movs	r3, #2
 8003916:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800391a:	e1e0      	b.n	8003cde <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d005      	beq.n	800392e <HAL_SPI_TransmitReceive+0x80>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <HAL_SPI_TransmitReceive+0x80>
 8003928:	887b      	ldrh	r3, [r7, #2]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d103      	bne.n	8003936 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003934:	e1d3      	b.n	8003cde <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b04      	cmp	r3, #4
 8003940:	d003      	beq.n	800394a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2205      	movs	r2, #5
 8003946:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	887a      	ldrh	r2, [r7, #2]
 800395a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	887a      	ldrh	r2, [r7, #2]
 8003962:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	887a      	ldrh	r2, [r7, #2]
 8003970:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	887a      	ldrh	r2, [r7, #2]
 8003976:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800398c:	d802      	bhi.n	8003994 <HAL_SPI_TransmitReceive+0xe6>
 800398e:	8a3b      	ldrh	r3, [r7, #16]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d908      	bls.n	80039a6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80039a2:	605a      	str	r2, [r3, #4]
 80039a4:	e007      	b.n	80039b6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80039b4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c0:	2b40      	cmp	r3, #64	@ 0x40
 80039c2:	d007      	beq.n	80039d4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80039dc:	f240 8081 	bls.w	8003ae2 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d002      	beq.n	80039ee <HAL_SPI_TransmitReceive+0x140>
 80039e8:	8a7b      	ldrh	r3, [r7, #18]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d16d      	bne.n	8003aca <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f2:	881a      	ldrh	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039fe:	1c9a      	adds	r2, r3, #2
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a12:	e05a      	b.n	8003aca <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d11b      	bne.n	8003a5a <HAL_SPI_TransmitReceive+0x1ac>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d016      	beq.n	8003a5a <HAL_SPI_TransmitReceive+0x1ac>
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d113      	bne.n	8003a5a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a36:	881a      	ldrh	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a42:	1c9a      	adds	r2, r3, #2
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d11c      	bne.n	8003aa2 <HAL_SPI_TransmitReceive+0x1f4>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d016      	beq.n	8003aa2 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68da      	ldr	r2, [r3, #12]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7e:	b292      	uxth	r2, r2
 8003a80:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a86:	1c9a      	adds	r2, r3, #2
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003aa2:	f7fd ff99 	bl	80019d8 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d80b      	bhi.n	8003aca <HAL_SPI_TransmitReceive+0x21c>
 8003ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab8:	d007      	beq.n	8003aca <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003ac8:	e109      	b.n	8003cde <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d19f      	bne.n	8003a14 <HAL_SPI_TransmitReceive+0x166>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d199      	bne.n	8003a14 <HAL_SPI_TransmitReceive+0x166>
 8003ae0:	e0e3      	b.n	8003caa <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_SPI_TransmitReceive+0x244>
 8003aea:	8a7b      	ldrh	r3, [r7, #18]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	f040 80cf 	bne.w	8003c90 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d912      	bls.n	8003b22 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b00:	881a      	ldrh	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b0c:	1c9a      	adds	r2, r3, #2
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	3b02      	subs	r3, #2
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b20:	e0b6      	b.n	8003c90 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	330c      	adds	r3, #12
 8003b2c:	7812      	ldrb	r2, [r2, #0]
 8003b2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b34:	1c5a      	adds	r2, r3, #1
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b48:	e0a2      	b.n	8003c90 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d134      	bne.n	8003bc2 <HAL_SPI_TransmitReceive+0x314>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d02f      	beq.n	8003bc2 <HAL_SPI_TransmitReceive+0x314>
 8003b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d12c      	bne.n	8003bc2 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d912      	bls.n	8003b98 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b76:	881a      	ldrh	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b82:	1c9a      	adds	r2, r3, #2
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	3b02      	subs	r3, #2
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b96:	e012      	b.n	8003bbe <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	330c      	adds	r3, #12
 8003ba2:	7812      	ldrb	r2, [r2, #0]
 8003ba4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003baa:	1c5a      	adds	r2, r3, #1
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d148      	bne.n	8003c62 <HAL_SPI_TransmitReceive+0x3b4>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d042      	beq.n	8003c62 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d923      	bls.n	8003c30 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68da      	ldr	r2, [r3, #12]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf2:	b292      	uxth	r2, r2
 8003bf4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfa:	1c9a      	adds	r2, r3, #2
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	3b02      	subs	r3, #2
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d81f      	bhi.n	8003c5e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003c2c:	605a      	str	r2, [r3, #4]
 8003c2e:	e016      	b.n	8003c5e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f103 020c 	add.w	r2, r3, #12
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3c:	7812      	ldrb	r2, [r2, #0]
 8003c3e:	b2d2      	uxtb	r2, r2
 8003c40:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c46:	1c5a      	adds	r2, r3, #1
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c62:	f7fd feb9 	bl	80019d8 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d803      	bhi.n	8003c7a <HAL_SPI_TransmitReceive+0x3cc>
 8003c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c78:	d102      	bne.n	8003c80 <HAL_SPI_TransmitReceive+0x3d2>
 8003c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d107      	bne.n	8003c90 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003c8e:	e026      	b.n	8003cde <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f47f af57 	bne.w	8003b4a <HAL_SPI_TransmitReceive+0x29c>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f47f af50 	bne.w	8003b4a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003caa:	69fa      	ldr	r2, [r7, #28]
 8003cac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 f996 	bl	8003fe0 <SPI_EndRxTxTransaction>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d005      	beq.n	8003cc6 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cd4:	e003      	b.n	8003cde <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003ce6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3728      	adds	r7, #40	@ 0x28
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
	...

08003cf4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b088      	sub	sp, #32
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	603b      	str	r3, [r7, #0]
 8003d00:	4613      	mov	r3, r2
 8003d02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d04:	f7fd fe68 	bl	80019d8 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d0c:	1a9b      	subs	r3, r3, r2
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	4413      	add	r3, r2
 8003d12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d14:	f7fd fe60 	bl	80019d8 <HAL_GetTick>
 8003d18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d1a:	4b39      	ldr	r3, [pc, #228]	@ (8003e00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	015b      	lsls	r3, r3, #5
 8003d20:	0d1b      	lsrs	r3, r3, #20
 8003d22:	69fa      	ldr	r2, [r7, #28]
 8003d24:	fb02 f303 	mul.w	r3, r2, r3
 8003d28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d2a:	e054      	b.n	8003dd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d32:	d050      	beq.n	8003dd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d34:	f7fd fe50 	bl	80019d8 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	69fa      	ldr	r2, [r7, #28]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d902      	bls.n	8003d4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d13d      	bne.n	8003dc6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003d58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d62:	d111      	bne.n	8003d88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d6c:	d004      	beq.n	8003d78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d76:	d107      	bne.n	8003d88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d90:	d10f      	bne.n	8003db2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003db0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e017      	b.n	8003df6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d101      	bne.n	8003dd0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	4013      	ands	r3, r2
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	bf0c      	ite	eq
 8003de6:	2301      	moveq	r3, #1
 8003de8:	2300      	movne	r3, #0
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	461a      	mov	r2, r3
 8003dee:	79fb      	ldrb	r3, [r7, #7]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d19b      	bne.n	8003d2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3720      	adds	r7, #32
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	20000000 	.word	0x20000000

08003e04 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08a      	sub	sp, #40	@ 0x28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
 8003e10:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003e12:	2300      	movs	r3, #0
 8003e14:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003e16:	f7fd fddf 	bl	80019d8 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e1e:	1a9b      	subs	r3, r3, r2
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	4413      	add	r3, r2
 8003e24:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003e26:	f7fd fdd7 	bl	80019d8 <HAL_GetTick>
 8003e2a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	330c      	adds	r3, #12
 8003e32:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003e34:	4b3d      	ldr	r3, [pc, #244]	@ (8003f2c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4413      	add	r3, r2
 8003e3e:	00da      	lsls	r2, r3, #3
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	0d1b      	lsrs	r3, r3, #20
 8003e44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e46:	fb02 f303 	mul.w	r3, r2, r3
 8003e4a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003e4c:	e060      	b.n	8003f10 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003e54:	d107      	bne.n	8003e66 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d104      	bne.n	8003e66 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003e64:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6c:	d050      	beq.n	8003f10 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e6e:	f7fd fdb3 	bl	80019d8 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	6a3b      	ldr	r3, [r7, #32]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d902      	bls.n	8003e84 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d13d      	bne.n	8003f00 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003e92:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e9c:	d111      	bne.n	8003ec2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ea6:	d004      	beq.n	8003eb2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eb0:	d107      	bne.n	8003ec2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ec0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003eca:	d10f      	bne.n	8003eec <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003eea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e010      	b.n	8003f22 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689a      	ldr	r2, [r3, #8]
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d196      	bne.n	8003e4e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3728      	adds	r7, #40	@ 0x28
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	20000000 	.word	0x20000000

08003f30 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af02      	add	r7, sp, #8
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f44:	d111      	bne.n	8003f6a <SPI_EndRxTransaction+0x3a>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f4e:	d004      	beq.n	8003f5a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f58:	d107      	bne.n	8003f6a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f68:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	2200      	movs	r2, #0
 8003f72:	2180      	movs	r1, #128	@ 0x80
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f7ff febd 	bl	8003cf4 <SPI_WaitFlagStateUntilTimeout>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d007      	beq.n	8003f90 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f84:	f043 0220 	orr.w	r2, r3, #32
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e023      	b.n	8003fd8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f98:	d11d      	bne.n	8003fd6 <SPI_EndRxTransaction+0xa6>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fa2:	d004      	beq.n	8003fae <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fac:	d113      	bne.n	8003fd6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f7ff ff22 	bl	8003e04 <SPI_WaitFifoStateUntilTimeout>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d007      	beq.n	8003fd6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fca:	f043 0220 	orr.w	r2, r3, #32
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e000      	b.n	8003fd8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af02      	add	r7, sp, #8
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f7ff ff03 	bl	8003e04 <SPI_WaitFifoStateUntilTimeout>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d007      	beq.n	8004014 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004008:	f043 0220 	orr.w	r2, r3, #32
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e027      	b.n	8004064 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	2200      	movs	r2, #0
 800401c:	2180      	movs	r1, #128	@ 0x80
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f7ff fe68 	bl	8003cf4 <SPI_WaitFlagStateUntilTimeout>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d007      	beq.n	800403a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800402e:	f043 0220 	orr.w	r2, r3, #32
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e014      	b.n	8004064 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	2200      	movs	r2, #0
 8004042:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f7ff fedc 	bl	8003e04 <SPI_WaitFifoStateUntilTimeout>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d007      	beq.n	8004062 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004056:	f043 0220 	orr.w	r2, r3, #32
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e000      	b.n	8004064 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e040      	b.n	8004100 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004082:	2b00      	cmp	r3, #0
 8004084:	d106      	bne.n	8004094 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7fd fb1a 	bl	80016c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2224      	movs	r2, #36	@ 0x24
 8004098:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0201 	bic.w	r2, r2, #1
 80040a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d002      	beq.n	80040b8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 fade 	bl	8004674 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f8af 	bl	800421c <UART_SetConfig>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d101      	bne.n	80040c8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e01b      	b.n	8004100 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0201 	orr.w	r2, r2, #1
 80040f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 fb5d 	bl	80047b8 <UART_CheckIdleState>
 80040fe:	4603      	mov	r3, r0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3708      	adds	r7, #8
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b08a      	sub	sp, #40	@ 0x28
 800410c:	af02      	add	r7, sp, #8
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	603b      	str	r3, [r7, #0]
 8004114:	4613      	mov	r3, r2
 8004116:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800411c:	2b20      	cmp	r3, #32
 800411e:	d177      	bne.n	8004210 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d002      	beq.n	800412c <HAL_UART_Transmit+0x24>
 8004126:	88fb      	ldrh	r3, [r7, #6]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e070      	b.n	8004212 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2221      	movs	r2, #33	@ 0x21
 800413c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800413e:	f7fd fc4b 	bl	80019d8 <HAL_GetTick>
 8004142:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	88fa      	ldrh	r2, [r7, #6]
 8004148:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	88fa      	ldrh	r2, [r7, #6]
 8004150:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800415c:	d108      	bne.n	8004170 <HAL_UART_Transmit+0x68>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d104      	bne.n	8004170 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004166:	2300      	movs	r3, #0
 8004168:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	61bb      	str	r3, [r7, #24]
 800416e:	e003      	b.n	8004178 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004174:	2300      	movs	r3, #0
 8004176:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004178:	e02f      	b.n	80041da <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2200      	movs	r2, #0
 8004182:	2180      	movs	r1, #128	@ 0x80
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f000 fbbf 	bl	8004908 <UART_WaitOnFlagUntilTimeout>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d004      	beq.n	800419a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2220      	movs	r2, #32
 8004194:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e03b      	b.n	8004212 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10b      	bne.n	80041b8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	881a      	ldrh	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041ac:	b292      	uxth	r2, r2
 80041ae:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	3302      	adds	r3, #2
 80041b4:	61bb      	str	r3, [r7, #24]
 80041b6:	e007      	b.n	80041c8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	781a      	ldrb	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	3301      	adds	r3, #1
 80041c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1c9      	bne.n	800417a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	2200      	movs	r2, #0
 80041ee:	2140      	movs	r1, #64	@ 0x40
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 fb89 	bl	8004908 <UART_WaitOnFlagUntilTimeout>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d004      	beq.n	8004206 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2220      	movs	r2, #32
 8004200:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e005      	b.n	8004212 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2220      	movs	r2, #32
 800420a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800420c:	2300      	movs	r3, #0
 800420e:	e000      	b.n	8004212 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004210:	2302      	movs	r3, #2
  }
}
 8004212:	4618      	mov	r0, r3
 8004214:	3720      	adds	r7, #32
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
	...

0800421c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800421c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004220:	b08a      	sub	sp, #40	@ 0x28
 8004222:	af00      	add	r7, sp, #0
 8004224:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	431a      	orrs	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	431a      	orrs	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	69db      	ldr	r3, [r3, #28]
 8004240:	4313      	orrs	r3, r2
 8004242:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	4bb4      	ldr	r3, [pc, #720]	@ (800451c <UART_SetConfig+0x300>)
 800424c:	4013      	ands	r3, r2
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	6812      	ldr	r2, [r2, #0]
 8004252:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004254:	430b      	orrs	r3, r1
 8004256:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4aa9      	ldr	r2, [pc, #676]	@ (8004520 <UART_SetConfig+0x304>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d004      	beq.n	8004288 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004284:	4313      	orrs	r3, r2
 8004286:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004298:	430a      	orrs	r2, r1
 800429a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4aa0      	ldr	r2, [pc, #640]	@ (8004524 <UART_SetConfig+0x308>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d126      	bne.n	80042f4 <UART_SetConfig+0xd8>
 80042a6:	4ba0      	ldr	r3, [pc, #640]	@ (8004528 <UART_SetConfig+0x30c>)
 80042a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ac:	f003 0303 	and.w	r3, r3, #3
 80042b0:	2b03      	cmp	r3, #3
 80042b2:	d81b      	bhi.n	80042ec <UART_SetConfig+0xd0>
 80042b4:	a201      	add	r2, pc, #4	@ (adr r2, 80042bc <UART_SetConfig+0xa0>)
 80042b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ba:	bf00      	nop
 80042bc:	080042cd 	.word	0x080042cd
 80042c0:	080042dd 	.word	0x080042dd
 80042c4:	080042d5 	.word	0x080042d5
 80042c8:	080042e5 	.word	0x080042e5
 80042cc:	2301      	movs	r3, #1
 80042ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042d2:	e080      	b.n	80043d6 <UART_SetConfig+0x1ba>
 80042d4:	2302      	movs	r3, #2
 80042d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042da:	e07c      	b.n	80043d6 <UART_SetConfig+0x1ba>
 80042dc:	2304      	movs	r3, #4
 80042de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042e2:	e078      	b.n	80043d6 <UART_SetConfig+0x1ba>
 80042e4:	2308      	movs	r3, #8
 80042e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042ea:	e074      	b.n	80043d6 <UART_SetConfig+0x1ba>
 80042ec:	2310      	movs	r3, #16
 80042ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042f2:	e070      	b.n	80043d6 <UART_SetConfig+0x1ba>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a8c      	ldr	r2, [pc, #560]	@ (800452c <UART_SetConfig+0x310>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d138      	bne.n	8004370 <UART_SetConfig+0x154>
 80042fe:	4b8a      	ldr	r3, [pc, #552]	@ (8004528 <UART_SetConfig+0x30c>)
 8004300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004304:	f003 030c 	and.w	r3, r3, #12
 8004308:	2b0c      	cmp	r3, #12
 800430a:	d82d      	bhi.n	8004368 <UART_SetConfig+0x14c>
 800430c:	a201      	add	r2, pc, #4	@ (adr r2, 8004314 <UART_SetConfig+0xf8>)
 800430e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004312:	bf00      	nop
 8004314:	08004349 	.word	0x08004349
 8004318:	08004369 	.word	0x08004369
 800431c:	08004369 	.word	0x08004369
 8004320:	08004369 	.word	0x08004369
 8004324:	08004359 	.word	0x08004359
 8004328:	08004369 	.word	0x08004369
 800432c:	08004369 	.word	0x08004369
 8004330:	08004369 	.word	0x08004369
 8004334:	08004351 	.word	0x08004351
 8004338:	08004369 	.word	0x08004369
 800433c:	08004369 	.word	0x08004369
 8004340:	08004369 	.word	0x08004369
 8004344:	08004361 	.word	0x08004361
 8004348:	2300      	movs	r3, #0
 800434a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800434e:	e042      	b.n	80043d6 <UART_SetConfig+0x1ba>
 8004350:	2302      	movs	r3, #2
 8004352:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004356:	e03e      	b.n	80043d6 <UART_SetConfig+0x1ba>
 8004358:	2304      	movs	r3, #4
 800435a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800435e:	e03a      	b.n	80043d6 <UART_SetConfig+0x1ba>
 8004360:	2308      	movs	r3, #8
 8004362:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004366:	e036      	b.n	80043d6 <UART_SetConfig+0x1ba>
 8004368:	2310      	movs	r3, #16
 800436a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800436e:	e032      	b.n	80043d6 <UART_SetConfig+0x1ba>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a6a      	ldr	r2, [pc, #424]	@ (8004520 <UART_SetConfig+0x304>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d12a      	bne.n	80043d0 <UART_SetConfig+0x1b4>
 800437a:	4b6b      	ldr	r3, [pc, #428]	@ (8004528 <UART_SetConfig+0x30c>)
 800437c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004380:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004384:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004388:	d01a      	beq.n	80043c0 <UART_SetConfig+0x1a4>
 800438a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800438e:	d81b      	bhi.n	80043c8 <UART_SetConfig+0x1ac>
 8004390:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004394:	d00c      	beq.n	80043b0 <UART_SetConfig+0x194>
 8004396:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800439a:	d815      	bhi.n	80043c8 <UART_SetConfig+0x1ac>
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <UART_SetConfig+0x18c>
 80043a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043a4:	d008      	beq.n	80043b8 <UART_SetConfig+0x19c>
 80043a6:	e00f      	b.n	80043c8 <UART_SetConfig+0x1ac>
 80043a8:	2300      	movs	r3, #0
 80043aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ae:	e012      	b.n	80043d6 <UART_SetConfig+0x1ba>
 80043b0:	2302      	movs	r3, #2
 80043b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043b6:	e00e      	b.n	80043d6 <UART_SetConfig+0x1ba>
 80043b8:	2304      	movs	r3, #4
 80043ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043be:	e00a      	b.n	80043d6 <UART_SetConfig+0x1ba>
 80043c0:	2308      	movs	r3, #8
 80043c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043c6:	e006      	b.n	80043d6 <UART_SetConfig+0x1ba>
 80043c8:	2310      	movs	r3, #16
 80043ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ce:	e002      	b.n	80043d6 <UART_SetConfig+0x1ba>
 80043d0:	2310      	movs	r3, #16
 80043d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a51      	ldr	r2, [pc, #324]	@ (8004520 <UART_SetConfig+0x304>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d17a      	bne.n	80044d6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d824      	bhi.n	8004432 <UART_SetConfig+0x216>
 80043e8:	a201      	add	r2, pc, #4	@ (adr r2, 80043f0 <UART_SetConfig+0x1d4>)
 80043ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ee:	bf00      	nop
 80043f0:	08004415 	.word	0x08004415
 80043f4:	08004433 	.word	0x08004433
 80043f8:	0800441d 	.word	0x0800441d
 80043fc:	08004433 	.word	0x08004433
 8004400:	08004423 	.word	0x08004423
 8004404:	08004433 	.word	0x08004433
 8004408:	08004433 	.word	0x08004433
 800440c:	08004433 	.word	0x08004433
 8004410:	0800442b 	.word	0x0800442b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004414:	f7fe fb88 	bl	8002b28 <HAL_RCC_GetPCLK1Freq>
 8004418:	61f8      	str	r0, [r7, #28]
        break;
 800441a:	e010      	b.n	800443e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800441c:	4b44      	ldr	r3, [pc, #272]	@ (8004530 <UART_SetConfig+0x314>)
 800441e:	61fb      	str	r3, [r7, #28]
        break;
 8004420:	e00d      	b.n	800443e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004422:	f7fe fae9 	bl	80029f8 <HAL_RCC_GetSysClockFreq>
 8004426:	61f8      	str	r0, [r7, #28]
        break;
 8004428:	e009      	b.n	800443e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800442a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800442e:	61fb      	str	r3, [r7, #28]
        break;
 8004430:	e005      	b.n	800443e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004432:	2300      	movs	r3, #0
 8004434:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800443c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 8107 	beq.w	8004654 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	4613      	mov	r3, r2
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	4413      	add	r3, r2
 8004450:	69fa      	ldr	r2, [r7, #28]
 8004452:	429a      	cmp	r2, r3
 8004454:	d305      	bcc.n	8004462 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800445c:	69fa      	ldr	r2, [r7, #28]
 800445e:	429a      	cmp	r2, r3
 8004460:	d903      	bls.n	800446a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004468:	e0f4      	b.n	8004654 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	2200      	movs	r2, #0
 800446e:	461c      	mov	r4, r3
 8004470:	4615      	mov	r5, r2
 8004472:	f04f 0200 	mov.w	r2, #0
 8004476:	f04f 0300 	mov.w	r3, #0
 800447a:	022b      	lsls	r3, r5, #8
 800447c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004480:	0222      	lsls	r2, r4, #8
 8004482:	68f9      	ldr	r1, [r7, #12]
 8004484:	6849      	ldr	r1, [r1, #4]
 8004486:	0849      	lsrs	r1, r1, #1
 8004488:	2000      	movs	r0, #0
 800448a:	4688      	mov	r8, r1
 800448c:	4681      	mov	r9, r0
 800448e:	eb12 0a08 	adds.w	sl, r2, r8
 8004492:	eb43 0b09 	adc.w	fp, r3, r9
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	603b      	str	r3, [r7, #0]
 800449e:	607a      	str	r2, [r7, #4]
 80044a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044a4:	4650      	mov	r0, sl
 80044a6:	4659      	mov	r1, fp
 80044a8:	f7fb fee2 	bl	8000270 <__aeabi_uldivmod>
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	4613      	mov	r3, r2
 80044b2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044ba:	d308      	bcc.n	80044ce <UART_SetConfig+0x2b2>
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044c2:	d204      	bcs.n	80044ce <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	60da      	str	r2, [r3, #12]
 80044cc:	e0c2      	b.n	8004654 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80044d4:	e0be      	b.n	8004654 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044de:	d16a      	bne.n	80045b6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80044e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d834      	bhi.n	8004552 <UART_SetConfig+0x336>
 80044e8:	a201      	add	r2, pc, #4	@ (adr r2, 80044f0 <UART_SetConfig+0x2d4>)
 80044ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ee:	bf00      	nop
 80044f0:	08004515 	.word	0x08004515
 80044f4:	08004535 	.word	0x08004535
 80044f8:	0800453d 	.word	0x0800453d
 80044fc:	08004553 	.word	0x08004553
 8004500:	08004543 	.word	0x08004543
 8004504:	08004553 	.word	0x08004553
 8004508:	08004553 	.word	0x08004553
 800450c:	08004553 	.word	0x08004553
 8004510:	0800454b 	.word	0x0800454b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004514:	f7fe fb08 	bl	8002b28 <HAL_RCC_GetPCLK1Freq>
 8004518:	61f8      	str	r0, [r7, #28]
        break;
 800451a:	e020      	b.n	800455e <UART_SetConfig+0x342>
 800451c:	efff69f3 	.word	0xefff69f3
 8004520:	40008000 	.word	0x40008000
 8004524:	40013800 	.word	0x40013800
 8004528:	40021000 	.word	0x40021000
 800452c:	40004400 	.word	0x40004400
 8004530:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004534:	f7fe fb0e 	bl	8002b54 <HAL_RCC_GetPCLK2Freq>
 8004538:	61f8      	str	r0, [r7, #28]
        break;
 800453a:	e010      	b.n	800455e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800453c:	4b4c      	ldr	r3, [pc, #304]	@ (8004670 <UART_SetConfig+0x454>)
 800453e:	61fb      	str	r3, [r7, #28]
        break;
 8004540:	e00d      	b.n	800455e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004542:	f7fe fa59 	bl	80029f8 <HAL_RCC_GetSysClockFreq>
 8004546:	61f8      	str	r0, [r7, #28]
        break;
 8004548:	e009      	b.n	800455e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800454a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800454e:	61fb      	str	r3, [r7, #28]
        break;
 8004550:	e005      	b.n	800455e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004552:	2300      	movs	r3, #0
 8004554:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800455c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d077      	beq.n	8004654 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	005a      	lsls	r2, r3, #1
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	085b      	lsrs	r3, r3, #1
 800456e:	441a      	add	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	fbb2 f3f3 	udiv	r3, r2, r3
 8004578:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	2b0f      	cmp	r3, #15
 800457e:	d916      	bls.n	80045ae <UART_SetConfig+0x392>
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004586:	d212      	bcs.n	80045ae <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	b29b      	uxth	r3, r3
 800458c:	f023 030f 	bic.w	r3, r3, #15
 8004590:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	085b      	lsrs	r3, r3, #1
 8004596:	b29b      	uxth	r3, r3
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	b29a      	uxth	r2, r3
 800459e:	8afb      	ldrh	r3, [r7, #22]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	8afa      	ldrh	r2, [r7, #22]
 80045aa:	60da      	str	r2, [r3, #12]
 80045ac:	e052      	b.n	8004654 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80045b4:	e04e      	b.n	8004654 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045b6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80045ba:	2b08      	cmp	r3, #8
 80045bc:	d827      	bhi.n	800460e <UART_SetConfig+0x3f2>
 80045be:	a201      	add	r2, pc, #4	@ (adr r2, 80045c4 <UART_SetConfig+0x3a8>)
 80045c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c4:	080045e9 	.word	0x080045e9
 80045c8:	080045f1 	.word	0x080045f1
 80045cc:	080045f9 	.word	0x080045f9
 80045d0:	0800460f 	.word	0x0800460f
 80045d4:	080045ff 	.word	0x080045ff
 80045d8:	0800460f 	.word	0x0800460f
 80045dc:	0800460f 	.word	0x0800460f
 80045e0:	0800460f 	.word	0x0800460f
 80045e4:	08004607 	.word	0x08004607
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045e8:	f7fe fa9e 	bl	8002b28 <HAL_RCC_GetPCLK1Freq>
 80045ec:	61f8      	str	r0, [r7, #28]
        break;
 80045ee:	e014      	b.n	800461a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045f0:	f7fe fab0 	bl	8002b54 <HAL_RCC_GetPCLK2Freq>
 80045f4:	61f8      	str	r0, [r7, #28]
        break;
 80045f6:	e010      	b.n	800461a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004670 <UART_SetConfig+0x454>)
 80045fa:	61fb      	str	r3, [r7, #28]
        break;
 80045fc:	e00d      	b.n	800461a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045fe:	f7fe f9fb 	bl	80029f8 <HAL_RCC_GetSysClockFreq>
 8004602:	61f8      	str	r0, [r7, #28]
        break;
 8004604:	e009      	b.n	800461a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004606:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800460a:	61fb      	str	r3, [r7, #28]
        break;
 800460c:	e005      	b.n	800461a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004618:	bf00      	nop
    }

    if (pclk != 0U)
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d019      	beq.n	8004654 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	085a      	lsrs	r2, r3, #1
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	441a      	add	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004632:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	2b0f      	cmp	r3, #15
 8004638:	d909      	bls.n	800464e <UART_SetConfig+0x432>
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004640:	d205      	bcs.n	800464e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	b29a      	uxth	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	60da      	str	r2, [r3, #12]
 800464c:	e002      	b.n	8004654 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004660:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004664:	4618      	mov	r0, r3
 8004666:	3728      	adds	r7, #40	@ 0x28
 8004668:	46bd      	mov	sp, r7
 800466a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800466e:	bf00      	nop
 8004670:	00f42400 	.word	0x00f42400

08004674 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004680:	f003 0308 	and.w	r3, r3, #8
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00a      	beq.n	800469e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00a      	beq.n	80046c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	430a      	orrs	r2, r1
 80046be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00a      	beq.n	80046e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e6:	f003 0304 	and.w	r3, r3, #4
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004708:	f003 0310 	and.w	r3, r3, #16
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00a      	beq.n	8004726 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472a:	f003 0320 	and.w	r3, r3, #32
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00a      	beq.n	8004748 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	430a      	orrs	r2, r1
 8004746:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004750:	2b00      	cmp	r3, #0
 8004752:	d01a      	beq.n	800478a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004772:	d10a      	bne.n	800478a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	605a      	str	r2, [r3, #4]
  }
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b098      	sub	sp, #96	@ 0x60
 80047bc:	af02      	add	r7, sp, #8
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047c8:	f7fd f906 	bl	80019d8 <HAL_GetTick>
 80047cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0308 	and.w	r3, r3, #8
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d12e      	bne.n	800483a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047e4:	2200      	movs	r2, #0
 80047e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f88c 	bl	8004908 <UART_WaitOnFlagUntilTimeout>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d021      	beq.n	800483a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047fe:	e853 3f00 	ldrex	r3, [r3]
 8004802:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004806:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800480a:	653b      	str	r3, [r7, #80]	@ 0x50
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	461a      	mov	r2, r3
 8004812:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004814:	647b      	str	r3, [r7, #68]	@ 0x44
 8004816:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004818:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800481a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800481c:	e841 2300 	strex	r3, r2, [r1]
 8004820:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1e6      	bne.n	80047f6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2220      	movs	r2, #32
 800482c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e062      	b.n	8004900 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b04      	cmp	r3, #4
 8004846:	d149      	bne.n	80048dc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004848:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004850:	2200      	movs	r2, #0
 8004852:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f856 	bl	8004908 <UART_WaitOnFlagUntilTimeout>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d03c      	beq.n	80048dc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486a:	e853 3f00 	ldrex	r3, [r3]
 800486e:	623b      	str	r3, [r7, #32]
   return(result);
 8004870:	6a3b      	ldr	r3, [r7, #32]
 8004872:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004876:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	461a      	mov	r2, r3
 800487e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004880:	633b      	str	r3, [r7, #48]	@ 0x30
 8004882:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004884:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004886:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004888:	e841 2300 	strex	r3, r2, [r1]
 800488c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800488e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1e6      	bne.n	8004862 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	3308      	adds	r3, #8
 800489a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	e853 3f00 	ldrex	r3, [r3]
 80048a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f023 0301 	bic.w	r3, r3, #1
 80048aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	3308      	adds	r3, #8
 80048b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048b4:	61fa      	str	r2, [r7, #28]
 80048b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b8:	69b9      	ldr	r1, [r7, #24]
 80048ba:	69fa      	ldr	r2, [r7, #28]
 80048bc:	e841 2300 	strex	r3, r2, [r1]
 80048c0:	617b      	str	r3, [r7, #20]
   return(result);
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1e5      	bne.n	8004894 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2220      	movs	r2, #32
 80048cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e011      	b.n	8004900 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2220      	movs	r2, #32
 80048e0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2220      	movs	r2, #32
 80048e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3758      	adds	r7, #88	@ 0x58
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	603b      	str	r3, [r7, #0]
 8004914:	4613      	mov	r3, r2
 8004916:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004918:	e049      	b.n	80049ae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004920:	d045      	beq.n	80049ae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004922:	f7fd f859 	bl	80019d8 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	429a      	cmp	r2, r3
 8004930:	d302      	bcc.n	8004938 <UART_WaitOnFlagUntilTimeout+0x30>
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e048      	b.n	80049ce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0304 	and.w	r3, r3, #4
 8004946:	2b00      	cmp	r3, #0
 8004948:	d031      	beq.n	80049ae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	69db      	ldr	r3, [r3, #28]
 8004950:	f003 0308 	and.w	r3, r3, #8
 8004954:	2b08      	cmp	r3, #8
 8004956:	d110      	bne.n	800497a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2208      	movs	r2, #8
 800495e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 f838 	bl	80049d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2208      	movs	r2, #8
 800496a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e029      	b.n	80049ce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004984:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004988:	d111      	bne.n	80049ae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004992:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 f81e 	bl	80049d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2220      	movs	r2, #32
 800499e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e00f      	b.n	80049ce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	69da      	ldr	r2, [r3, #28]
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	4013      	ands	r3, r2
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	bf0c      	ite	eq
 80049be:	2301      	moveq	r3, #1
 80049c0:	2300      	movne	r3, #0
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	461a      	mov	r2, r3
 80049c6:	79fb      	ldrb	r3, [r7, #7]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d0a6      	beq.n	800491a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b095      	sub	sp, #84	@ 0x54
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049e6:	e853 3f00 	ldrex	r3, [r3]
 80049ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80049ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	461a      	mov	r2, r3
 80049fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80049fe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a04:	e841 2300 	strex	r3, r2, [r1]
 8004a08:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1e6      	bne.n	80049de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3308      	adds	r3, #8
 8004a16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a18:	6a3b      	ldr	r3, [r7, #32]
 8004a1a:	e853 3f00 	ldrex	r3, [r3]
 8004a1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	f023 0301 	bic.w	r3, r3, #1
 8004a26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	3308      	adds	r3, #8
 8004a2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a30:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a38:	e841 2300 	strex	r3, r2, [r1]
 8004a3c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1e5      	bne.n	8004a10 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d118      	bne.n	8004a7e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	e853 3f00 	ldrex	r3, [r3]
 8004a58:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	f023 0310 	bic.w	r3, r3, #16
 8004a60:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	461a      	mov	r2, r3
 8004a68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a6a:	61bb      	str	r3, [r7, #24]
 8004a6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6e:	6979      	ldr	r1, [r7, #20]
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	e841 2300 	strex	r3, r2, [r1]
 8004a76:	613b      	str	r3, [r7, #16]
   return(result);
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1e6      	bne.n	8004a4c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2220      	movs	r2, #32
 8004a82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004a92:	bf00      	nop
 8004a94:	3754      	adds	r7, #84	@ 0x54
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
	...

08004aa0 <siprintf>:
 8004aa0:	b40e      	push	{r1, r2, r3}
 8004aa2:	b500      	push	{lr}
 8004aa4:	b09c      	sub	sp, #112	@ 0x70
 8004aa6:	ab1d      	add	r3, sp, #116	@ 0x74
 8004aa8:	9002      	str	r0, [sp, #8]
 8004aaa:	9006      	str	r0, [sp, #24]
 8004aac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004ab0:	4809      	ldr	r0, [pc, #36]	@ (8004ad8 <siprintf+0x38>)
 8004ab2:	9107      	str	r1, [sp, #28]
 8004ab4:	9104      	str	r1, [sp, #16]
 8004ab6:	4909      	ldr	r1, [pc, #36]	@ (8004adc <siprintf+0x3c>)
 8004ab8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004abc:	9105      	str	r1, [sp, #20]
 8004abe:	6800      	ldr	r0, [r0, #0]
 8004ac0:	9301      	str	r3, [sp, #4]
 8004ac2:	a902      	add	r1, sp, #8
 8004ac4:	f000 f994 	bl	8004df0 <_svfiprintf_r>
 8004ac8:	9b02      	ldr	r3, [sp, #8]
 8004aca:	2200      	movs	r2, #0
 8004acc:	701a      	strb	r2, [r3, #0]
 8004ace:	b01c      	add	sp, #112	@ 0x70
 8004ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ad4:	b003      	add	sp, #12
 8004ad6:	4770      	bx	lr
 8004ad8:	2000000c 	.word	0x2000000c
 8004adc:	ffff0208 	.word	0xffff0208

08004ae0 <memset>:
 8004ae0:	4402      	add	r2, r0
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d100      	bne.n	8004aea <memset+0xa>
 8004ae8:	4770      	bx	lr
 8004aea:	f803 1b01 	strb.w	r1, [r3], #1
 8004aee:	e7f9      	b.n	8004ae4 <memset+0x4>

08004af0 <__errno>:
 8004af0:	4b01      	ldr	r3, [pc, #4]	@ (8004af8 <__errno+0x8>)
 8004af2:	6818      	ldr	r0, [r3, #0]
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	2000000c 	.word	0x2000000c

08004afc <__libc_init_array>:
 8004afc:	b570      	push	{r4, r5, r6, lr}
 8004afe:	4d0d      	ldr	r5, [pc, #52]	@ (8004b34 <__libc_init_array+0x38>)
 8004b00:	4c0d      	ldr	r4, [pc, #52]	@ (8004b38 <__libc_init_array+0x3c>)
 8004b02:	1b64      	subs	r4, r4, r5
 8004b04:	10a4      	asrs	r4, r4, #2
 8004b06:	2600      	movs	r6, #0
 8004b08:	42a6      	cmp	r6, r4
 8004b0a:	d109      	bne.n	8004b20 <__libc_init_array+0x24>
 8004b0c:	4d0b      	ldr	r5, [pc, #44]	@ (8004b3c <__libc_init_array+0x40>)
 8004b0e:	4c0c      	ldr	r4, [pc, #48]	@ (8004b40 <__libc_init_array+0x44>)
 8004b10:	f000 fc66 	bl	80053e0 <_init>
 8004b14:	1b64      	subs	r4, r4, r5
 8004b16:	10a4      	asrs	r4, r4, #2
 8004b18:	2600      	movs	r6, #0
 8004b1a:	42a6      	cmp	r6, r4
 8004b1c:	d105      	bne.n	8004b2a <__libc_init_array+0x2e>
 8004b1e:	bd70      	pop	{r4, r5, r6, pc}
 8004b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b24:	4798      	blx	r3
 8004b26:	3601      	adds	r6, #1
 8004b28:	e7ee      	b.n	8004b08 <__libc_init_array+0xc>
 8004b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b2e:	4798      	blx	r3
 8004b30:	3601      	adds	r6, #1
 8004b32:	e7f2      	b.n	8004b1a <__libc_init_array+0x1e>
 8004b34:	08005860 	.word	0x08005860
 8004b38:	08005860 	.word	0x08005860
 8004b3c:	08005860 	.word	0x08005860
 8004b40:	08005864 	.word	0x08005864

08004b44 <__retarget_lock_acquire_recursive>:
 8004b44:	4770      	bx	lr

08004b46 <__retarget_lock_release_recursive>:
 8004b46:	4770      	bx	lr

08004b48 <_free_r>:
 8004b48:	b538      	push	{r3, r4, r5, lr}
 8004b4a:	4605      	mov	r5, r0
 8004b4c:	2900      	cmp	r1, #0
 8004b4e:	d041      	beq.n	8004bd4 <_free_r+0x8c>
 8004b50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b54:	1f0c      	subs	r4, r1, #4
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	bfb8      	it	lt
 8004b5a:	18e4      	addlt	r4, r4, r3
 8004b5c:	f000 f8e0 	bl	8004d20 <__malloc_lock>
 8004b60:	4a1d      	ldr	r2, [pc, #116]	@ (8004bd8 <_free_r+0x90>)
 8004b62:	6813      	ldr	r3, [r2, #0]
 8004b64:	b933      	cbnz	r3, 8004b74 <_free_r+0x2c>
 8004b66:	6063      	str	r3, [r4, #4]
 8004b68:	6014      	str	r4, [r2, #0]
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b70:	f000 b8dc 	b.w	8004d2c <__malloc_unlock>
 8004b74:	42a3      	cmp	r3, r4
 8004b76:	d908      	bls.n	8004b8a <_free_r+0x42>
 8004b78:	6820      	ldr	r0, [r4, #0]
 8004b7a:	1821      	adds	r1, r4, r0
 8004b7c:	428b      	cmp	r3, r1
 8004b7e:	bf01      	itttt	eq
 8004b80:	6819      	ldreq	r1, [r3, #0]
 8004b82:	685b      	ldreq	r3, [r3, #4]
 8004b84:	1809      	addeq	r1, r1, r0
 8004b86:	6021      	streq	r1, [r4, #0]
 8004b88:	e7ed      	b.n	8004b66 <_free_r+0x1e>
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	b10b      	cbz	r3, 8004b94 <_free_r+0x4c>
 8004b90:	42a3      	cmp	r3, r4
 8004b92:	d9fa      	bls.n	8004b8a <_free_r+0x42>
 8004b94:	6811      	ldr	r1, [r2, #0]
 8004b96:	1850      	adds	r0, r2, r1
 8004b98:	42a0      	cmp	r0, r4
 8004b9a:	d10b      	bne.n	8004bb4 <_free_r+0x6c>
 8004b9c:	6820      	ldr	r0, [r4, #0]
 8004b9e:	4401      	add	r1, r0
 8004ba0:	1850      	adds	r0, r2, r1
 8004ba2:	4283      	cmp	r3, r0
 8004ba4:	6011      	str	r1, [r2, #0]
 8004ba6:	d1e0      	bne.n	8004b6a <_free_r+0x22>
 8004ba8:	6818      	ldr	r0, [r3, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	6053      	str	r3, [r2, #4]
 8004bae:	4408      	add	r0, r1
 8004bb0:	6010      	str	r0, [r2, #0]
 8004bb2:	e7da      	b.n	8004b6a <_free_r+0x22>
 8004bb4:	d902      	bls.n	8004bbc <_free_r+0x74>
 8004bb6:	230c      	movs	r3, #12
 8004bb8:	602b      	str	r3, [r5, #0]
 8004bba:	e7d6      	b.n	8004b6a <_free_r+0x22>
 8004bbc:	6820      	ldr	r0, [r4, #0]
 8004bbe:	1821      	adds	r1, r4, r0
 8004bc0:	428b      	cmp	r3, r1
 8004bc2:	bf04      	itt	eq
 8004bc4:	6819      	ldreq	r1, [r3, #0]
 8004bc6:	685b      	ldreq	r3, [r3, #4]
 8004bc8:	6063      	str	r3, [r4, #4]
 8004bca:	bf04      	itt	eq
 8004bcc:	1809      	addeq	r1, r1, r0
 8004bce:	6021      	streq	r1, [r4, #0]
 8004bd0:	6054      	str	r4, [r2, #4]
 8004bd2:	e7ca      	b.n	8004b6a <_free_r+0x22>
 8004bd4:	bd38      	pop	{r3, r4, r5, pc}
 8004bd6:	bf00      	nop
 8004bd8:	200002d0 	.word	0x200002d0

08004bdc <sbrk_aligned>:
 8004bdc:	b570      	push	{r4, r5, r6, lr}
 8004bde:	4e0f      	ldr	r6, [pc, #60]	@ (8004c1c <sbrk_aligned+0x40>)
 8004be0:	460c      	mov	r4, r1
 8004be2:	6831      	ldr	r1, [r6, #0]
 8004be4:	4605      	mov	r5, r0
 8004be6:	b911      	cbnz	r1, 8004bee <sbrk_aligned+0x12>
 8004be8:	f000 fba6 	bl	8005338 <_sbrk_r>
 8004bec:	6030      	str	r0, [r6, #0]
 8004bee:	4621      	mov	r1, r4
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	f000 fba1 	bl	8005338 <_sbrk_r>
 8004bf6:	1c43      	adds	r3, r0, #1
 8004bf8:	d103      	bne.n	8004c02 <sbrk_aligned+0x26>
 8004bfa:	f04f 34ff 	mov.w	r4, #4294967295
 8004bfe:	4620      	mov	r0, r4
 8004c00:	bd70      	pop	{r4, r5, r6, pc}
 8004c02:	1cc4      	adds	r4, r0, #3
 8004c04:	f024 0403 	bic.w	r4, r4, #3
 8004c08:	42a0      	cmp	r0, r4
 8004c0a:	d0f8      	beq.n	8004bfe <sbrk_aligned+0x22>
 8004c0c:	1a21      	subs	r1, r4, r0
 8004c0e:	4628      	mov	r0, r5
 8004c10:	f000 fb92 	bl	8005338 <_sbrk_r>
 8004c14:	3001      	adds	r0, #1
 8004c16:	d1f2      	bne.n	8004bfe <sbrk_aligned+0x22>
 8004c18:	e7ef      	b.n	8004bfa <sbrk_aligned+0x1e>
 8004c1a:	bf00      	nop
 8004c1c:	200002cc 	.word	0x200002cc

08004c20 <_malloc_r>:
 8004c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c24:	1ccd      	adds	r5, r1, #3
 8004c26:	f025 0503 	bic.w	r5, r5, #3
 8004c2a:	3508      	adds	r5, #8
 8004c2c:	2d0c      	cmp	r5, #12
 8004c2e:	bf38      	it	cc
 8004c30:	250c      	movcc	r5, #12
 8004c32:	2d00      	cmp	r5, #0
 8004c34:	4606      	mov	r6, r0
 8004c36:	db01      	blt.n	8004c3c <_malloc_r+0x1c>
 8004c38:	42a9      	cmp	r1, r5
 8004c3a:	d904      	bls.n	8004c46 <_malloc_r+0x26>
 8004c3c:	230c      	movs	r3, #12
 8004c3e:	6033      	str	r3, [r6, #0]
 8004c40:	2000      	movs	r0, #0
 8004c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d1c <_malloc_r+0xfc>
 8004c4a:	f000 f869 	bl	8004d20 <__malloc_lock>
 8004c4e:	f8d8 3000 	ldr.w	r3, [r8]
 8004c52:	461c      	mov	r4, r3
 8004c54:	bb44      	cbnz	r4, 8004ca8 <_malloc_r+0x88>
 8004c56:	4629      	mov	r1, r5
 8004c58:	4630      	mov	r0, r6
 8004c5a:	f7ff ffbf 	bl	8004bdc <sbrk_aligned>
 8004c5e:	1c43      	adds	r3, r0, #1
 8004c60:	4604      	mov	r4, r0
 8004c62:	d158      	bne.n	8004d16 <_malloc_r+0xf6>
 8004c64:	f8d8 4000 	ldr.w	r4, [r8]
 8004c68:	4627      	mov	r7, r4
 8004c6a:	2f00      	cmp	r7, #0
 8004c6c:	d143      	bne.n	8004cf6 <_malloc_r+0xd6>
 8004c6e:	2c00      	cmp	r4, #0
 8004c70:	d04b      	beq.n	8004d0a <_malloc_r+0xea>
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	4639      	mov	r1, r7
 8004c76:	4630      	mov	r0, r6
 8004c78:	eb04 0903 	add.w	r9, r4, r3
 8004c7c:	f000 fb5c 	bl	8005338 <_sbrk_r>
 8004c80:	4581      	cmp	r9, r0
 8004c82:	d142      	bne.n	8004d0a <_malloc_r+0xea>
 8004c84:	6821      	ldr	r1, [r4, #0]
 8004c86:	1a6d      	subs	r5, r5, r1
 8004c88:	4629      	mov	r1, r5
 8004c8a:	4630      	mov	r0, r6
 8004c8c:	f7ff ffa6 	bl	8004bdc <sbrk_aligned>
 8004c90:	3001      	adds	r0, #1
 8004c92:	d03a      	beq.n	8004d0a <_malloc_r+0xea>
 8004c94:	6823      	ldr	r3, [r4, #0]
 8004c96:	442b      	add	r3, r5
 8004c98:	6023      	str	r3, [r4, #0]
 8004c9a:	f8d8 3000 	ldr.w	r3, [r8]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	bb62      	cbnz	r2, 8004cfc <_malloc_r+0xdc>
 8004ca2:	f8c8 7000 	str.w	r7, [r8]
 8004ca6:	e00f      	b.n	8004cc8 <_malloc_r+0xa8>
 8004ca8:	6822      	ldr	r2, [r4, #0]
 8004caa:	1b52      	subs	r2, r2, r5
 8004cac:	d420      	bmi.n	8004cf0 <_malloc_r+0xd0>
 8004cae:	2a0b      	cmp	r2, #11
 8004cb0:	d917      	bls.n	8004ce2 <_malloc_r+0xc2>
 8004cb2:	1961      	adds	r1, r4, r5
 8004cb4:	42a3      	cmp	r3, r4
 8004cb6:	6025      	str	r5, [r4, #0]
 8004cb8:	bf18      	it	ne
 8004cba:	6059      	strne	r1, [r3, #4]
 8004cbc:	6863      	ldr	r3, [r4, #4]
 8004cbe:	bf08      	it	eq
 8004cc0:	f8c8 1000 	streq.w	r1, [r8]
 8004cc4:	5162      	str	r2, [r4, r5]
 8004cc6:	604b      	str	r3, [r1, #4]
 8004cc8:	4630      	mov	r0, r6
 8004cca:	f000 f82f 	bl	8004d2c <__malloc_unlock>
 8004cce:	f104 000b 	add.w	r0, r4, #11
 8004cd2:	1d23      	adds	r3, r4, #4
 8004cd4:	f020 0007 	bic.w	r0, r0, #7
 8004cd8:	1ac2      	subs	r2, r0, r3
 8004cda:	bf1c      	itt	ne
 8004cdc:	1a1b      	subne	r3, r3, r0
 8004cde:	50a3      	strne	r3, [r4, r2]
 8004ce0:	e7af      	b.n	8004c42 <_malloc_r+0x22>
 8004ce2:	6862      	ldr	r2, [r4, #4]
 8004ce4:	42a3      	cmp	r3, r4
 8004ce6:	bf0c      	ite	eq
 8004ce8:	f8c8 2000 	streq.w	r2, [r8]
 8004cec:	605a      	strne	r2, [r3, #4]
 8004cee:	e7eb      	b.n	8004cc8 <_malloc_r+0xa8>
 8004cf0:	4623      	mov	r3, r4
 8004cf2:	6864      	ldr	r4, [r4, #4]
 8004cf4:	e7ae      	b.n	8004c54 <_malloc_r+0x34>
 8004cf6:	463c      	mov	r4, r7
 8004cf8:	687f      	ldr	r7, [r7, #4]
 8004cfa:	e7b6      	b.n	8004c6a <_malloc_r+0x4a>
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	42a3      	cmp	r3, r4
 8004d02:	d1fb      	bne.n	8004cfc <_malloc_r+0xdc>
 8004d04:	2300      	movs	r3, #0
 8004d06:	6053      	str	r3, [r2, #4]
 8004d08:	e7de      	b.n	8004cc8 <_malloc_r+0xa8>
 8004d0a:	230c      	movs	r3, #12
 8004d0c:	6033      	str	r3, [r6, #0]
 8004d0e:	4630      	mov	r0, r6
 8004d10:	f000 f80c 	bl	8004d2c <__malloc_unlock>
 8004d14:	e794      	b.n	8004c40 <_malloc_r+0x20>
 8004d16:	6005      	str	r5, [r0, #0]
 8004d18:	e7d6      	b.n	8004cc8 <_malloc_r+0xa8>
 8004d1a:	bf00      	nop
 8004d1c:	200002d0 	.word	0x200002d0

08004d20 <__malloc_lock>:
 8004d20:	4801      	ldr	r0, [pc, #4]	@ (8004d28 <__malloc_lock+0x8>)
 8004d22:	f7ff bf0f 	b.w	8004b44 <__retarget_lock_acquire_recursive>
 8004d26:	bf00      	nop
 8004d28:	200002c8 	.word	0x200002c8

08004d2c <__malloc_unlock>:
 8004d2c:	4801      	ldr	r0, [pc, #4]	@ (8004d34 <__malloc_unlock+0x8>)
 8004d2e:	f7ff bf0a 	b.w	8004b46 <__retarget_lock_release_recursive>
 8004d32:	bf00      	nop
 8004d34:	200002c8 	.word	0x200002c8

08004d38 <__ssputs_r>:
 8004d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d3c:	688e      	ldr	r6, [r1, #8]
 8004d3e:	461f      	mov	r7, r3
 8004d40:	42be      	cmp	r6, r7
 8004d42:	680b      	ldr	r3, [r1, #0]
 8004d44:	4682      	mov	sl, r0
 8004d46:	460c      	mov	r4, r1
 8004d48:	4690      	mov	r8, r2
 8004d4a:	d82d      	bhi.n	8004da8 <__ssputs_r+0x70>
 8004d4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004d50:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004d54:	d026      	beq.n	8004da4 <__ssputs_r+0x6c>
 8004d56:	6965      	ldr	r5, [r4, #20]
 8004d58:	6909      	ldr	r1, [r1, #16]
 8004d5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d5e:	eba3 0901 	sub.w	r9, r3, r1
 8004d62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d66:	1c7b      	adds	r3, r7, #1
 8004d68:	444b      	add	r3, r9
 8004d6a:	106d      	asrs	r5, r5, #1
 8004d6c:	429d      	cmp	r5, r3
 8004d6e:	bf38      	it	cc
 8004d70:	461d      	movcc	r5, r3
 8004d72:	0553      	lsls	r3, r2, #21
 8004d74:	d527      	bpl.n	8004dc6 <__ssputs_r+0x8e>
 8004d76:	4629      	mov	r1, r5
 8004d78:	f7ff ff52 	bl	8004c20 <_malloc_r>
 8004d7c:	4606      	mov	r6, r0
 8004d7e:	b360      	cbz	r0, 8004dda <__ssputs_r+0xa2>
 8004d80:	6921      	ldr	r1, [r4, #16]
 8004d82:	464a      	mov	r2, r9
 8004d84:	f000 fae8 	bl	8005358 <memcpy>
 8004d88:	89a3      	ldrh	r3, [r4, #12]
 8004d8a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004d8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d92:	81a3      	strh	r3, [r4, #12]
 8004d94:	6126      	str	r6, [r4, #16]
 8004d96:	6165      	str	r5, [r4, #20]
 8004d98:	444e      	add	r6, r9
 8004d9a:	eba5 0509 	sub.w	r5, r5, r9
 8004d9e:	6026      	str	r6, [r4, #0]
 8004da0:	60a5      	str	r5, [r4, #8]
 8004da2:	463e      	mov	r6, r7
 8004da4:	42be      	cmp	r6, r7
 8004da6:	d900      	bls.n	8004daa <__ssputs_r+0x72>
 8004da8:	463e      	mov	r6, r7
 8004daa:	6820      	ldr	r0, [r4, #0]
 8004dac:	4632      	mov	r2, r6
 8004dae:	4641      	mov	r1, r8
 8004db0:	f000 faa8 	bl	8005304 <memmove>
 8004db4:	68a3      	ldr	r3, [r4, #8]
 8004db6:	1b9b      	subs	r3, r3, r6
 8004db8:	60a3      	str	r3, [r4, #8]
 8004dba:	6823      	ldr	r3, [r4, #0]
 8004dbc:	4433      	add	r3, r6
 8004dbe:	6023      	str	r3, [r4, #0]
 8004dc0:	2000      	movs	r0, #0
 8004dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc6:	462a      	mov	r2, r5
 8004dc8:	f000 fad4 	bl	8005374 <_realloc_r>
 8004dcc:	4606      	mov	r6, r0
 8004dce:	2800      	cmp	r0, #0
 8004dd0:	d1e0      	bne.n	8004d94 <__ssputs_r+0x5c>
 8004dd2:	6921      	ldr	r1, [r4, #16]
 8004dd4:	4650      	mov	r0, sl
 8004dd6:	f7ff feb7 	bl	8004b48 <_free_r>
 8004dda:	230c      	movs	r3, #12
 8004ddc:	f8ca 3000 	str.w	r3, [sl]
 8004de0:	89a3      	ldrh	r3, [r4, #12]
 8004de2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004de6:	81a3      	strh	r3, [r4, #12]
 8004de8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dec:	e7e9      	b.n	8004dc2 <__ssputs_r+0x8a>
	...

08004df0 <_svfiprintf_r>:
 8004df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004df4:	4698      	mov	r8, r3
 8004df6:	898b      	ldrh	r3, [r1, #12]
 8004df8:	061b      	lsls	r3, r3, #24
 8004dfa:	b09d      	sub	sp, #116	@ 0x74
 8004dfc:	4607      	mov	r7, r0
 8004dfe:	460d      	mov	r5, r1
 8004e00:	4614      	mov	r4, r2
 8004e02:	d510      	bpl.n	8004e26 <_svfiprintf_r+0x36>
 8004e04:	690b      	ldr	r3, [r1, #16]
 8004e06:	b973      	cbnz	r3, 8004e26 <_svfiprintf_r+0x36>
 8004e08:	2140      	movs	r1, #64	@ 0x40
 8004e0a:	f7ff ff09 	bl	8004c20 <_malloc_r>
 8004e0e:	6028      	str	r0, [r5, #0]
 8004e10:	6128      	str	r0, [r5, #16]
 8004e12:	b930      	cbnz	r0, 8004e22 <_svfiprintf_r+0x32>
 8004e14:	230c      	movs	r3, #12
 8004e16:	603b      	str	r3, [r7, #0]
 8004e18:	f04f 30ff 	mov.w	r0, #4294967295
 8004e1c:	b01d      	add	sp, #116	@ 0x74
 8004e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e22:	2340      	movs	r3, #64	@ 0x40
 8004e24:	616b      	str	r3, [r5, #20]
 8004e26:	2300      	movs	r3, #0
 8004e28:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e2a:	2320      	movs	r3, #32
 8004e2c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004e30:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e34:	2330      	movs	r3, #48	@ 0x30
 8004e36:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004fd4 <_svfiprintf_r+0x1e4>
 8004e3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004e3e:	f04f 0901 	mov.w	r9, #1
 8004e42:	4623      	mov	r3, r4
 8004e44:	469a      	mov	sl, r3
 8004e46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e4a:	b10a      	cbz	r2, 8004e50 <_svfiprintf_r+0x60>
 8004e4c:	2a25      	cmp	r2, #37	@ 0x25
 8004e4e:	d1f9      	bne.n	8004e44 <_svfiprintf_r+0x54>
 8004e50:	ebba 0b04 	subs.w	fp, sl, r4
 8004e54:	d00b      	beq.n	8004e6e <_svfiprintf_r+0x7e>
 8004e56:	465b      	mov	r3, fp
 8004e58:	4622      	mov	r2, r4
 8004e5a:	4629      	mov	r1, r5
 8004e5c:	4638      	mov	r0, r7
 8004e5e:	f7ff ff6b 	bl	8004d38 <__ssputs_r>
 8004e62:	3001      	adds	r0, #1
 8004e64:	f000 80a7 	beq.w	8004fb6 <_svfiprintf_r+0x1c6>
 8004e68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e6a:	445a      	add	r2, fp
 8004e6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e6e:	f89a 3000 	ldrb.w	r3, [sl]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f000 809f 	beq.w	8004fb6 <_svfiprintf_r+0x1c6>
 8004e78:	2300      	movs	r3, #0
 8004e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e82:	f10a 0a01 	add.w	sl, sl, #1
 8004e86:	9304      	str	r3, [sp, #16]
 8004e88:	9307      	str	r3, [sp, #28]
 8004e8a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004e8e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004e90:	4654      	mov	r4, sl
 8004e92:	2205      	movs	r2, #5
 8004e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e98:	484e      	ldr	r0, [pc, #312]	@ (8004fd4 <_svfiprintf_r+0x1e4>)
 8004e9a:	f7fb f999 	bl	80001d0 <memchr>
 8004e9e:	9a04      	ldr	r2, [sp, #16]
 8004ea0:	b9d8      	cbnz	r0, 8004eda <_svfiprintf_r+0xea>
 8004ea2:	06d0      	lsls	r0, r2, #27
 8004ea4:	bf44      	itt	mi
 8004ea6:	2320      	movmi	r3, #32
 8004ea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004eac:	0711      	lsls	r1, r2, #28
 8004eae:	bf44      	itt	mi
 8004eb0:	232b      	movmi	r3, #43	@ 0x2b
 8004eb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004eb6:	f89a 3000 	ldrb.w	r3, [sl]
 8004eba:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ebc:	d015      	beq.n	8004eea <_svfiprintf_r+0xfa>
 8004ebe:	9a07      	ldr	r2, [sp, #28]
 8004ec0:	4654      	mov	r4, sl
 8004ec2:	2000      	movs	r0, #0
 8004ec4:	f04f 0c0a 	mov.w	ip, #10
 8004ec8:	4621      	mov	r1, r4
 8004eca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ece:	3b30      	subs	r3, #48	@ 0x30
 8004ed0:	2b09      	cmp	r3, #9
 8004ed2:	d94b      	bls.n	8004f6c <_svfiprintf_r+0x17c>
 8004ed4:	b1b0      	cbz	r0, 8004f04 <_svfiprintf_r+0x114>
 8004ed6:	9207      	str	r2, [sp, #28]
 8004ed8:	e014      	b.n	8004f04 <_svfiprintf_r+0x114>
 8004eda:	eba0 0308 	sub.w	r3, r0, r8
 8004ede:	fa09 f303 	lsl.w	r3, r9, r3
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	9304      	str	r3, [sp, #16]
 8004ee6:	46a2      	mov	sl, r4
 8004ee8:	e7d2      	b.n	8004e90 <_svfiprintf_r+0xa0>
 8004eea:	9b03      	ldr	r3, [sp, #12]
 8004eec:	1d19      	adds	r1, r3, #4
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	9103      	str	r1, [sp, #12]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	bfbb      	ittet	lt
 8004ef6:	425b      	neglt	r3, r3
 8004ef8:	f042 0202 	orrlt.w	r2, r2, #2
 8004efc:	9307      	strge	r3, [sp, #28]
 8004efe:	9307      	strlt	r3, [sp, #28]
 8004f00:	bfb8      	it	lt
 8004f02:	9204      	strlt	r2, [sp, #16]
 8004f04:	7823      	ldrb	r3, [r4, #0]
 8004f06:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f08:	d10a      	bne.n	8004f20 <_svfiprintf_r+0x130>
 8004f0a:	7863      	ldrb	r3, [r4, #1]
 8004f0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f0e:	d132      	bne.n	8004f76 <_svfiprintf_r+0x186>
 8004f10:	9b03      	ldr	r3, [sp, #12]
 8004f12:	1d1a      	adds	r2, r3, #4
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	9203      	str	r2, [sp, #12]
 8004f18:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f1c:	3402      	adds	r4, #2
 8004f1e:	9305      	str	r3, [sp, #20]
 8004f20:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004fe4 <_svfiprintf_r+0x1f4>
 8004f24:	7821      	ldrb	r1, [r4, #0]
 8004f26:	2203      	movs	r2, #3
 8004f28:	4650      	mov	r0, sl
 8004f2a:	f7fb f951 	bl	80001d0 <memchr>
 8004f2e:	b138      	cbz	r0, 8004f40 <_svfiprintf_r+0x150>
 8004f30:	9b04      	ldr	r3, [sp, #16]
 8004f32:	eba0 000a 	sub.w	r0, r0, sl
 8004f36:	2240      	movs	r2, #64	@ 0x40
 8004f38:	4082      	lsls	r2, r0
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	3401      	adds	r4, #1
 8004f3e:	9304      	str	r3, [sp, #16]
 8004f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f44:	4824      	ldr	r0, [pc, #144]	@ (8004fd8 <_svfiprintf_r+0x1e8>)
 8004f46:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004f4a:	2206      	movs	r2, #6
 8004f4c:	f7fb f940 	bl	80001d0 <memchr>
 8004f50:	2800      	cmp	r0, #0
 8004f52:	d036      	beq.n	8004fc2 <_svfiprintf_r+0x1d2>
 8004f54:	4b21      	ldr	r3, [pc, #132]	@ (8004fdc <_svfiprintf_r+0x1ec>)
 8004f56:	bb1b      	cbnz	r3, 8004fa0 <_svfiprintf_r+0x1b0>
 8004f58:	9b03      	ldr	r3, [sp, #12]
 8004f5a:	3307      	adds	r3, #7
 8004f5c:	f023 0307 	bic.w	r3, r3, #7
 8004f60:	3308      	adds	r3, #8
 8004f62:	9303      	str	r3, [sp, #12]
 8004f64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f66:	4433      	add	r3, r6
 8004f68:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f6a:	e76a      	b.n	8004e42 <_svfiprintf_r+0x52>
 8004f6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f70:	460c      	mov	r4, r1
 8004f72:	2001      	movs	r0, #1
 8004f74:	e7a8      	b.n	8004ec8 <_svfiprintf_r+0xd8>
 8004f76:	2300      	movs	r3, #0
 8004f78:	3401      	adds	r4, #1
 8004f7a:	9305      	str	r3, [sp, #20]
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	f04f 0c0a 	mov.w	ip, #10
 8004f82:	4620      	mov	r0, r4
 8004f84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f88:	3a30      	subs	r2, #48	@ 0x30
 8004f8a:	2a09      	cmp	r2, #9
 8004f8c:	d903      	bls.n	8004f96 <_svfiprintf_r+0x1a6>
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d0c6      	beq.n	8004f20 <_svfiprintf_r+0x130>
 8004f92:	9105      	str	r1, [sp, #20]
 8004f94:	e7c4      	b.n	8004f20 <_svfiprintf_r+0x130>
 8004f96:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f9a:	4604      	mov	r4, r0
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e7f0      	b.n	8004f82 <_svfiprintf_r+0x192>
 8004fa0:	ab03      	add	r3, sp, #12
 8004fa2:	9300      	str	r3, [sp, #0]
 8004fa4:	462a      	mov	r2, r5
 8004fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8004fe0 <_svfiprintf_r+0x1f0>)
 8004fa8:	a904      	add	r1, sp, #16
 8004faa:	4638      	mov	r0, r7
 8004fac:	f3af 8000 	nop.w
 8004fb0:	1c42      	adds	r2, r0, #1
 8004fb2:	4606      	mov	r6, r0
 8004fb4:	d1d6      	bne.n	8004f64 <_svfiprintf_r+0x174>
 8004fb6:	89ab      	ldrh	r3, [r5, #12]
 8004fb8:	065b      	lsls	r3, r3, #25
 8004fba:	f53f af2d 	bmi.w	8004e18 <_svfiprintf_r+0x28>
 8004fbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004fc0:	e72c      	b.n	8004e1c <_svfiprintf_r+0x2c>
 8004fc2:	ab03      	add	r3, sp, #12
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	462a      	mov	r2, r5
 8004fc8:	4b05      	ldr	r3, [pc, #20]	@ (8004fe0 <_svfiprintf_r+0x1f0>)
 8004fca:	a904      	add	r1, sp, #16
 8004fcc:	4638      	mov	r0, r7
 8004fce:	f000 f879 	bl	80050c4 <_printf_i>
 8004fd2:	e7ed      	b.n	8004fb0 <_svfiprintf_r+0x1c0>
 8004fd4:	08005824 	.word	0x08005824
 8004fd8:	0800582e 	.word	0x0800582e
 8004fdc:	00000000 	.word	0x00000000
 8004fe0:	08004d39 	.word	0x08004d39
 8004fe4:	0800582a 	.word	0x0800582a

08004fe8 <_printf_common>:
 8004fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fec:	4616      	mov	r6, r2
 8004fee:	4698      	mov	r8, r3
 8004ff0:	688a      	ldr	r2, [r1, #8]
 8004ff2:	690b      	ldr	r3, [r1, #16]
 8004ff4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	bfb8      	it	lt
 8004ffc:	4613      	movlt	r3, r2
 8004ffe:	6033      	str	r3, [r6, #0]
 8005000:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005004:	4607      	mov	r7, r0
 8005006:	460c      	mov	r4, r1
 8005008:	b10a      	cbz	r2, 800500e <_printf_common+0x26>
 800500a:	3301      	adds	r3, #1
 800500c:	6033      	str	r3, [r6, #0]
 800500e:	6823      	ldr	r3, [r4, #0]
 8005010:	0699      	lsls	r1, r3, #26
 8005012:	bf42      	ittt	mi
 8005014:	6833      	ldrmi	r3, [r6, #0]
 8005016:	3302      	addmi	r3, #2
 8005018:	6033      	strmi	r3, [r6, #0]
 800501a:	6825      	ldr	r5, [r4, #0]
 800501c:	f015 0506 	ands.w	r5, r5, #6
 8005020:	d106      	bne.n	8005030 <_printf_common+0x48>
 8005022:	f104 0a19 	add.w	sl, r4, #25
 8005026:	68e3      	ldr	r3, [r4, #12]
 8005028:	6832      	ldr	r2, [r6, #0]
 800502a:	1a9b      	subs	r3, r3, r2
 800502c:	42ab      	cmp	r3, r5
 800502e:	dc26      	bgt.n	800507e <_printf_common+0x96>
 8005030:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005034:	6822      	ldr	r2, [r4, #0]
 8005036:	3b00      	subs	r3, #0
 8005038:	bf18      	it	ne
 800503a:	2301      	movne	r3, #1
 800503c:	0692      	lsls	r2, r2, #26
 800503e:	d42b      	bmi.n	8005098 <_printf_common+0xb0>
 8005040:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005044:	4641      	mov	r1, r8
 8005046:	4638      	mov	r0, r7
 8005048:	47c8      	blx	r9
 800504a:	3001      	adds	r0, #1
 800504c:	d01e      	beq.n	800508c <_printf_common+0xa4>
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	6922      	ldr	r2, [r4, #16]
 8005052:	f003 0306 	and.w	r3, r3, #6
 8005056:	2b04      	cmp	r3, #4
 8005058:	bf02      	ittt	eq
 800505a:	68e5      	ldreq	r5, [r4, #12]
 800505c:	6833      	ldreq	r3, [r6, #0]
 800505e:	1aed      	subeq	r5, r5, r3
 8005060:	68a3      	ldr	r3, [r4, #8]
 8005062:	bf0c      	ite	eq
 8005064:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005068:	2500      	movne	r5, #0
 800506a:	4293      	cmp	r3, r2
 800506c:	bfc4      	itt	gt
 800506e:	1a9b      	subgt	r3, r3, r2
 8005070:	18ed      	addgt	r5, r5, r3
 8005072:	2600      	movs	r6, #0
 8005074:	341a      	adds	r4, #26
 8005076:	42b5      	cmp	r5, r6
 8005078:	d11a      	bne.n	80050b0 <_printf_common+0xc8>
 800507a:	2000      	movs	r0, #0
 800507c:	e008      	b.n	8005090 <_printf_common+0xa8>
 800507e:	2301      	movs	r3, #1
 8005080:	4652      	mov	r2, sl
 8005082:	4641      	mov	r1, r8
 8005084:	4638      	mov	r0, r7
 8005086:	47c8      	blx	r9
 8005088:	3001      	adds	r0, #1
 800508a:	d103      	bne.n	8005094 <_printf_common+0xac>
 800508c:	f04f 30ff 	mov.w	r0, #4294967295
 8005090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005094:	3501      	adds	r5, #1
 8005096:	e7c6      	b.n	8005026 <_printf_common+0x3e>
 8005098:	18e1      	adds	r1, r4, r3
 800509a:	1c5a      	adds	r2, r3, #1
 800509c:	2030      	movs	r0, #48	@ 0x30
 800509e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80050a2:	4422      	add	r2, r4
 80050a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80050a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80050ac:	3302      	adds	r3, #2
 80050ae:	e7c7      	b.n	8005040 <_printf_common+0x58>
 80050b0:	2301      	movs	r3, #1
 80050b2:	4622      	mov	r2, r4
 80050b4:	4641      	mov	r1, r8
 80050b6:	4638      	mov	r0, r7
 80050b8:	47c8      	blx	r9
 80050ba:	3001      	adds	r0, #1
 80050bc:	d0e6      	beq.n	800508c <_printf_common+0xa4>
 80050be:	3601      	adds	r6, #1
 80050c0:	e7d9      	b.n	8005076 <_printf_common+0x8e>
	...

080050c4 <_printf_i>:
 80050c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050c8:	7e0f      	ldrb	r7, [r1, #24]
 80050ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80050cc:	2f78      	cmp	r7, #120	@ 0x78
 80050ce:	4691      	mov	r9, r2
 80050d0:	4680      	mov	r8, r0
 80050d2:	460c      	mov	r4, r1
 80050d4:	469a      	mov	sl, r3
 80050d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80050da:	d807      	bhi.n	80050ec <_printf_i+0x28>
 80050dc:	2f62      	cmp	r7, #98	@ 0x62
 80050de:	d80a      	bhi.n	80050f6 <_printf_i+0x32>
 80050e0:	2f00      	cmp	r7, #0
 80050e2:	f000 80d2 	beq.w	800528a <_printf_i+0x1c6>
 80050e6:	2f58      	cmp	r7, #88	@ 0x58
 80050e8:	f000 80b9 	beq.w	800525e <_printf_i+0x19a>
 80050ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80050f4:	e03a      	b.n	800516c <_printf_i+0xa8>
 80050f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80050fa:	2b15      	cmp	r3, #21
 80050fc:	d8f6      	bhi.n	80050ec <_printf_i+0x28>
 80050fe:	a101      	add	r1, pc, #4	@ (adr r1, 8005104 <_printf_i+0x40>)
 8005100:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005104:	0800515d 	.word	0x0800515d
 8005108:	08005171 	.word	0x08005171
 800510c:	080050ed 	.word	0x080050ed
 8005110:	080050ed 	.word	0x080050ed
 8005114:	080050ed 	.word	0x080050ed
 8005118:	080050ed 	.word	0x080050ed
 800511c:	08005171 	.word	0x08005171
 8005120:	080050ed 	.word	0x080050ed
 8005124:	080050ed 	.word	0x080050ed
 8005128:	080050ed 	.word	0x080050ed
 800512c:	080050ed 	.word	0x080050ed
 8005130:	08005271 	.word	0x08005271
 8005134:	0800519b 	.word	0x0800519b
 8005138:	0800522b 	.word	0x0800522b
 800513c:	080050ed 	.word	0x080050ed
 8005140:	080050ed 	.word	0x080050ed
 8005144:	08005293 	.word	0x08005293
 8005148:	080050ed 	.word	0x080050ed
 800514c:	0800519b 	.word	0x0800519b
 8005150:	080050ed 	.word	0x080050ed
 8005154:	080050ed 	.word	0x080050ed
 8005158:	08005233 	.word	0x08005233
 800515c:	6833      	ldr	r3, [r6, #0]
 800515e:	1d1a      	adds	r2, r3, #4
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6032      	str	r2, [r6, #0]
 8005164:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005168:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800516c:	2301      	movs	r3, #1
 800516e:	e09d      	b.n	80052ac <_printf_i+0x1e8>
 8005170:	6833      	ldr	r3, [r6, #0]
 8005172:	6820      	ldr	r0, [r4, #0]
 8005174:	1d19      	adds	r1, r3, #4
 8005176:	6031      	str	r1, [r6, #0]
 8005178:	0606      	lsls	r6, r0, #24
 800517a:	d501      	bpl.n	8005180 <_printf_i+0xbc>
 800517c:	681d      	ldr	r5, [r3, #0]
 800517e:	e003      	b.n	8005188 <_printf_i+0xc4>
 8005180:	0645      	lsls	r5, r0, #25
 8005182:	d5fb      	bpl.n	800517c <_printf_i+0xb8>
 8005184:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005188:	2d00      	cmp	r5, #0
 800518a:	da03      	bge.n	8005194 <_printf_i+0xd0>
 800518c:	232d      	movs	r3, #45	@ 0x2d
 800518e:	426d      	negs	r5, r5
 8005190:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005194:	4859      	ldr	r0, [pc, #356]	@ (80052fc <_printf_i+0x238>)
 8005196:	230a      	movs	r3, #10
 8005198:	e011      	b.n	80051be <_printf_i+0xfa>
 800519a:	6821      	ldr	r1, [r4, #0]
 800519c:	6833      	ldr	r3, [r6, #0]
 800519e:	0608      	lsls	r0, r1, #24
 80051a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80051a4:	d402      	bmi.n	80051ac <_printf_i+0xe8>
 80051a6:	0649      	lsls	r1, r1, #25
 80051a8:	bf48      	it	mi
 80051aa:	b2ad      	uxthmi	r5, r5
 80051ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80051ae:	4853      	ldr	r0, [pc, #332]	@ (80052fc <_printf_i+0x238>)
 80051b0:	6033      	str	r3, [r6, #0]
 80051b2:	bf14      	ite	ne
 80051b4:	230a      	movne	r3, #10
 80051b6:	2308      	moveq	r3, #8
 80051b8:	2100      	movs	r1, #0
 80051ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80051be:	6866      	ldr	r6, [r4, #4]
 80051c0:	60a6      	str	r6, [r4, #8]
 80051c2:	2e00      	cmp	r6, #0
 80051c4:	bfa2      	ittt	ge
 80051c6:	6821      	ldrge	r1, [r4, #0]
 80051c8:	f021 0104 	bicge.w	r1, r1, #4
 80051cc:	6021      	strge	r1, [r4, #0]
 80051ce:	b90d      	cbnz	r5, 80051d4 <_printf_i+0x110>
 80051d0:	2e00      	cmp	r6, #0
 80051d2:	d04b      	beq.n	800526c <_printf_i+0x1a8>
 80051d4:	4616      	mov	r6, r2
 80051d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80051da:	fb03 5711 	mls	r7, r3, r1, r5
 80051de:	5dc7      	ldrb	r7, [r0, r7]
 80051e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80051e4:	462f      	mov	r7, r5
 80051e6:	42bb      	cmp	r3, r7
 80051e8:	460d      	mov	r5, r1
 80051ea:	d9f4      	bls.n	80051d6 <_printf_i+0x112>
 80051ec:	2b08      	cmp	r3, #8
 80051ee:	d10b      	bne.n	8005208 <_printf_i+0x144>
 80051f0:	6823      	ldr	r3, [r4, #0]
 80051f2:	07df      	lsls	r7, r3, #31
 80051f4:	d508      	bpl.n	8005208 <_printf_i+0x144>
 80051f6:	6923      	ldr	r3, [r4, #16]
 80051f8:	6861      	ldr	r1, [r4, #4]
 80051fa:	4299      	cmp	r1, r3
 80051fc:	bfde      	ittt	le
 80051fe:	2330      	movle	r3, #48	@ 0x30
 8005200:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005204:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005208:	1b92      	subs	r2, r2, r6
 800520a:	6122      	str	r2, [r4, #16]
 800520c:	f8cd a000 	str.w	sl, [sp]
 8005210:	464b      	mov	r3, r9
 8005212:	aa03      	add	r2, sp, #12
 8005214:	4621      	mov	r1, r4
 8005216:	4640      	mov	r0, r8
 8005218:	f7ff fee6 	bl	8004fe8 <_printf_common>
 800521c:	3001      	adds	r0, #1
 800521e:	d14a      	bne.n	80052b6 <_printf_i+0x1f2>
 8005220:	f04f 30ff 	mov.w	r0, #4294967295
 8005224:	b004      	add	sp, #16
 8005226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800522a:	6823      	ldr	r3, [r4, #0]
 800522c:	f043 0320 	orr.w	r3, r3, #32
 8005230:	6023      	str	r3, [r4, #0]
 8005232:	4833      	ldr	r0, [pc, #204]	@ (8005300 <_printf_i+0x23c>)
 8005234:	2778      	movs	r7, #120	@ 0x78
 8005236:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800523a:	6823      	ldr	r3, [r4, #0]
 800523c:	6831      	ldr	r1, [r6, #0]
 800523e:	061f      	lsls	r7, r3, #24
 8005240:	f851 5b04 	ldr.w	r5, [r1], #4
 8005244:	d402      	bmi.n	800524c <_printf_i+0x188>
 8005246:	065f      	lsls	r7, r3, #25
 8005248:	bf48      	it	mi
 800524a:	b2ad      	uxthmi	r5, r5
 800524c:	6031      	str	r1, [r6, #0]
 800524e:	07d9      	lsls	r1, r3, #31
 8005250:	bf44      	itt	mi
 8005252:	f043 0320 	orrmi.w	r3, r3, #32
 8005256:	6023      	strmi	r3, [r4, #0]
 8005258:	b11d      	cbz	r5, 8005262 <_printf_i+0x19e>
 800525a:	2310      	movs	r3, #16
 800525c:	e7ac      	b.n	80051b8 <_printf_i+0xf4>
 800525e:	4827      	ldr	r0, [pc, #156]	@ (80052fc <_printf_i+0x238>)
 8005260:	e7e9      	b.n	8005236 <_printf_i+0x172>
 8005262:	6823      	ldr	r3, [r4, #0]
 8005264:	f023 0320 	bic.w	r3, r3, #32
 8005268:	6023      	str	r3, [r4, #0]
 800526a:	e7f6      	b.n	800525a <_printf_i+0x196>
 800526c:	4616      	mov	r6, r2
 800526e:	e7bd      	b.n	80051ec <_printf_i+0x128>
 8005270:	6833      	ldr	r3, [r6, #0]
 8005272:	6825      	ldr	r5, [r4, #0]
 8005274:	6961      	ldr	r1, [r4, #20]
 8005276:	1d18      	adds	r0, r3, #4
 8005278:	6030      	str	r0, [r6, #0]
 800527a:	062e      	lsls	r6, r5, #24
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	d501      	bpl.n	8005284 <_printf_i+0x1c0>
 8005280:	6019      	str	r1, [r3, #0]
 8005282:	e002      	b.n	800528a <_printf_i+0x1c6>
 8005284:	0668      	lsls	r0, r5, #25
 8005286:	d5fb      	bpl.n	8005280 <_printf_i+0x1bc>
 8005288:	8019      	strh	r1, [r3, #0]
 800528a:	2300      	movs	r3, #0
 800528c:	6123      	str	r3, [r4, #16]
 800528e:	4616      	mov	r6, r2
 8005290:	e7bc      	b.n	800520c <_printf_i+0x148>
 8005292:	6833      	ldr	r3, [r6, #0]
 8005294:	1d1a      	adds	r2, r3, #4
 8005296:	6032      	str	r2, [r6, #0]
 8005298:	681e      	ldr	r6, [r3, #0]
 800529a:	6862      	ldr	r2, [r4, #4]
 800529c:	2100      	movs	r1, #0
 800529e:	4630      	mov	r0, r6
 80052a0:	f7fa ff96 	bl	80001d0 <memchr>
 80052a4:	b108      	cbz	r0, 80052aa <_printf_i+0x1e6>
 80052a6:	1b80      	subs	r0, r0, r6
 80052a8:	6060      	str	r0, [r4, #4]
 80052aa:	6863      	ldr	r3, [r4, #4]
 80052ac:	6123      	str	r3, [r4, #16]
 80052ae:	2300      	movs	r3, #0
 80052b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052b4:	e7aa      	b.n	800520c <_printf_i+0x148>
 80052b6:	6923      	ldr	r3, [r4, #16]
 80052b8:	4632      	mov	r2, r6
 80052ba:	4649      	mov	r1, r9
 80052bc:	4640      	mov	r0, r8
 80052be:	47d0      	blx	sl
 80052c0:	3001      	adds	r0, #1
 80052c2:	d0ad      	beq.n	8005220 <_printf_i+0x15c>
 80052c4:	6823      	ldr	r3, [r4, #0]
 80052c6:	079b      	lsls	r3, r3, #30
 80052c8:	d413      	bmi.n	80052f2 <_printf_i+0x22e>
 80052ca:	68e0      	ldr	r0, [r4, #12]
 80052cc:	9b03      	ldr	r3, [sp, #12]
 80052ce:	4298      	cmp	r0, r3
 80052d0:	bfb8      	it	lt
 80052d2:	4618      	movlt	r0, r3
 80052d4:	e7a6      	b.n	8005224 <_printf_i+0x160>
 80052d6:	2301      	movs	r3, #1
 80052d8:	4632      	mov	r2, r6
 80052da:	4649      	mov	r1, r9
 80052dc:	4640      	mov	r0, r8
 80052de:	47d0      	blx	sl
 80052e0:	3001      	adds	r0, #1
 80052e2:	d09d      	beq.n	8005220 <_printf_i+0x15c>
 80052e4:	3501      	adds	r5, #1
 80052e6:	68e3      	ldr	r3, [r4, #12]
 80052e8:	9903      	ldr	r1, [sp, #12]
 80052ea:	1a5b      	subs	r3, r3, r1
 80052ec:	42ab      	cmp	r3, r5
 80052ee:	dcf2      	bgt.n	80052d6 <_printf_i+0x212>
 80052f0:	e7eb      	b.n	80052ca <_printf_i+0x206>
 80052f2:	2500      	movs	r5, #0
 80052f4:	f104 0619 	add.w	r6, r4, #25
 80052f8:	e7f5      	b.n	80052e6 <_printf_i+0x222>
 80052fa:	bf00      	nop
 80052fc:	08005835 	.word	0x08005835
 8005300:	08005846 	.word	0x08005846

08005304 <memmove>:
 8005304:	4288      	cmp	r0, r1
 8005306:	b510      	push	{r4, lr}
 8005308:	eb01 0402 	add.w	r4, r1, r2
 800530c:	d902      	bls.n	8005314 <memmove+0x10>
 800530e:	4284      	cmp	r4, r0
 8005310:	4623      	mov	r3, r4
 8005312:	d807      	bhi.n	8005324 <memmove+0x20>
 8005314:	1e43      	subs	r3, r0, #1
 8005316:	42a1      	cmp	r1, r4
 8005318:	d008      	beq.n	800532c <memmove+0x28>
 800531a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800531e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005322:	e7f8      	b.n	8005316 <memmove+0x12>
 8005324:	4402      	add	r2, r0
 8005326:	4601      	mov	r1, r0
 8005328:	428a      	cmp	r2, r1
 800532a:	d100      	bne.n	800532e <memmove+0x2a>
 800532c:	bd10      	pop	{r4, pc}
 800532e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005332:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005336:	e7f7      	b.n	8005328 <memmove+0x24>

08005338 <_sbrk_r>:
 8005338:	b538      	push	{r3, r4, r5, lr}
 800533a:	4d06      	ldr	r5, [pc, #24]	@ (8005354 <_sbrk_r+0x1c>)
 800533c:	2300      	movs	r3, #0
 800533e:	4604      	mov	r4, r0
 8005340:	4608      	mov	r0, r1
 8005342:	602b      	str	r3, [r5, #0]
 8005344:	f7fc fa5a 	bl	80017fc <_sbrk>
 8005348:	1c43      	adds	r3, r0, #1
 800534a:	d102      	bne.n	8005352 <_sbrk_r+0x1a>
 800534c:	682b      	ldr	r3, [r5, #0]
 800534e:	b103      	cbz	r3, 8005352 <_sbrk_r+0x1a>
 8005350:	6023      	str	r3, [r4, #0]
 8005352:	bd38      	pop	{r3, r4, r5, pc}
 8005354:	200002c4 	.word	0x200002c4

08005358 <memcpy>:
 8005358:	440a      	add	r2, r1
 800535a:	4291      	cmp	r1, r2
 800535c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005360:	d100      	bne.n	8005364 <memcpy+0xc>
 8005362:	4770      	bx	lr
 8005364:	b510      	push	{r4, lr}
 8005366:	f811 4b01 	ldrb.w	r4, [r1], #1
 800536a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800536e:	4291      	cmp	r1, r2
 8005370:	d1f9      	bne.n	8005366 <memcpy+0xe>
 8005372:	bd10      	pop	{r4, pc}

08005374 <_realloc_r>:
 8005374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005378:	4680      	mov	r8, r0
 800537a:	4615      	mov	r5, r2
 800537c:	460c      	mov	r4, r1
 800537e:	b921      	cbnz	r1, 800538a <_realloc_r+0x16>
 8005380:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005384:	4611      	mov	r1, r2
 8005386:	f7ff bc4b 	b.w	8004c20 <_malloc_r>
 800538a:	b92a      	cbnz	r2, 8005398 <_realloc_r+0x24>
 800538c:	f7ff fbdc 	bl	8004b48 <_free_r>
 8005390:	2400      	movs	r4, #0
 8005392:	4620      	mov	r0, r4
 8005394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005398:	f000 f81a 	bl	80053d0 <_malloc_usable_size_r>
 800539c:	4285      	cmp	r5, r0
 800539e:	4606      	mov	r6, r0
 80053a0:	d802      	bhi.n	80053a8 <_realloc_r+0x34>
 80053a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80053a6:	d8f4      	bhi.n	8005392 <_realloc_r+0x1e>
 80053a8:	4629      	mov	r1, r5
 80053aa:	4640      	mov	r0, r8
 80053ac:	f7ff fc38 	bl	8004c20 <_malloc_r>
 80053b0:	4607      	mov	r7, r0
 80053b2:	2800      	cmp	r0, #0
 80053b4:	d0ec      	beq.n	8005390 <_realloc_r+0x1c>
 80053b6:	42b5      	cmp	r5, r6
 80053b8:	462a      	mov	r2, r5
 80053ba:	4621      	mov	r1, r4
 80053bc:	bf28      	it	cs
 80053be:	4632      	movcs	r2, r6
 80053c0:	f7ff ffca 	bl	8005358 <memcpy>
 80053c4:	4621      	mov	r1, r4
 80053c6:	4640      	mov	r0, r8
 80053c8:	f7ff fbbe 	bl	8004b48 <_free_r>
 80053cc:	463c      	mov	r4, r7
 80053ce:	e7e0      	b.n	8005392 <_realloc_r+0x1e>

080053d0 <_malloc_usable_size_r>:
 80053d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053d4:	1f18      	subs	r0, r3, #4
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	bfbc      	itt	lt
 80053da:	580b      	ldrlt	r3, [r1, r0]
 80053dc:	18c0      	addlt	r0, r0, r3
 80053de:	4770      	bx	lr

080053e0 <_init>:
 80053e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053e2:	bf00      	nop
 80053e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053e6:	bc08      	pop	{r3}
 80053e8:	469e      	mov	lr, r3
 80053ea:	4770      	bx	lr

080053ec <_fini>:
 80053ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ee:	bf00      	nop
 80053f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053f2:	bc08      	pop	{r3}
 80053f4:	469e      	mov	lr, r3
 80053f6:	4770      	bx	lr
