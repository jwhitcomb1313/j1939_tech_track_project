
STM32L432KC Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050c8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08005258  08005258  00006258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800546c  0800546c  00007078  2**0
                  CONTENTS
  4 .ARM          00000008  0800546c  0800546c  0000646c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005474  08005474  00007078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005474  08005474  00006474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005478  08005478  00006478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800547c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000078  080054f4  00007078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  080054f4  000072f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e37e  00000000  00000000  000070a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002472  00000000  00000000  00015426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  00017898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000949  00000000  00000000  000184c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000210ae  00000000  00000000  00018e09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f5ae  00000000  00000000  00039eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c22d1  00000000  00000000  00049465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010b736  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035b0  00000000  00000000  0010b77c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  0010ed2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005240 	.word	0x08005240

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08005240 	.word	0x08005240

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <canspi_TransmitMessage>:

    @{
*/
/******************************************************************************/
uint8_t canspi_TransmitMessage(can_msg_t *can_message)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08c      	sub	sp, #48	@ 0x30
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
    char tempbuf[25]; 


    uint8_t retVal = 0; 
 8000568:	2300      	movs	r3, #0
 800056a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    id_reg_t regId;

    regId.SIDH = 0; 
 800056e:	2300      	movs	r3, #0
 8000570:	743b      	strb	r3, [r7, #16]
    regId.SIDL = 0; 
 8000572:	2300      	movs	r3, #0
 8000574:	747b      	strb	r3, [r7, #17]
    regId.EID8 = 0; 
 8000576:	2300      	movs	r3, #0
 8000578:	74bb      	strb	r3, [r7, #18]
    regId.EID0 = 0; 
 800057a:	2300      	movs	r3, #0
 800057c:	74fb      	strb	r3, [r7, #19]

    ctrl_status_t control_status = MCP2515_GetControlStatus (); 
 800057e:	f000 fee1 	bl	8001344 <MCP2515_GetControlStatus>
 8000582:	4603      	mov	r3, r0
 8000584:	60fb      	str	r3, [r7, #12]
    sprintf(tempbuf, "control status = %x\r\n\n", control_status.ctrl_status); 
 8000586:	7b3b      	ldrb	r3, [r7, #12]
 8000588:	461a      	mov	r2, r3
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	4927      	ldr	r1, [pc, #156]	@ (800062c <canspi_TransmitMessage+0xcc>)
 8000590:	4618      	mov	r0, r3
 8000592:	f004 f9b5 	bl	8004900 <siprintf>
    uart_serial_print(tempbuf, sizeof(tempbuf));
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	2119      	movs	r1, #25
 800059c:	4618      	mov	r0, r3
 800059e:	f001 f885 	bl	80016ac <uart_serial_print>

    canspi_ConvertIDToReg(can_message->frame.canId, &regId); 
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f107 0210 	add.w	r2, r7, #16
 80005aa:	4611      	mov	r1, r2
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 f91b 	bl	80007e8 <canspi_ConvertIDToReg>

    if(control_status.TXB0REQ != 1)
 80005b2:	7b3b      	ldrb	r3, [r7, #12]
 80005b4:	f003 0304 	and.w	r3, r3, #4
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d10b      	bne.n	80005d6 <canspi_TransmitMessage+0x76>
    {
        //Load data into the buffer
        MCP2515_WriteTxBuffer(MCP2515_LOAD_TXB0SIDH, &regId, &(can_message->frame.data0), can_message->frame.dlc);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	1d5a      	adds	r2, r3, #5
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	791b      	ldrb	r3, [r3, #4]
 80005c6:	f107 0110 	add.w	r1, r7, #16
 80005ca:	2040      	movs	r0, #64	@ 0x40
 80005cc:	f000 fe30 	bl	8001230 <MCP2515_WriteTxBuffer>
        retVal = 1;  
 80005d0:	2301      	movs	r3, #1
 80005d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    if(control_status.TXB1REQ != 1)
 80005d6:	7b3b      	ldrb	r3, [r7, #12]
 80005d8:	f003 0310 	and.w	r3, r3, #16
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d10b      	bne.n	80005fa <canspi_TransmitMessage+0x9a>
    {
        //Load data into the buffer
        MCP2515_WriteTxBuffer(MCP2515_LOAD_TXB1SIDH, &regId, &(can_message->frame.data0), can_message->frame.dlc);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	1d5a      	adds	r2, r3, #5
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	791b      	ldrb	r3, [r3, #4]
 80005ea:	f107 0110 	add.w	r1, r7, #16
 80005ee:	2042      	movs	r0, #66	@ 0x42
 80005f0:	f000 fe1e 	bl	8001230 <MCP2515_WriteTxBuffer>
        retVal = 1; 
 80005f4:	2301      	movs	r3, #1
 80005f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    if(control_status.TXB2REQ != 1)
 80005fa:	7b3b      	ldrb	r3, [r7, #12]
 80005fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000600:	b2db      	uxtb	r3, r3
 8000602:	2b00      	cmp	r3, #0
 8000604:	d10b      	bne.n	800061e <canspi_TransmitMessage+0xbe>
    {
        //Load data into the buffer
        MCP2515_WriteTxBuffer(MCP2515_LOAD_TXB2SIDH, &regId, &(can_message->frame.data0), can_message->frame.dlc);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	1d5a      	adds	r2, r3, #5
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	791b      	ldrb	r3, [r3, #4]
 800060e:	f107 0110 	add.w	r1, r7, #16
 8000612:	2044      	movs	r0, #68	@ 0x44
 8000614:	f000 fe0c 	bl	8001230 <MCP2515_WriteTxBuffer>
        retVal = 1; 
 8000618:	2301      	movs	r3, #1
 800061a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
    return retVal;
 800061e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}    
 8000622:	4618      	mov	r0, r3
 8000624:	3730      	adds	r7, #48	@ 0x30
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	08005258 	.word	0x08005258

08000630 <canspi_ReceiveMessage>:

    @{
*/
/******************************************************************************/
uint8_t canspi_ReceiveMessage(can_msg_t *canMsg)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08e      	sub	sp, #56	@ 0x38
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
    //todo remove
    char testBuf[15];


    uint8_t retVal = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    rx_reg_t rxReg;
    rx_status_t rxStatus;
    id_reg_t idReg;
    uint32_t idExt;  

    rxStatus = MCP2515_GetRxStatus();
 800063e:	f000 fe65 	bl	800130c <MCP2515_GetRxStatus>
 8000642:	4603      	mov	r3, r0
 8000644:	617b      	str	r3, [r7, #20]
    /* Check receive buffer */
    if (rxStatus.rxBuffer != 0)
 8000646:	7d3b      	ldrb	r3, [r7, #20]
 8000648:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800064c:	b2db      	uxtb	r3, r3
 800064e:	2b00      	cmp	r3, #0
 8000650:	d078      	beq.n	8000744 <canspi_ReceiveMessage+0x114>
    {
        sprintf(testBuf, "rx flag\r\n"); 
 8000652:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000656:	493e      	ldr	r1, [pc, #248]	@ (8000750 <canspi_ReceiveMessage+0x120>)
 8000658:	4618      	mov	r0, r3
 800065a:	f004 f951 	bl	8004900 <siprintf>
        uart_serial_print(testBuf, sizeof(testBuf)); 
 800065e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000662:	210f      	movs	r1, #15
 8000664:	4618      	mov	r0, r3
 8000666:	f001 f821 	bl	80016ac <uart_serial_print>
        memset(testBuf, '\0', sizeof(testBuf));
 800066a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800066e:	220f      	movs	r2, #15
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f004 f964 	bl	8004940 <memset>
        /* finding buffer which has a message */
        if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 8000678:	7d3b      	ldrb	r3, [r7, #20]
 800067a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800067e:	b2db      	uxtb	r3, r3
 8000680:	2b40      	cmp	r3, #64	@ 0x40
 8000682:	bf0c      	ite	eq
 8000684:	2301      	moveq	r3, #1
 8000686:	2300      	movne	r3, #0
 8000688:	b2da      	uxtb	r2, r3
 800068a:	7d3b      	ldrb	r3, [r7, #20]
 800068c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000690:	b2db      	uxtb	r3, r3
 8000692:	2bc0      	cmp	r3, #192	@ 0xc0
 8000694:	bf0c      	ite	eq
 8000696:	2301      	moveq	r3, #1
 8000698:	2300      	movne	r3, #0
 800069a:	b2db      	uxtb	r3, r3
 800069c:	4313      	orrs	r3, r2
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d007      	beq.n	80006b4 <canspi_ReceiveMessage+0x84>
        {
            MCP2515_ReadRxBuffer(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80006a4:	f107 0318 	add.w	r3, r7, #24
 80006a8:	220d      	movs	r2, #13
 80006aa:	4619      	mov	r1, r3
 80006ac:	2090      	movs	r0, #144	@ 0x90
 80006ae:	f000 fe0b 	bl	80012c8 <MCP2515_ReadRxBuffer>
 80006b2:	e00c      	b.n	80006ce <canspi_ReceiveMessage+0x9e>
        }
        else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 80006b4:	7d3b      	ldrb	r3, [r7, #20]
 80006b6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	2b80      	cmp	r3, #128	@ 0x80
 80006be:	d106      	bne.n	80006ce <canspi_ReceiveMessage+0x9e>
        {
            MCP2515_ReadRxBuffer(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80006c0:	f107 0318 	add.w	r3, r7, #24
 80006c4:	220d      	movs	r2, #13
 80006c6:	4619      	mov	r1, r3
 80006c8:	2094      	movs	r0, #148	@ 0x94
 80006ca:	f000 fdfd 	bl	80012c8 <MCP2515_ReadRxBuffer>
        }

        //todo: remove
        MCP2515_ReadRxBuffer(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80006ce:	f107 0318 	add.w	r3, r7, #24
 80006d2:	220d      	movs	r2, #13
 80006d4:	4619      	mov	r1, r3
 80006d6:	2090      	movs	r0, #144	@ 0x90
 80006d8:	f000 fdf6 	bl	80012c8 <MCP2515_ReadRxBuffer>

        idReg.SIDH = rxReg.RXBnSIDH; 
 80006dc:	7e3b      	ldrb	r3, [r7, #24]
 80006de:	743b      	strb	r3, [r7, #16]
        idReg.SIDL = rxReg.RXBnSIDL; 
 80006e0:	7e7b      	ldrb	r3, [r7, #25]
 80006e2:	747b      	strb	r3, [r7, #17]
        idReg.EID8 = rxReg.RXBnEID8; 
 80006e4:	7ebb      	ldrb	r3, [r7, #26]
 80006e6:	74bb      	strb	r3, [r7, #18]
        idReg.EID0 = rxReg.RXBnEID0; 
 80006e8:	7efb      	ldrb	r3, [r7, #27]
 80006ea:	74fb      	strb	r3, [r7, #19]

        canspi_ConvertRegToID(idReg, &idExt); 
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	4619      	mov	r1, r3
 80006f2:	6938      	ldr	r0, [r7, #16]
 80006f4:	f000 f82e 	bl	8000754 <canspi_ConvertRegToID>

        canMsg->frame.canId     = idExt;
 80006f8:	68fa      	ldr	r2, [r7, #12]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	601a      	str	r2, [r3, #0]
        canMsg->frame.dlc       = rxReg.RXBnDLC;
 80006fe:	7f3a      	ldrb	r2, [r7, #28]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	711a      	strb	r2, [r3, #4]
        canMsg->frame.data0     = rxReg.RXBnD0;
 8000704:	7f7a      	ldrb	r2, [r7, #29]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	715a      	strb	r2, [r3, #5]
        canMsg->frame.data1     = rxReg.RXBnD1;
 800070a:	7fba      	ldrb	r2, [r7, #30]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	719a      	strb	r2, [r3, #6]
        canMsg->frame.data2     = rxReg.RXBnD2;
 8000710:	7ffa      	ldrb	r2, [r7, #31]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	71da      	strb	r2, [r3, #7]
        canMsg->frame.data3     = rxReg.RXBnD3;
 8000716:	f897 2020 	ldrb.w	r2, [r7, #32]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	721a      	strb	r2, [r3, #8]
        canMsg->frame.data4     = rxReg.RXBnD4;
 800071e:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	725a      	strb	r2, [r3, #9]
        canMsg->frame.data5     = rxReg.RXBnD5;
 8000726:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	729a      	strb	r2, [r3, #10]
        canMsg->frame.data6     = rxReg.RXBnD6;
 800072e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	72da      	strb	r2, [r3, #11]
        canMsg->frame.data7     = rxReg.RXBnD7;
 8000736:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	731a      	strb	r2, [r3, #12]

        retVal = 1;
 800073e:	2301      	movs	r3, #1
 8000740:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }
    return retVal; 
 8000744:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8000748:	4618      	mov	r0, r3
 800074a:	3738      	adds	r7, #56	@ 0x38
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	08005270 	.word	0x08005270

08000754 <canspi_ConvertRegToID>:

    @{
*/
/******************************************************************************/
void canspi_ConvertRegToID(id_reg_t regId, uint32_t *canId)
{   
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
    // Temp variable type for unpacking the registers
    can_ext_id_t extId;  
    // Ext ID 28:24
    extId.frame.priority = ((regId.SIDH & ID_MASK_PRIORITY) >> 5); 
 800075e:	793b      	ldrb	r3, [r7, #4]
 8000760:	095b      	lsrs	r3, r3, #5
 8000762:	b2db      	uxtb	r3, r3
 8000764:	f003 0307 	and.w	r3, r3, #7
 8000768:	b2da      	uxtb	r2, r3
 800076a:	7b3b      	ldrb	r3, [r7, #12]
 800076c:	f362 0302 	bfi	r3, r2, #0, #3
 8000770:	733b      	strb	r3, [r7, #12]
    extId.frame.edp = (regId.SIDH & ID_MASK_EDP >> 4);
 8000772:	793b      	ldrb	r3, [r7, #4]
 8000774:	f003 0301 	and.w	r3, r3, #1
 8000778:	b2da      	uxtb	r2, r3
 800077a:	7b3b      	ldrb	r3, [r7, #12]
 800077c:	f362 03c3 	bfi	r3, r2, #3, #1
 8000780:	733b      	strb	r3, [r7, #12]
    extId.frame.dp = ((regId.SIDH & ID_MASK_DP) >> 3);  
 8000782:	793b      	ldrb	r3, [r7, #4]
 8000784:	10db      	asrs	r3, r3, #3
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	b2da      	uxtb	r2, r3
 800078c:	7b3b      	ldrb	r3, [r7, #12]
 800078e:	f362 1304 	bfi	r3, r2, #4, #1
 8000792:	733b      	strb	r3, [r7, #12]

    // Ext ID 23:16
    extId.frame.pf = ((((regId.SIDH & ID_MASK_PF_MSB) << 5)    |
 8000794:	793b      	ldrb	r3, [r7, #4]
 8000796:	015b      	lsls	r3, r3, #5
 8000798:	b25a      	sxtb	r2, r3
                        (regId.SIDL & ID_MASK_PF_LSBUB) >> 3)   |
 800079a:	797b      	ldrb	r3, [r7, #5]
 800079c:	10db      	asrs	r3, r3, #3
 800079e:	b25b      	sxtb	r3, r3
 80007a0:	f003 031c 	and.w	r3, r3, #28
 80007a4:	b25b      	sxtb	r3, r3
    extId.frame.pf = ((((regId.SIDH & ID_MASK_PF_MSB) << 5)    |
 80007a6:	4313      	orrs	r3, r2
 80007a8:	b25a      	sxtb	r2, r3
                        (regId.SIDL & ID_MASK_PF_LSBLB));
 80007aa:	797b      	ldrb	r3, [r7, #5]
 80007ac:	b25b      	sxtb	r3, r3
 80007ae:	f003 0303 	and.w	r3, r3, #3
 80007b2:	b25b      	sxtb	r3, r3
                        (regId.SIDL & ID_MASK_PF_LSBUB) >> 3)   |
 80007b4:	4313      	orrs	r3, r2
 80007b6:	b25b      	sxtb	r3, r3
 80007b8:	b2da      	uxtb	r2, r3
    extId.frame.pf = ((((regId.SIDH & ID_MASK_PF_MSB) << 5)    |
 80007ba:	89bb      	ldrh	r3, [r7, #12]
 80007bc:	f362 134c 	bfi	r3, r2, #5, #8
 80007c0:	81bb      	strh	r3, [r7, #12]
    // Ext ID 15:8
    extId.frame.ps = regId.EID8; 
 80007c2:	79ba      	ldrb	r2, [r7, #6]
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	f362 3354 	bfi	r3, r2, #13, #8
 80007ca:	60fb      	str	r3, [r7, #12]
    // Ext ID 7:0
    extId.frame.source_address = regId.EID0; 
 80007cc:	79fa      	ldrb	r2, [r7, #7]
 80007ce:	89fb      	ldrh	r3, [r7, #14]
 80007d0:	f362 134c 	bfi	r3, r2, #5, #8
 80007d4:	81fb      	strh	r3, [r7, #14]

    *canId = extId.id; 
 80007d6:	68fa      	ldr	r2, [r7, #12]
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	601a      	str	r2, [r3, #0]
}
 80007dc:	bf00      	nop
 80007de:	3714      	adds	r7, #20
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <canspi_ConvertIDToReg>:

    @{
*/
/******************************************************************************/
void canspi_ConvertIDToReg(uint32_t canId, id_reg_t *regId)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
    can_ext_id_t extId; 
    extId.id = canId; 
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	60fb      	str	r3, [r7, #12]
    // SIDH 7:5
    regId->SIDH = (extId.frame.priority << 5); 
 80007f6:	7b3b      	ldrb	r3, [r7, #12]
 80007f8:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	015b      	lsls	r3, r3, #5
 8000800:	b2da      	uxtb	r2, r3
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	701a      	strb	r2, [r3, #0]
    // SIDH 4:4 
    regId->SIDH |= (extId.frame.edp << 4);
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	b25a      	sxtb	r2, r3
 800080c:	7b3b      	ldrb	r3, [r7, #12]
 800080e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000812:	b2db      	uxtb	r3, r3
 8000814:	011b      	lsls	r3, r3, #4
 8000816:	b25b      	sxtb	r3, r3
 8000818:	4313      	orrs	r3, r2
 800081a:	b25b      	sxtb	r3, r3
 800081c:	b2da      	uxtb	r2, r3
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	701a      	strb	r2, [r3, #0]
    // SIDH 3:3
    regId->SIDH |= (extId.frame.dp << 3);
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	b25a      	sxtb	r2, r3
 8000828:	7b3b      	ldrb	r3, [r7, #12]
 800082a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800082e:	b2db      	uxtb	r3, r3
 8000830:	00db      	lsls	r3, r3, #3
 8000832:	b25b      	sxtb	r3, r3
 8000834:	4313      	orrs	r3, r2
 8000836:	b25b      	sxtb	r3, r3
 8000838:	b2da      	uxtb	r2, r3
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	701a      	strb	r2, [r3, #0]
    // SIDH 2:0 
    regId->SIDH |= ((extId.frame.pf & REG_MASK_PF_MSB) >> 5);
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	781a      	ldrb	r2, [r3, #0]
 8000842:	89bb      	ldrh	r3, [r7, #12]
 8000844:	f3c3 1347 	ubfx	r3, r3, #5, #8
 8000848:	b2db      	uxtb	r3, r3
 800084a:	095b      	lsrs	r3, r3, #5
 800084c:	b2db      	uxtb	r3, r3
 800084e:	4313      	orrs	r3, r2
 8000850:	b2da      	uxtb	r2, r3
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	701a      	strb	r2, [r3, #0]

    // SIDL 7:5 
    regId->SIDL |= ((extId.frame.pf & REG_MASK_PF_LSBUB) << 3); 
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	785b      	ldrb	r3, [r3, #1]
 800085a:	b25a      	sxtb	r2, r3
 800085c:	89bb      	ldrh	r3, [r7, #12]
 800085e:	f3c3 1347 	ubfx	r3, r3, #5, #8
 8000862:	b2db      	uxtb	r3, r3
 8000864:	00db      	lsls	r3, r3, #3
 8000866:	b25b      	sxtb	r3, r3
 8000868:	f023 031f 	bic.w	r3, r3, #31
 800086c:	b25b      	sxtb	r3, r3
 800086e:	4313      	orrs	r3, r2
 8000870:	b25b      	sxtb	r3, r3
 8000872:	b2da      	uxtb	r2, r3
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	705a      	strb	r2, [r3, #1]
    // SIDL 3:3 Set the Ext ID bit high
    regId->SIDL |= REG_MASK_IDE; 
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	785b      	ldrb	r3, [r3, #1]
 800087c:	f043 0308 	orr.w	r3, r3, #8
 8000880:	b2da      	uxtb	r2, r3
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	705a      	strb	r2, [r3, #1]
    // SIDL 2:0 
    regId->SIDL |= ((extId.frame.pf & REG_MASK_PF_LSBLB));
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	785b      	ldrb	r3, [r3, #1]
 800088a:	b25a      	sxtb	r2, r3
 800088c:	89bb      	ldrh	r3, [r7, #12]
 800088e:	f3c3 1347 	ubfx	r3, r3, #5, #8
 8000892:	b2db      	uxtb	r3, r3
 8000894:	b25b      	sxtb	r3, r3
 8000896:	f003 0303 	and.w	r3, r3, #3
 800089a:	b25b      	sxtb	r3, r3
 800089c:	4313      	orrs	r3, r2
 800089e:	b25b      	sxtb	r3, r3
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	705a      	strb	r2, [r3, #1]
    
    // EID8 7:0
    regId->EID8 = extId.frame.ps; 
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	f3c3 3347 	ubfx	r3, r3, #13, #8
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	709a      	strb	r2, [r3, #2]

    // EID0 7:0
    regId->EID0 = extId.frame.source_address;
 80008b2:	89fb      	ldrh	r3, [r7, #14]
 80008b4:	f3c3 1347 	ubfx	r3, r3, #5, #8
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	70da      	strb	r2, [r3, #3]
}
 80008be:	bf00      	nop
 80008c0:	3714      	adds	r7, #20
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
	...

080008cc <canspi_CanLoopTest>:

void canspi_CanLoopTest(can_msg_t canMsg)
{
 80008cc:	b590      	push	{r4, r7, lr}
 80008ce:	b08f      	sub	sp, #60	@ 0x3c
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	463c      	mov	r4, r7
 80008d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    char printStr[30]; 
    can_ext_id_t tempId;
    tempId.id = canMsg.frame.canId; 
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	617b      	str	r3, [r7, #20]


    sprintf(printStr, "**** CAN ID ****\r\n"); 
 80008dc:	f107 0318 	add.w	r3, r7, #24
 80008e0:	49ba      	ldr	r1, [pc, #744]	@ (8000bcc <canspi_CanLoopTest+0x300>)
 80008e2:	4618      	mov	r0, r3
 80008e4:	f004 f80c 	bl	8004900 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 80008e8:	f107 0318 	add.w	r3, r7, #24
 80008ec:	211e      	movs	r1, #30
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 fedc 	bl	80016ac <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 80008f4:	f107 0318 	add.w	r3, r7, #24
 80008f8:	221e      	movs	r2, #30
 80008fa:	2100      	movs	r1, #0
 80008fc:	4618      	mov	r0, r3
 80008fe:	f004 f81f 	bl	8004940 <memset>

    sprintf(printStr, "priority = %x\r\n", tempId.frame.priority); 
 8000902:	7d3b      	ldrb	r3, [r7, #20]
 8000904:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000908:	b2db      	uxtb	r3, r3
 800090a:	461a      	mov	r2, r3
 800090c:	f107 0318 	add.w	r3, r7, #24
 8000910:	49af      	ldr	r1, [pc, #700]	@ (8000bd0 <canspi_CanLoopTest+0x304>)
 8000912:	4618      	mov	r0, r3
 8000914:	f003 fff4 	bl	8004900 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 8000918:	f107 0318 	add.w	r3, r7, #24
 800091c:	211e      	movs	r1, #30
 800091e:	4618      	mov	r0, r3
 8000920:	f000 fec4 	bl	80016ac <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr)); 
 8000924:	f107 0318 	add.w	r3, r7, #24
 8000928:	221e      	movs	r2, #30
 800092a:	2100      	movs	r1, #0
 800092c:	4618      	mov	r0, r3
 800092e:	f004 f807 	bl	8004940 <memset>

    sprintf(printStr, "dp = %x\r\n", tempId.frame.dp); 
 8000932:	7d3b      	ldrb	r3, [r7, #20]
 8000934:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000938:	b2db      	uxtb	r3, r3
 800093a:	461a      	mov	r2, r3
 800093c:	f107 0318 	add.w	r3, r7, #24
 8000940:	49a4      	ldr	r1, [pc, #656]	@ (8000bd4 <canspi_CanLoopTest+0x308>)
 8000942:	4618      	mov	r0, r3
 8000944:	f003 ffdc 	bl	8004900 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 8000948:	f107 0318 	add.w	r3, r7, #24
 800094c:	211e      	movs	r1, #30
 800094e:	4618      	mov	r0, r3
 8000950:	f000 feac 	bl	80016ac <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 8000954:	f107 0318 	add.w	r3, r7, #24
 8000958:	221e      	movs	r2, #30
 800095a:	2100      	movs	r1, #0
 800095c:	4618      	mov	r0, r3
 800095e:	f003 ffef 	bl	8004940 <memset>

    sprintf(printStr, "edp = %x\r\n", tempId.frame.edp); 
 8000962:	7d3b      	ldrb	r3, [r7, #20]
 8000964:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000968:	b2db      	uxtb	r3, r3
 800096a:	461a      	mov	r2, r3
 800096c:	f107 0318 	add.w	r3, r7, #24
 8000970:	4999      	ldr	r1, [pc, #612]	@ (8000bd8 <canspi_CanLoopTest+0x30c>)
 8000972:	4618      	mov	r0, r3
 8000974:	f003 ffc4 	bl	8004900 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 8000978:	f107 0318 	add.w	r3, r7, #24
 800097c:	211e      	movs	r1, #30
 800097e:	4618      	mov	r0, r3
 8000980:	f000 fe94 	bl	80016ac <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 8000984:	f107 0318 	add.w	r3, r7, #24
 8000988:	221e      	movs	r2, #30
 800098a:	2100      	movs	r1, #0
 800098c:	4618      	mov	r0, r3
 800098e:	f003 ffd7 	bl	8004940 <memset>

    sprintf(printStr, "pf = %x\r\n", tempId.frame.pf); 
 8000992:	8abb      	ldrh	r3, [r7, #20]
 8000994:	f3c3 1347 	ubfx	r3, r3, #5, #8
 8000998:	b2db      	uxtb	r3, r3
 800099a:	461a      	mov	r2, r3
 800099c:	f107 0318 	add.w	r3, r7, #24
 80009a0:	498e      	ldr	r1, [pc, #568]	@ (8000bdc <canspi_CanLoopTest+0x310>)
 80009a2:	4618      	mov	r0, r3
 80009a4:	f003 ffac 	bl	8004900 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 80009a8:	f107 0318 	add.w	r3, r7, #24
 80009ac:	211e      	movs	r1, #30
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 fe7c 	bl	80016ac <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 80009b4:	f107 0318 	add.w	r3, r7, #24
 80009b8:	221e      	movs	r2, #30
 80009ba:	2100      	movs	r1, #0
 80009bc:	4618      	mov	r0, r3
 80009be:	f003 ffbf 	bl	8004940 <memset>

    sprintf(printStr, "ps = %x\r\n", tempId.frame.ps); 
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	f3c3 3347 	ubfx	r3, r3, #13, #8
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	461a      	mov	r2, r3
 80009cc:	f107 0318 	add.w	r3, r7, #24
 80009d0:	4983      	ldr	r1, [pc, #524]	@ (8000be0 <canspi_CanLoopTest+0x314>)
 80009d2:	4618      	mov	r0, r3
 80009d4:	f003 ff94 	bl	8004900 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 80009d8:	f107 0318 	add.w	r3, r7, #24
 80009dc:	211e      	movs	r1, #30
 80009de:	4618      	mov	r0, r3
 80009e0:	f000 fe64 	bl	80016ac <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 80009e4:	f107 0318 	add.w	r3, r7, #24
 80009e8:	221e      	movs	r2, #30
 80009ea:	2100      	movs	r1, #0
 80009ec:	4618      	mov	r0, r3
 80009ee:	f003 ffa7 	bl	8004940 <memset>

    sprintf(printStr, "source address = %x\r\n\n", tempId.frame.source_address); 
 80009f2:	8afb      	ldrh	r3, [r7, #22]
 80009f4:	f3c3 1347 	ubfx	r3, r3, #5, #8
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	461a      	mov	r2, r3
 80009fc:	f107 0318 	add.w	r3, r7, #24
 8000a00:	4978      	ldr	r1, [pc, #480]	@ (8000be4 <canspi_CanLoopTest+0x318>)
 8000a02:	4618      	mov	r0, r3
 8000a04:	f003 ff7c 	bl	8004900 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 8000a08:	f107 0318 	add.w	r3, r7, #24
 8000a0c:	211e      	movs	r1, #30
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 fe4c 	bl	80016ac <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 8000a14:	f107 0318 	add.w	r3, r7, #24
 8000a18:	221e      	movs	r2, #30
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f003 ff8f 	bl	8004940 <memset>

    sprintf(printStr, "**** DATA ****\r\n"); 
 8000a22:	f107 0318 	add.w	r3, r7, #24
 8000a26:	4970      	ldr	r1, [pc, #448]	@ (8000be8 <canspi_CanLoopTest+0x31c>)
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f003 ff69 	bl	8004900 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 8000a2e:	f107 0318 	add.w	r3, r7, #24
 8000a32:	211e      	movs	r1, #30
 8000a34:	4618      	mov	r0, r3
 8000a36:	f000 fe39 	bl	80016ac <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr)); 
 8000a3a:	f107 0318 	add.w	r3, r7, #24
 8000a3e:	221e      	movs	r2, #30
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f003 ff7c 	bl	8004940 <memset>

    sprintf(printStr, "dlc = %x\r\n", canMsg.frame.dlc); 
 8000a48:	793b      	ldrb	r3, [r7, #4]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	f107 0318 	add.w	r3, r7, #24
 8000a50:	4966      	ldr	r1, [pc, #408]	@ (8000bec <canspi_CanLoopTest+0x320>)
 8000a52:	4618      	mov	r0, r3
 8000a54:	f003 ff54 	bl	8004900 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 8000a58:	f107 0318 	add.w	r3, r7, #24
 8000a5c:	211e      	movs	r1, #30
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 fe24 	bl	80016ac <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 8000a64:	f107 0318 	add.w	r3, r7, #24
 8000a68:	221e      	movs	r2, #30
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f003 ff67 	bl	8004940 <memset>

    sprintf(printStr, "data0 = %x\r\n", canMsg.frame.data0); 
 8000a72:	797b      	ldrb	r3, [r7, #5]
 8000a74:	461a      	mov	r2, r3
 8000a76:	f107 0318 	add.w	r3, r7, #24
 8000a7a:	495d      	ldr	r1, [pc, #372]	@ (8000bf0 <canspi_CanLoopTest+0x324>)
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f003 ff3f 	bl	8004900 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 8000a82:	f107 0318 	add.w	r3, r7, #24
 8000a86:	211e      	movs	r1, #30
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 fe0f 	bl	80016ac <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 8000a8e:	f107 0318 	add.w	r3, r7, #24
 8000a92:	221e      	movs	r2, #30
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f003 ff52 	bl	8004940 <memset>

    sprintf(printStr, "data1 = %x\r\n", canMsg.frame.data1); 
 8000a9c:	79bb      	ldrb	r3, [r7, #6]
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	f107 0318 	add.w	r3, r7, #24
 8000aa4:	4953      	ldr	r1, [pc, #332]	@ (8000bf4 <canspi_CanLoopTest+0x328>)
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f003 ff2a 	bl	8004900 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 8000aac:	f107 0318 	add.w	r3, r7, #24
 8000ab0:	211e      	movs	r1, #30
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 fdfa 	bl	80016ac <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 8000ab8:	f107 0318 	add.w	r3, r7, #24
 8000abc:	221e      	movs	r2, #30
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f003 ff3d 	bl	8004940 <memset>

    sprintf(printStr, "data2 = %x\r\n", canMsg.frame.data2); 
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	f107 0318 	add.w	r3, r7, #24
 8000ace:	494a      	ldr	r1, [pc, #296]	@ (8000bf8 <canspi_CanLoopTest+0x32c>)
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f003 ff15 	bl	8004900 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 8000ad6:	f107 0318 	add.w	r3, r7, #24
 8000ada:	211e      	movs	r1, #30
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 fde5 	bl	80016ac <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 8000ae2:	f107 0318 	add.w	r3, r7, #24
 8000ae6:	221e      	movs	r2, #30
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f003 ff28 	bl	8004940 <memset>

    sprintf(printStr, "data3 = %x\r\n", canMsg.frame.data3); 
 8000af0:	7a3b      	ldrb	r3, [r7, #8]
 8000af2:	461a      	mov	r2, r3
 8000af4:	f107 0318 	add.w	r3, r7, #24
 8000af8:	4940      	ldr	r1, [pc, #256]	@ (8000bfc <canspi_CanLoopTest+0x330>)
 8000afa:	4618      	mov	r0, r3
 8000afc:	f003 ff00 	bl	8004900 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 8000b00:	f107 0318 	add.w	r3, r7, #24
 8000b04:	211e      	movs	r1, #30
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 fdd0 	bl	80016ac <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 8000b0c:	f107 0318 	add.w	r3, r7, #24
 8000b10:	221e      	movs	r2, #30
 8000b12:	2100      	movs	r1, #0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f003 ff13 	bl	8004940 <memset>

    sprintf(printStr, "data4 = %x\r\n", canMsg.frame.data4); 
 8000b1a:	7a7b      	ldrb	r3, [r7, #9]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	f107 0318 	add.w	r3, r7, #24
 8000b22:	4937      	ldr	r1, [pc, #220]	@ (8000c00 <canspi_CanLoopTest+0x334>)
 8000b24:	4618      	mov	r0, r3
 8000b26:	f003 feeb 	bl	8004900 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 8000b2a:	f107 0318 	add.w	r3, r7, #24
 8000b2e:	211e      	movs	r1, #30
 8000b30:	4618      	mov	r0, r3
 8000b32:	f000 fdbb 	bl	80016ac <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 8000b36:	f107 0318 	add.w	r3, r7, #24
 8000b3a:	221e      	movs	r2, #30
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f003 fefe 	bl	8004940 <memset>

    sprintf(printStr, "data5 = %x\r\n", canMsg.frame.data5); 
 8000b44:	7abb      	ldrb	r3, [r7, #10]
 8000b46:	461a      	mov	r2, r3
 8000b48:	f107 0318 	add.w	r3, r7, #24
 8000b4c:	492d      	ldr	r1, [pc, #180]	@ (8000c04 <canspi_CanLoopTest+0x338>)
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f003 fed6 	bl	8004900 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 8000b54:	f107 0318 	add.w	r3, r7, #24
 8000b58:	211e      	movs	r1, #30
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 fda6 	bl	80016ac <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 8000b60:	f107 0318 	add.w	r3, r7, #24
 8000b64:	221e      	movs	r2, #30
 8000b66:	2100      	movs	r1, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f003 fee9 	bl	8004940 <memset>

    sprintf(printStr, "data6 = %x\r\n", canMsg.frame.data6); 
 8000b6e:	7afb      	ldrb	r3, [r7, #11]
 8000b70:	461a      	mov	r2, r3
 8000b72:	f107 0318 	add.w	r3, r7, #24
 8000b76:	4924      	ldr	r1, [pc, #144]	@ (8000c08 <canspi_CanLoopTest+0x33c>)
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f003 fec1 	bl	8004900 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 8000b7e:	f107 0318 	add.w	r3, r7, #24
 8000b82:	211e      	movs	r1, #30
 8000b84:	4618      	mov	r0, r3
 8000b86:	f000 fd91 	bl	80016ac <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 8000b8a:	f107 0318 	add.w	r3, r7, #24
 8000b8e:	221e      	movs	r2, #30
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f003 fed4 	bl	8004940 <memset>

    sprintf(printStr, "data7 = %x\r\n\n", canMsg.frame.data7); 
 8000b98:	7b3b      	ldrb	r3, [r7, #12]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	f107 0318 	add.w	r3, r7, #24
 8000ba0:	491a      	ldr	r1, [pc, #104]	@ (8000c0c <canspi_CanLoopTest+0x340>)
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f003 feac 	bl	8004900 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 8000ba8:	f107 0318 	add.w	r3, r7, #24
 8000bac:	211e      	movs	r1, #30
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 fd7c 	bl	80016ac <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 8000bb4:	f107 0318 	add.w	r3, r7, #24
 8000bb8:	221e      	movs	r2, #30
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f003 febf 	bl	8004940 <memset>
}
 8000bc2:	bf00      	nop
 8000bc4:	373c      	adds	r7, #60	@ 0x3c
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd90      	pop	{r4, r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	0800527c 	.word	0x0800527c
 8000bd0:	08005290 	.word	0x08005290
 8000bd4:	080052a0 	.word	0x080052a0
 8000bd8:	080052ac 	.word	0x080052ac
 8000bdc:	080052b8 	.word	0x080052b8
 8000be0:	080052c4 	.word	0x080052c4
 8000be4:	080052d0 	.word	0x080052d0
 8000be8:	080052e8 	.word	0x080052e8
 8000bec:	080052fc 	.word	0x080052fc
 8000bf0:	08005308 	.word	0x08005308
 8000bf4:	08005318 	.word	0x08005318
 8000bf8:	08005328 	.word	0x08005328
 8000bfc:	08005338 	.word	0x08005338
 8000c00:	08005348 	.word	0x08005348
 8000c04:	08005358 	.word	0x08005358
 8000c08:	08005368 	.word	0x08005368
 8000c0c:	08005378 	.word	0x08005378

08000c10 <canspi_idCheck>:

void canspi_idCheck(uint32_t canId)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08c      	sub	sp, #48	@ 0x30
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
    char printStr[30]; 
    can_ext_id_t tempId;
    tempId.id = canId; 
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	60fb      	str	r3, [r7, #12]


    sprintf(printStr, "**** CAN ID ****\r\n"); 
 8000c1c:	f107 0310 	add.w	r3, r7, #16
 8000c20:	4952      	ldr	r1, [pc, #328]	@ (8000d6c <canspi_idCheck+0x15c>)
 8000c22:	4618      	mov	r0, r3
 8000c24:	f003 fe6c 	bl	8004900 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 8000c28:	f107 0310 	add.w	r3, r7, #16
 8000c2c:	211e      	movs	r1, #30
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 fd3c 	bl	80016ac <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 8000c34:	f107 0310 	add.w	r3, r7, #16
 8000c38:	221e      	movs	r2, #30
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f003 fe7f 	bl	8004940 <memset>

    sprintf(printStr, "priority = %x\r\n", tempId.frame.priority); 
 8000c42:	7b3b      	ldrb	r3, [r7, #12]
 8000c44:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	f107 0310 	add.w	r3, r7, #16
 8000c50:	4947      	ldr	r1, [pc, #284]	@ (8000d70 <canspi_idCheck+0x160>)
 8000c52:	4618      	mov	r0, r3
 8000c54:	f003 fe54 	bl	8004900 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 8000c58:	f107 0310 	add.w	r3, r7, #16
 8000c5c:	211e      	movs	r1, #30
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 fd24 	bl	80016ac <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr)); 
 8000c64:	f107 0310 	add.w	r3, r7, #16
 8000c68:	221e      	movs	r2, #30
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f003 fe67 	bl	8004940 <memset>

    sprintf(printStr, "dp = %x\r\n", tempId.frame.dp); 
 8000c72:	7b3b      	ldrb	r3, [r7, #12]
 8000c74:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	f107 0310 	add.w	r3, r7, #16
 8000c80:	493c      	ldr	r1, [pc, #240]	@ (8000d74 <canspi_idCheck+0x164>)
 8000c82:	4618      	mov	r0, r3
 8000c84:	f003 fe3c 	bl	8004900 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	211e      	movs	r1, #30
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 fd0c 	bl	80016ac <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 8000c94:	f107 0310 	add.w	r3, r7, #16
 8000c98:	221e      	movs	r2, #30
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f003 fe4f 	bl	8004940 <memset>

    sprintf(printStr, "edp = %x\r\n", tempId.frame.edp); 
 8000ca2:	7b3b      	ldrb	r3, [r7, #12]
 8000ca4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	461a      	mov	r2, r3
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	4931      	ldr	r1, [pc, #196]	@ (8000d78 <canspi_idCheck+0x168>)
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f003 fe24 	bl	8004900 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 8000cb8:	f107 0310 	add.w	r3, r7, #16
 8000cbc:	211e      	movs	r1, #30
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 fcf4 	bl	80016ac <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 8000cc4:	f107 0310 	add.w	r3, r7, #16
 8000cc8:	221e      	movs	r2, #30
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f003 fe37 	bl	8004940 <memset>

    sprintf(printStr, "pf = %x\r\n", tempId.frame.pf); 
 8000cd2:	89bb      	ldrh	r3, [r7, #12]
 8000cd4:	f3c3 1347 	ubfx	r3, r3, #5, #8
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	461a      	mov	r2, r3
 8000cdc:	f107 0310 	add.w	r3, r7, #16
 8000ce0:	4926      	ldr	r1, [pc, #152]	@ (8000d7c <canspi_idCheck+0x16c>)
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f003 fe0c 	bl	8004900 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 8000ce8:	f107 0310 	add.w	r3, r7, #16
 8000cec:	211e      	movs	r1, #30
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 fcdc 	bl	80016ac <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 8000cf4:	f107 0310 	add.w	r3, r7, #16
 8000cf8:	221e      	movs	r2, #30
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f003 fe1f 	bl	8004940 <memset>

    sprintf(printStr, "ps = %x\r\n", tempId.frame.ps); 
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	f3c3 3347 	ubfx	r3, r3, #13, #8
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	f107 0310 	add.w	r3, r7, #16
 8000d10:	491b      	ldr	r1, [pc, #108]	@ (8000d80 <canspi_idCheck+0x170>)
 8000d12:	4618      	mov	r0, r3
 8000d14:	f003 fdf4 	bl	8004900 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 8000d18:	f107 0310 	add.w	r3, r7, #16
 8000d1c:	211e      	movs	r1, #30
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 fcc4 	bl	80016ac <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	221e      	movs	r2, #30
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f003 fe07 	bl	8004940 <memset>

    sprintf(printStr, "source address = %x\r\n\n", tempId.frame.source_address); 
 8000d32:	89fb      	ldrh	r3, [r7, #14]
 8000d34:	f3c3 1347 	ubfx	r3, r3, #5, #8
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	f107 0310 	add.w	r3, r7, #16
 8000d40:	4910      	ldr	r1, [pc, #64]	@ (8000d84 <canspi_idCheck+0x174>)
 8000d42:	4618      	mov	r0, r3
 8000d44:	f003 fddc 	bl	8004900 <siprintf>
    uart_serial_print(printStr, sizeof(printStr));
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	211e      	movs	r1, #30
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 fcac 	bl	80016ac <uart_serial_print>
    memset(printStr, '\0', sizeof(printStr));
 8000d54:	f107 0310 	add.w	r3, r7, #16
 8000d58:	221e      	movs	r2, #30
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f003 fdef 	bl	8004940 <memset>
 8000d62:	bf00      	nop
 8000d64:	3730      	adds	r7, #48	@ 0x30
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	0800527c 	.word	0x0800527c
 8000d70:	08005290 	.word	0x08005290
 8000d74:	080052a0 	.word	0x080052a0
 8000d78:	080052ac 	.word	0x080052ac
 8000d7c:	080052b8 	.word	0x080052b8
 8000d80:	080052c4 	.word	0x080052c4
 8000d84:	080052d0 	.word	0x080052d0

08000d88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08c      	sub	sp, #48	@ 0x30
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d8e:	f000 fcca 	bl	8001726 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d92:	f000 f883 	bl	8000e9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d96:	f000 f945 	bl	8001024 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d9a:	f000 f8d5 	bl	8000f48 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000d9e:	f000 f911 	bl	8000fc4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  uart_serial_print(start, sizeof(start));
 8000da2:	210d      	movs	r1, #13
 8000da4:	483b      	ldr	r0, [pc, #236]	@ (8000e94 <main+0x10c>)
 8000da6:	f000 fc81 	bl	80016ac <uart_serial_print>
  // canspi_Init(); 
  MCP_test_function();
 8000daa:	f000 f98b 	bl	80010c4 <MCP_test_function>
  uart_serial_print(end, sizeof(end));
 8000dae:	210b      	movs	r1, #11
 8000db0:	4839      	ldr	r0, [pc, #228]	@ (8000e98 <main+0x110>)
 8000db2:	f000 fc7b 	bl	80016ac <uart_serial_print>
   

  can_msg_t tx_message;  
  can_ext_id_t tx_id; 
  
  tx_id.frame.priority = 0; 
 8000db6:	7f3b      	ldrb	r3, [r7, #28]
 8000db8:	f36f 0302 	bfc	r3, #0, #3
 8000dbc:	773b      	strb	r3, [r7, #28]
  tx_id.frame.edp = 0;
 8000dbe:	7f3b      	ldrb	r3, [r7, #28]
 8000dc0:	f36f 03c3 	bfc	r3, #3, #1
 8000dc4:	773b      	strb	r3, [r7, #28]
  tx_id.frame.dp = 1; 
 8000dc6:	7f3b      	ldrb	r3, [r7, #28]
 8000dc8:	f043 0310 	orr.w	r3, r3, #16
 8000dcc:	773b      	strb	r3, [r7, #28]
  tx_id.frame.pf = 0x18; 
 8000dce:	8bbb      	ldrh	r3, [r7, #28]
 8000dd0:	2218      	movs	r2, #24
 8000dd2:	f362 134c 	bfi	r3, r2, #5, #8
 8000dd6:	83bb      	strh	r3, [r7, #28]
  tx_id.frame.ps = 0xFE; 
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	f06f 0201 	mvn.w	r2, #1
 8000dde:	f362 3354 	bfi	r3, r2, #13, #8
 8000de2:	61fb      	str	r3, [r7, #28]
  tx_id.frame.source_address = 0xFE; 
 8000de4:	8bfb      	ldrh	r3, [r7, #30]
 8000de6:	f06f 0201 	mvn.w	r2, #1
 8000dea:	f362 134c 	bfi	r3, r2, #5, #8
 8000dee:	83fb      	strh	r3, [r7, #30]
  uint32_t uId = tx_id.id; 
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	61bb      	str	r3, [r7, #24]
  tx_message.frame.canId = tx_id.id; 
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	623b      	str	r3, [r7, #32]
  tx_message.frame.dlc = 8;
 8000df8:	2308      	movs	r3, #8
 8000dfa:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  tx_message.frame.data0 = 0xFF; 
 8000dfe:	23ff      	movs	r3, #255	@ 0xff
 8000e00:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  tx_message.frame.data1 = 0x1; 
 8000e04:	2301      	movs	r3, #1
 8000e06:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  tx_message.frame.data2 = 0x2;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  tx_message.frame.data3 = 0x3;
 8000e10:	2303      	movs	r3, #3
 8000e12:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  tx_message.frame.data4 = 0x5;
 8000e16:	2305      	movs	r3, #5
 8000e18:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  tx_message.frame.data5 = 0x5;
 8000e1c:	2305      	movs	r3, #5
 8000e1e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  tx_message.frame.data6 = 0x6;
 8000e22:	2306      	movs	r3, #6
 8000e24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  tx_message.frame.data7 = 0x7;
 8000e28:	2307      	movs	r3, #7
 8000e2a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

  can_msg_t rx_message;  

  canspi_TransmitMessage(&tx_message); 
 8000e2e:	f107 0320 	add.w	r3, r7, #32
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fb94 	bl	8000560 <canspi_TransmitMessage>
  HAL_Delay(500);
 8000e38:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e3c:	f000 fce8 	bl	8001810 <HAL_Delay>
  if(canspi_ReceiveMessage(&rx_message))
 8000e40:	f107 0308 	add.w	r3, r7, #8
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fbf3 	bl	8000630 <canspi_ReceiveMessage>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d004      	beq.n	8000e5a <main+0xd2>
  {
    canspi_CanLoopTest(rx_message); 
 8000e50:	f107 0308 	add.w	r3, r7, #8
 8000e54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e56:	f7ff fd39 	bl	80008cc <canspi_CanLoopTest>

  // sprintf(byteBuf, "buffer bit = %x\r\n\n", rxStatus.rxBuffer); 
  // uart_serial_print(byteBuf, sizeof(byteBuf));
  // memset(byteBuf, '\0', sizeof(byteBuf));
  id_reg_t regId; 
  regId.SIDH = 0; 
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	713b      	strb	r3, [r7, #4]
  regId.SIDL = 0; 
 8000e5e:	2300      	movs	r3, #0
 8000e60:	717b      	strb	r3, [r7, #5]
  regId.EID8 = 0; 
 8000e62:	2300      	movs	r3, #0
 8000e64:	71bb      	strb	r3, [r7, #6]
  regId.EID0 = 0; 
 8000e66:	2300      	movs	r3, #0
 8000e68:	71fb      	strb	r3, [r7, #7]

  canspi_ConvertIDToReg(uId, &regId); 
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	1d3a      	adds	r2, r7, #4
 8000e6e:	4611      	mov	r1, r2
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fcb9 	bl	80007e8 <canspi_ConvertIDToReg>
  canspi_ConvertRegToID(regId, &uId); 
 8000e76:	f107 0318 	add.w	r3, r7, #24
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff fc69 	bl	8000754 <canspi_ConvertRegToID>
  canspi_idCheck(uId); 
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fec3 	bl	8000c10 <canspi_idCheck>
    // if(canspi_ReceiveMessage(&rx_message))
    // {
    //   canspi_CanLoopTest(rx_message); 
    // } 
    
    HAL_Delay(1000); 
 8000e8a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e8e:	f000 fcbf 	bl	8001810 <HAL_Delay>
 8000e92:	e7fa      	b.n	8000e8a <main+0x102>
 8000e94:	20000000 	.word	0x20000000
 8000e98:	20000010 	.word	0x20000010

08000e9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b096      	sub	sp, #88	@ 0x58
 8000ea0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	2244      	movs	r2, #68	@ 0x44
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f003 fd48 	bl	8004940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb0:	463b      	mov	r3, r7
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ebe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ec2:	f000 ff4f 	bl	8001d64 <HAL_PWREx_ControlVoltageScaling>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ecc:	f000 f8f4 	bl	80010b8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ed0:	f000 ff2a 	bl	8001d28 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f44 <SystemClock_Config+0xa8>)
 8000ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000eda:	4a1a      	ldr	r2, [pc, #104]	@ (8000f44 <SystemClock_Config+0xa8>)
 8000edc:	f023 0318 	bic.w	r3, r3, #24
 8000ee0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000ee4:	2314      	movs	r3, #20
 8000ee6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000eec:	2301      	movs	r3, #1
 8000eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ef4:	2360      	movs	r3, #96	@ 0x60
 8000ef6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	4618      	mov	r0, r3
 8000f02:	f000 ff85 	bl	8001e10 <HAL_RCC_OscConfig>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000f0c:	f000 f8d4 	bl	80010b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f10:	230f      	movs	r3, #15
 8000f12:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000f14:	2300      	movs	r3, #0
 8000f16:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f20:	2300      	movs	r3, #0
 8000f22:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f24:	463b      	mov	r3, r7
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f001 fb85 	bl	8002638 <HAL_RCC_ClockConfig>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000f34:	f000 f8c0 	bl	80010b8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000f38:	f001 ff98 	bl	8002e6c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000f3c:	bf00      	nop
 8000f3e:	3758      	adds	r7, #88	@ 0x58
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40021000 	.word	0x40021000

08000f48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fbc <MX_SPI1_Init+0x74>)
 8000f4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000fc0 <MX_SPI1_Init+0x78>)
 8000f50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f52:	4b1a      	ldr	r3, [pc, #104]	@ (8000fbc <MX_SPI1_Init+0x74>)
 8000f54:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f5a:	4b18      	ldr	r3, [pc, #96]	@ (8000fbc <MX_SPI1_Init+0x74>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f60:	4b16      	ldr	r3, [pc, #88]	@ (8000fbc <MX_SPI1_Init+0x74>)
 8000f62:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000f66:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f68:	4b14      	ldr	r3, [pc, #80]	@ (8000fbc <MX_SPI1_Init+0x74>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f6e:	4b13      	ldr	r3, [pc, #76]	@ (8000fbc <MX_SPI1_Init+0x74>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f74:	4b11      	ldr	r3, [pc, #68]	@ (8000fbc <MX_SPI1_Init+0x74>)
 8000f76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f7a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <MX_SPI1_Init+0x74>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	@ (8000fbc <MX_SPI1_Init+0x74>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <MX_SPI1_Init+0x74>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fbc <MX_SPI1_Init+0x74>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f94:	4b09      	ldr	r3, [pc, #36]	@ (8000fbc <MX_SPI1_Init+0x74>)
 8000f96:	2207      	movs	r2, #7
 8000f98:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f9a:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <MX_SPI1_Init+0x74>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <MX_SPI1_Init+0x74>)
 8000fa2:	2208      	movs	r2, #8
 8000fa4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fa6:	4805      	ldr	r0, [pc, #20]	@ (8000fbc <MX_SPI1_Init+0x74>)
 8000fa8:	f002 f862 	bl	8003070 <HAL_SPI_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000fb2:	f000 f881 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000094 	.word	0x20000094
 8000fc0:	40013000 	.word	0x40013000

08000fc4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fc8:	4b14      	ldr	r3, [pc, #80]	@ (800101c <MX_USART2_UART_Init+0x58>)
 8000fca:	4a15      	ldr	r2, [pc, #84]	@ (8001020 <MX_USART2_UART_Init+0x5c>)
 8000fcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fce:	4b13      	ldr	r3, [pc, #76]	@ (800101c <MX_USART2_UART_Init+0x58>)
 8000fd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fd6:	4b11      	ldr	r3, [pc, #68]	@ (800101c <MX_USART2_UART_Init+0x58>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800101c <MX_USART2_UART_Init+0x58>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800101c <MX_USART2_UART_Init+0x58>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <MX_USART2_UART_Init+0x58>)
 8000fea:	220c      	movs	r2, #12
 8000fec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fee:	4b0b      	ldr	r3, [pc, #44]	@ (800101c <MX_USART2_UART_Init+0x58>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff4:	4b09      	ldr	r3, [pc, #36]	@ (800101c <MX_USART2_UART_Init+0x58>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ffa:	4b08      	ldr	r3, [pc, #32]	@ (800101c <MX_USART2_UART_Init+0x58>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001000:	4b06      	ldr	r3, [pc, #24]	@ (800101c <MX_USART2_UART_Init+0x58>)
 8001002:	2200      	movs	r2, #0
 8001004:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001006:	4805      	ldr	r0, [pc, #20]	@ (800101c <MX_USART2_UART_Init+0x58>)
 8001008:	f002 ff60 	bl	8003ecc <HAL_UART_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001012:	f000 f851 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200000f8 	.word	0x200000f8
 8001020:	40004400 	.word	0x40004400

08001024 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800103a:	4b1d      	ldr	r3, [pc, #116]	@ (80010b0 <MX_GPIO_Init+0x8c>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103e:	4a1c      	ldr	r2, [pc, #112]	@ (80010b0 <MX_GPIO_Init+0x8c>)
 8001040:	f043 0304 	orr.w	r3, r3, #4
 8001044:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001046:	4b1a      	ldr	r3, [pc, #104]	@ (80010b0 <MX_GPIO_Init+0x8c>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800104a:	f003 0304 	and.w	r3, r3, #4
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001052:	4b17      	ldr	r3, [pc, #92]	@ (80010b0 <MX_GPIO_Init+0x8c>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001056:	4a16      	ldr	r2, [pc, #88]	@ (80010b0 <MX_GPIO_Init+0x8c>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800105e:	4b14      	ldr	r3, [pc, #80]	@ (80010b0 <MX_GPIO_Init+0x8c>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106a:	4b11      	ldr	r3, [pc, #68]	@ (80010b0 <MX_GPIO_Init+0x8c>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106e:	4a10      	ldr	r2, [pc, #64]	@ (80010b0 <MX_GPIO_Init+0x8c>)
 8001070:	f043 0302 	orr.w	r3, r3, #2
 8001074:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001076:	4b0e      	ldr	r3, [pc, #56]	@ (80010b0 <MX_GPIO_Init+0x8c>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	603b      	str	r3, [r7, #0]
 8001080:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, GPIO_PIN_SET);
 8001082:	2201      	movs	r2, #1
 8001084:	2180      	movs	r1, #128	@ 0x80
 8001086:	480b      	ldr	r0, [pc, #44]	@ (80010b4 <MX_GPIO_Init+0x90>)
 8001088:	f000 fe36 	bl	8001cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SP1_CS_Pin */
  GPIO_InitStruct.Pin = SP1_CS_Pin;
 800108c:	2380      	movs	r3, #128	@ 0x80
 800108e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001090:	2301      	movs	r3, #1
 8001092:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001098:	2300      	movs	r3, #0
 800109a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SP1_CS_GPIO_Port, &GPIO_InitStruct);
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	4619      	mov	r1, r3
 80010a2:	4804      	ldr	r0, [pc, #16]	@ (80010b4 <MX_GPIO_Init+0x90>)
 80010a4:	f000 fcbe 	bl	8001a24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010a8:	bf00      	nop
 80010aa:	3720      	adds	r7, #32
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40021000 	.word	0x40021000
 80010b4:	48000400 	.word	0x48000400

080010b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010bc:	b672      	cpsid	i
}
 80010be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <Error_Handler+0x8>

080010c4 <MCP_test_function>:
/******************** ******************** ***********************/
/******************** Function Definitions ***********************/
/******************** ******************** ***********************/

void MCP_test_function(void)
{ 
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
  
  uint8_t instruction = MCP2515_READ;
 80010ca:	2303      	movs	r3, #3
 80010cc:	717b      	strb	r3, [r7, #5]
  uint8_t address = MCP2515_CANCTRL; 
 80010ce:	230f      	movs	r3, #15
 80010d0:	713b      	strb	r3, [r7, #4]
  uint8_t read_data = 0xFF;
 80010d2:	23ff      	movs	r3, #255	@ 0xff
 80010d4:	70fb      	strb	r3, [r7, #3]
  uint8_t read_error = 0xFF;
 80010d6:	23ff      	movs	r3, #255	@ 0xff
 80010d8:	71fb      	strb	r3, [r7, #7]




  //step 1: set chip select low  
  MCP2515_CS_LOW();
 80010da:	2200      	movs	r2, #0
 80010dc:	2180      	movs	r1, #128	@ 0x80
 80010de:	483b      	ldr	r0, [pc, #236]	@ (80011cc <MCP_test_function+0x108>)
 80010e0:	f000 fe0a 	bl	8001cf8 <HAL_GPIO_WritePin>
  
  //step 2: tell the chip I want to read a register
  HAL_SPI_Transmit(&hspi1, &instruction, 1, SPI_TIMEOUT);
 80010e4:	1d79      	adds	r1, r7, #5
 80010e6:	2364      	movs	r3, #100	@ 0x64
 80010e8:	2201      	movs	r2, #1
 80010ea:	4839      	ldr	r0, [pc, #228]	@ (80011d0 <MCP_test_function+0x10c>)
 80010ec:	f002 f863 	bl	80031b6 <HAL_SPI_Transmit>
  //step 3: tell it the location I want to read
  HAL_SPI_Transmit(&hspi1, &address, 1, SPI_TIMEOUT);
 80010f0:	1d39      	adds	r1, r7, #4
 80010f2:	2364      	movs	r3, #100	@ 0x64
 80010f4:	2201      	movs	r2, #1
 80010f6:	4836      	ldr	r0, [pc, #216]	@ (80011d0 <MCP_test_function+0x10c>)
 80010f8:	f002 f85d 	bl	80031b6 <HAL_SPI_Transmit>
  //step 4: read the register
  read_error = (uint8_t) HAL_SPI_Receive(&hspi1, &read_data, 1, SPI_TIMEOUT);
 80010fc:	1cf9      	adds	r1, r7, #3
 80010fe:	2364      	movs	r3, #100	@ 0x64
 8001100:	2201      	movs	r2, #1
 8001102:	4833      	ldr	r0, [pc, #204]	@ (80011d0 <MCP_test_function+0x10c>)
 8001104:	f002 f9cc 	bl	80034a0 <HAL_SPI_Receive>
 8001108:	4603      	mov	r3, r0
 800110a:	71fb      	strb	r3, [r7, #7]

  //step 5: set chip select high
  MCP2515_CS_HIGH();
 800110c:	2201      	movs	r2, #1
 800110e:	2180      	movs	r1, #128	@ 0x80
 8001110:	482e      	ldr	r0, [pc, #184]	@ (80011cc <MCP_test_function+0x108>)
 8001112:	f000 fdf1 	bl	8001cf8 <HAL_GPIO_WritePin>

  sprintf(test, "instruction = %x\r\n", (uint8_t)INSTRUCTION_READ); 
 8001116:	2203      	movs	r2, #3
 8001118:	492e      	ldr	r1, [pc, #184]	@ (80011d4 <MCP_test_function+0x110>)
 800111a:	482f      	ldr	r0, [pc, #188]	@ (80011d8 <MCP_test_function+0x114>)
 800111c:	f003 fbf0 	bl	8004900 <siprintf>
  uart_serial_print(test, sizeof(test));
 8001120:	211e      	movs	r1, #30
 8001122:	482d      	ldr	r0, [pc, #180]	@ (80011d8 <MCP_test_function+0x114>)
 8001124:	f000 fac2 	bl	80016ac <uart_serial_print>
  memset(test, '\0', sizeof(test)); 
 8001128:	221e      	movs	r2, #30
 800112a:	2100      	movs	r1, #0
 800112c:	482a      	ldr	r0, [pc, #168]	@ (80011d8 <MCP_test_function+0x114>)
 800112e:	f003 fc07 	bl	8004940 <memset>
  sprintf(test, "address = %x\r\n", address); 
 8001132:	793b      	ldrb	r3, [r7, #4]
 8001134:	461a      	mov	r2, r3
 8001136:	4929      	ldr	r1, [pc, #164]	@ (80011dc <MCP_test_function+0x118>)
 8001138:	4827      	ldr	r0, [pc, #156]	@ (80011d8 <MCP_test_function+0x114>)
 800113a:	f003 fbe1 	bl	8004900 <siprintf>
  uart_serial_print(test, sizeof(test));
 800113e:	211e      	movs	r1, #30
 8001140:	4825      	ldr	r0, [pc, #148]	@ (80011d8 <MCP_test_function+0x114>)
 8001142:	f000 fab3 	bl	80016ac <uart_serial_print>
  memset(test, '\0', sizeof(test)); 
 8001146:	221e      	movs	r2, #30
 8001148:	2100      	movs	r1, #0
 800114a:	4823      	ldr	r0, [pc, #140]	@ (80011d8 <MCP_test_function+0x114>)
 800114c:	f003 fbf8 	bl	8004940 <memset>
  sprintf(test, "rxerr = %d\r\n", read_error); 
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	461a      	mov	r2, r3
 8001154:	4922      	ldr	r1, [pc, #136]	@ (80011e0 <MCP_test_function+0x11c>)
 8001156:	4820      	ldr	r0, [pc, #128]	@ (80011d8 <MCP_test_function+0x114>)
 8001158:	f003 fbd2 	bl	8004900 <siprintf>
  uart_serial_print(test, sizeof(test));
 800115c:	211e      	movs	r1, #30
 800115e:	481e      	ldr	r0, [pc, #120]	@ (80011d8 <MCP_test_function+0x114>)
 8001160:	f000 faa4 	bl	80016ac <uart_serial_print>
  memset(test, '\0', sizeof(test)); 
 8001164:	221e      	movs	r2, #30
 8001166:	2100      	movs	r1, #0
 8001168:	481b      	ldr	r0, [pc, #108]	@ (80011d8 <MCP_test_function+0x114>)
 800116a:	f003 fbe9 	bl	8004940 <memset>
  sprintf(test, "data = %x\r\n\n", read_data); 
 800116e:	78fb      	ldrb	r3, [r7, #3]
 8001170:	461a      	mov	r2, r3
 8001172:	491c      	ldr	r1, [pc, #112]	@ (80011e4 <MCP_test_function+0x120>)
 8001174:	4818      	ldr	r0, [pc, #96]	@ (80011d8 <MCP_test_function+0x114>)
 8001176:	f003 fbc3 	bl	8004900 <siprintf>
  uart_serial_print(test, sizeof(test));
 800117a:	211e      	movs	r1, #30
 800117c:	4816      	ldr	r0, [pc, #88]	@ (80011d8 <MCP_test_function+0x114>)
 800117e:	f000 fa95 	bl	80016ac <uart_serial_print>
  memset(test, '\0', sizeof(test)); 
 8001182:	221e      	movs	r2, #30
 8001184:	2100      	movs	r1, #0
 8001186:	4814      	ldr	r0, [pc, #80]	@ (80011d8 <MCP_test_function+0x114>)
 8001188:	f003 fbda 	bl	8004940 <memset>



  uint8_t temp_data = 0x47;
 800118c:	2347      	movs	r3, #71	@ 0x47
 800118e:	71bb      	strb	r3, [r7, #6]
  MCP2515_WriteByte(MCP2515_CANCTRL, temp_data); 
 8001190:	79bb      	ldrb	r3, [r7, #6]
 8001192:	4619      	mov	r1, r3
 8001194:	200f      	movs	r0, #15
 8001196:	f000 f827 	bl	80011e8 <MCP2515_WriteByte>
  read_data = MCP2515_ReadByte(MCP2515_CANCTRL); 
 800119a:	200f      	movs	r0, #15
 800119c:	f000 f870 	bl	8001280 <MCP2515_ReadByte>
 80011a0:	4603      	mov	r3, r0
 80011a2:	70fb      	strb	r3, [r7, #3]
  sprintf(test, "data = %x\r\n\n", read_data); 
 80011a4:	78fb      	ldrb	r3, [r7, #3]
 80011a6:	461a      	mov	r2, r3
 80011a8:	490e      	ldr	r1, [pc, #56]	@ (80011e4 <MCP_test_function+0x120>)
 80011aa:	480b      	ldr	r0, [pc, #44]	@ (80011d8 <MCP_test_function+0x114>)
 80011ac:	f003 fba8 	bl	8004900 <siprintf>
  uart_serial_print(test, sizeof(test));
 80011b0:	211e      	movs	r1, #30
 80011b2:	4809      	ldr	r0, [pc, #36]	@ (80011d8 <MCP_test_function+0x114>)
 80011b4:	f000 fa7a 	bl	80016ac <uart_serial_print>
  memset(test, '\0', sizeof(test));
 80011b8:	221e      	movs	r2, #30
 80011ba:	2100      	movs	r1, #0
 80011bc:	4806      	ldr	r0, [pc, #24]	@ (80011d8 <MCP_test_function+0x114>)
 80011be:	f003 fbbf 	bl	8004940 <memset>


}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	48000400 	.word	0x48000400
 80011d0:	20000094 	.word	0x20000094
 80011d4:	08005388 	.word	0x08005388
 80011d8:	20000180 	.word	0x20000180
 80011dc:	0800539c 	.word	0x0800539c
 80011e0:	080053ac 	.word	0x080053ac
 80011e4:	080053bc 	.word	0x080053bc

080011e8 <MCP2515_WriteByte>:

    @{
*/
/******************************************************************************/
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	460a      	mov	r2, r1
 80011f2:	71fb      	strb	r3, [r7, #7]
 80011f4:	4613      	mov	r3, r2
 80011f6:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();  
 80011f8:	2200      	movs	r2, #0
 80011fa:	2180      	movs	r1, #128	@ 0x80
 80011fc:	480b      	ldr	r0, [pc, #44]	@ (800122c <MCP2515_WriteByte+0x44>)
 80011fe:	f000 fd7b 	bl	8001cf8 <HAL_GPIO_WritePin>

  SPI_Tx((uint8_t)INSTRUCTION_WRITE);
 8001202:	2002      	movs	r0, #2
 8001204:	f000 f8ba 	bl	800137c <SPI_Tx>
  SPI_Tx(address);
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	4618      	mov	r0, r3
 800120c:	f000 f8b6 	bl	800137c <SPI_Tx>
  SPI_Tx(data);  
 8001210:	79bb      	ldrb	r3, [r7, #6]
 8001212:	4618      	mov	r0, r3
 8001214:	f000 f8b2 	bl	800137c <SPI_Tx>
  
  MCP2515_CS_HIGH();
 8001218:	2201      	movs	r2, #1
 800121a:	2180      	movs	r1, #128	@ 0x80
 800121c:	4803      	ldr	r0, [pc, #12]	@ (800122c <MCP2515_WriteByte+0x44>)
 800121e:	f000 fd6b 	bl	8001cf8 <HAL_GPIO_WritePin>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	48000400 	.word	0x48000400

08001230 <MCP2515_WriteTxBuffer>:

    @{
*/
/******************************************************************************/
void MCP2515_WriteTxBuffer(load_tx_buf_instr_t instruction, id_reg_t *idReg, uint8_t* data, uint8_t length)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	60b9      	str	r1, [r7, #8]
 8001238:	607a      	str	r2, [r7, #4]
 800123a:	461a      	mov	r2, r3
 800123c:	4603      	mov	r3, r0
 800123e:	73fb      	strb	r3, [r7, #15]
 8001240:	4613      	mov	r3, r2
 8001242:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 8001244:	2200      	movs	r2, #0
 8001246:	2180      	movs	r1, #128	@ 0x80
 8001248:	480c      	ldr	r0, [pc, #48]	@ (800127c <MCP2515_WriteTxBuffer+0x4c>)
 800124a:	f000 fd55 	bl	8001cf8 <HAL_GPIO_WritePin>

  SPI_Tx((uint8_t)instruction);
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	4618      	mov	r0, r3
 8001252:	f000 f893 	bl	800137c <SPI_Tx>
  SPI_TxBuffer(&idReg->SIDH, 4); 
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	2104      	movs	r1, #4
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f8a0 	bl	80013a0 <SPI_TxBuffer>
  SPI_TxBuffer(data, length);
 8001260:	7bbb      	ldrb	r3, [r7, #14]
 8001262:	4619      	mov	r1, r3
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f000 f89b 	bl	80013a0 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 800126a:	2201      	movs	r2, #1
 800126c:	2180      	movs	r1, #128	@ 0x80
 800126e:	4803      	ldr	r0, [pc, #12]	@ (800127c <MCP2515_WriteTxBuffer+0x4c>)
 8001270:	f000 fd42 	bl	8001cf8 <HAL_GPIO_WritePin>
}
 8001274:	bf00      	nop
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	48000400 	.word	0x48000400

08001280 <MCP2515_ReadByte>:

    @{
*/
/******************************************************************************/
uint8_t MCP2515_ReadByte(uint8_t address)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
    uint8_t retVal = 0; 
 800128a:	2300      	movs	r3, #0
 800128c:	73fb      	strb	r3, [r7, #15]

    MCP2515_CS_LOW();
 800128e:	2200      	movs	r2, #0
 8001290:	2180      	movs	r1, #128	@ 0x80
 8001292:	480c      	ldr	r0, [pc, #48]	@ (80012c4 <MCP2515_ReadByte+0x44>)
 8001294:	f000 fd30 	bl	8001cf8 <HAL_GPIO_WritePin>
  
    SPI_Tx((uint8_t)INSTRUCTION_READ);
 8001298:	2003      	movs	r0, #3
 800129a:	f000 f86f 	bl	800137c <SPI_Tx>
    SPI_Tx(address);
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 f86b 	bl	800137c <SPI_Tx>
    retVal = SPI_Rx();
 80012a6:	f000 f88f 	bl	80013c8 <SPI_Rx>
 80012aa:	4603      	mov	r3, r0
 80012ac:	73fb      	strb	r3, [r7, #15]
  
    MCP2515_CS_HIGH();
 80012ae:	2201      	movs	r2, #1
 80012b0:	2180      	movs	r1, #128	@ 0x80
 80012b2:	4804      	ldr	r0, [pc, #16]	@ (80012c4 <MCP2515_ReadByte+0x44>)
 80012b4:	f000 fd20 	bl	8001cf8 <HAL_GPIO_WritePin>

    return retVal;
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	48000400 	.word	0x48000400

080012c8 <MCP2515_ReadRxBuffer>:

    @{
*/
/******************************************************************************/
void MCP2515_ReadRxBuffer(read_rx_buf_instr_t instruction, uint8_t* data, uint8_t length)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	6039      	str	r1, [r7, #0]
 80012d2:	71fb      	strb	r3, [r7, #7]
 80012d4:	4613      	mov	r3, r2
 80012d6:	71bb      	strb	r3, [r7, #6]
    MCP2515_CS_LOW();
 80012d8:	2200      	movs	r2, #0
 80012da:	2180      	movs	r1, #128	@ 0x80
 80012dc:	480a      	ldr	r0, [pc, #40]	@ (8001308 <MCP2515_ReadRxBuffer+0x40>)
 80012de:	f000 fd0b 	bl	8001cf8 <HAL_GPIO_WritePin>

    SPI_Tx(instruction); 
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f000 f849 	bl	800137c <SPI_Tx>
    SPI_RxBuffer(data, length); 
 80012ea:	79bb      	ldrb	r3, [r7, #6]
 80012ec:	4619      	mov	r1, r3
 80012ee:	6838      	ldr	r0, [r7, #0]
 80012f0:	f000 f880 	bl	80013f4 <SPI_RxBuffer>

    MCP2515_CS_HIGH();
 80012f4:	2201      	movs	r2, #1
 80012f6:	2180      	movs	r1, #128	@ 0x80
 80012f8:	4803      	ldr	r0, [pc, #12]	@ (8001308 <MCP2515_ReadRxBuffer+0x40>)
 80012fa:	f000 fcfd 	bl	8001cf8 <HAL_GPIO_WritePin>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	48000400 	.word	0x48000400

0800130c <MCP2515_GetRxStatus>:

    @{
*/
/******************************************************************************/
rx_status_t MCP2515_GetRxStatus(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
  rx_status_t retVal;
  
  MCP2515_CS_LOW();
 8001312:	2200      	movs	r2, #0
 8001314:	2180      	movs	r1, #128	@ 0x80
 8001316:	480a      	ldr	r0, [pc, #40]	@ (8001340 <MCP2515_GetRxStatus+0x34>)
 8001318:	f000 fcee 	bl	8001cf8 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_RX_STATUS);
 800131c:	20b0      	movs	r0, #176	@ 0xb0
 800131e:	f000 f82d 	bl	800137c <SPI_Tx>
  retVal.ctrl_rx_status = SPI_Rx();
 8001322:	f000 f851 	bl	80013c8 <SPI_Rx>
 8001326:	4603      	mov	r3, r0
 8001328:	713b      	strb	r3, [r7, #4]
        
  MCP2515_CS_HIGH();
 800132a:	2201      	movs	r2, #1
 800132c:	2180      	movs	r1, #128	@ 0x80
 800132e:	4804      	ldr	r0, [pc, #16]	@ (8001340 <MCP2515_GetRxStatus+0x34>)
 8001330:	f000 fce2 	bl	8001cf8 <HAL_GPIO_WritePin>
  
  return retVal;
 8001334:	687b      	ldr	r3, [r7, #4]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	48000400 	.word	0x48000400

08001344 <MCP2515_GetControlStatus>:

    @{
*/
/******************************************************************************/
ctrl_status_t MCP2515_GetControlStatus(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
  ctrl_status_t retVal;
  
  MCP2515_CS_LOW();
 800134a:	2200      	movs	r2, #0
 800134c:	2180      	movs	r1, #128	@ 0x80
 800134e:	480a      	ldr	r0, [pc, #40]	@ (8001378 <MCP2515_GetControlStatus+0x34>)
 8001350:	f000 fcd2 	bl	8001cf8 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_READ_STATUS);
 8001354:	20a0      	movs	r0, #160	@ 0xa0
 8001356:	f000 f811 	bl	800137c <SPI_Tx>
  retVal.ctrl_status = SPI_Rx();
 800135a:	f000 f835 	bl	80013c8 <SPI_Rx>
 800135e:	4603      	mov	r3, r0
 8001360:	713b      	strb	r3, [r7, #4]
        
  MCP2515_CS_HIGH();
 8001362:	2201      	movs	r2, #1
 8001364:	2180      	movs	r1, #128	@ 0x80
 8001366:	4804      	ldr	r0, [pc, #16]	@ (8001378 <MCP2515_GetControlStatus+0x34>)
 8001368:	f000 fcc6 	bl	8001cf8 <HAL_GPIO_WritePin>
  
  return retVal;
 800136c:	687b      	ldr	r3, [r7, #4]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	48000400 	.word	0x48000400

0800137c <SPI_Tx>:

    @{
*/
/******************************************************************************/
static void SPI_Tx(uint8_t data)
{ 
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]

  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);  
 8001386:	1df9      	adds	r1, r7, #7
 8001388:	2364      	movs	r3, #100	@ 0x64
 800138a:	2201      	movs	r2, #1
 800138c:	4803      	ldr	r0, [pc, #12]	@ (800139c <SPI_Tx+0x20>)
 800138e:	f001 ff12 	bl	80031b6 <HAL_SPI_Transmit>

}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000094 	.word	0x20000094

080013a0 <SPI_TxBuffer>:

    @{
*/
/******************************************************************************/
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(&hspi1, buffer, length, SPI_TIMEOUT);    
 80013ac:	78fb      	ldrb	r3, [r7, #3]
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	2364      	movs	r3, #100	@ 0x64
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	4803      	ldr	r0, [pc, #12]	@ (80013c4 <SPI_TxBuffer+0x24>)
 80013b6:	f001 fefe 	bl	80031b6 <HAL_SPI_Transmit>
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000094 	.word	0x20000094

080013c8 <SPI_Rx>:

    @{
*/
/******************************************************************************/
static uint8_t SPI_Rx(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  read_error = (uint8_t) HAL_SPI_Receive(&hspi1, &retVal, 1, SPI_TIMEOUT);
 80013ce:	1df9      	adds	r1, r7, #7
 80013d0:	2364      	movs	r3, #100	@ 0x64
 80013d2:	2201      	movs	r2, #1
 80013d4:	4805      	ldr	r0, [pc, #20]	@ (80013ec <SPI_Rx+0x24>)
 80013d6:	f002 f863 	bl	80034a0 <HAL_SPI_Receive>
 80013da:	4603      	mov	r3, r0
 80013dc:	461a      	mov	r2, r3
 80013de:	4b04      	ldr	r3, [pc, #16]	@ (80013f0 <SPI_Rx+0x28>)
 80013e0:	701a      	strb	r2, [r3, #0]

  return retVal;
 80013e2:	79fb      	ldrb	r3, [r7, #7]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000094 	.word	0x20000094
 80013f0:	2000019e 	.word	0x2000019e

080013f4 <SPI_RxBuffer>:

    @{
*/
/******************************************************************************/
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(&hspi1, buffer, length, SPI_TIMEOUT);
 8001400:	78fb      	ldrb	r3, [r7, #3]
 8001402:	b29a      	uxth	r2, r3
 8001404:	2364      	movs	r3, #100	@ 0x64
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	4803      	ldr	r0, [pc, #12]	@ (8001418 <SPI_RxBuffer+0x24>)
 800140a:	f002 f849 	bl	80034a0 <HAL_SPI_Receive>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000094 	.word	0x20000094

0800141c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001422:	4b0f      	ldr	r3, [pc, #60]	@ (8001460 <HAL_MspInit+0x44>)
 8001424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001426:	4a0e      	ldr	r2, [pc, #56]	@ (8001460 <HAL_MspInit+0x44>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6613      	str	r3, [r2, #96]	@ 0x60
 800142e:	4b0c      	ldr	r3, [pc, #48]	@ (8001460 <HAL_MspInit+0x44>)
 8001430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143a:	4b09      	ldr	r3, [pc, #36]	@ (8001460 <HAL_MspInit+0x44>)
 800143c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800143e:	4a08      	ldr	r2, [pc, #32]	@ (8001460 <HAL_MspInit+0x44>)
 8001440:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001444:	6593      	str	r3, [r2, #88]	@ 0x58
 8001446:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <HAL_MspInit+0x44>)
 8001448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800144a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800144e:	603b      	str	r3, [r7, #0]
 8001450:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40021000 	.word	0x40021000

08001464 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	@ 0x28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a17      	ldr	r2, [pc, #92]	@ (80014e0 <HAL_SPI_MspInit+0x7c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d128      	bne.n	80014d8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001486:	4b17      	ldr	r3, [pc, #92]	@ (80014e4 <HAL_SPI_MspInit+0x80>)
 8001488:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800148a:	4a16      	ldr	r2, [pc, #88]	@ (80014e4 <HAL_SPI_MspInit+0x80>)
 800148c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001490:	6613      	str	r3, [r2, #96]	@ 0x60
 8001492:	4b14      	ldr	r3, [pc, #80]	@ (80014e4 <HAL_SPI_MspInit+0x80>)
 8001494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001496:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <HAL_SPI_MspInit+0x80>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a2:	4a10      	ldr	r2, [pc, #64]	@ (80014e4 <HAL_SPI_MspInit+0x80>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014aa:	4b0e      	ldr	r3, [pc, #56]	@ (80014e4 <HAL_SPI_MspInit+0x80>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80014b6:	23c2      	movs	r3, #194	@ 0xc2
 80014b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c2:	2303      	movs	r3, #3
 80014c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014c6:	2305      	movs	r3, #5
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	4619      	mov	r1, r3
 80014d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014d4:	f000 faa6 	bl	8001a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014d8:	bf00      	nop
 80014da:	3728      	adds	r7, #40	@ 0x28
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40013000 	.word	0x40013000
 80014e4:	40021000 	.word	0x40021000

080014e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b09e      	sub	sp, #120	@ 0x78
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001500:	f107 0310 	add.w	r3, r7, #16
 8001504:	2254      	movs	r2, #84	@ 0x54
 8001506:	2100      	movs	r1, #0
 8001508:	4618      	mov	r0, r3
 800150a:	f003 fa19 	bl	8004940 <memset>
  if(huart->Instance==USART2)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a28      	ldr	r2, [pc, #160]	@ (80015b4 <HAL_UART_MspInit+0xcc>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d148      	bne.n	80015aa <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001518:	2302      	movs	r3, #2
 800151a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800151c:	2300      	movs	r3, #0
 800151e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001520:	f107 0310 	add.w	r3, r7, #16
 8001524:	4618      	mov	r0, r3
 8001526:	f001 faab 	bl	8002a80 <HAL_RCCEx_PeriphCLKConfig>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001530:	f7ff fdc2 	bl	80010b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001534:	4b20      	ldr	r3, [pc, #128]	@ (80015b8 <HAL_UART_MspInit+0xd0>)
 8001536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001538:	4a1f      	ldr	r2, [pc, #124]	@ (80015b8 <HAL_UART_MspInit+0xd0>)
 800153a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800153e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001540:	4b1d      	ldr	r3, [pc, #116]	@ (80015b8 <HAL_UART_MspInit+0xd0>)
 8001542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154c:	4b1a      	ldr	r3, [pc, #104]	@ (80015b8 <HAL_UART_MspInit+0xd0>)
 800154e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001550:	4a19      	ldr	r2, [pc, #100]	@ (80015b8 <HAL_UART_MspInit+0xd0>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001558:	4b17      	ldr	r3, [pc, #92]	@ (80015b8 <HAL_UART_MspInit+0xd0>)
 800155a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001564:	2304      	movs	r3, #4
 8001566:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001568:	2302      	movs	r3, #2
 800156a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001570:	2303      	movs	r3, #3
 8001572:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001574:	2307      	movs	r3, #7
 8001576:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001578:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800157c:	4619      	mov	r1, r3
 800157e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001582:	f000 fa4f 	bl	8001a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001586:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800158a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	2302      	movs	r3, #2
 800158e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001594:	2303      	movs	r3, #3
 8001596:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001598:	2303      	movs	r3, #3
 800159a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800159c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80015a0:	4619      	mov	r1, r3
 80015a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015a6:	f000 fa3d 	bl	8001a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015aa:	bf00      	nop
 80015ac:	3778      	adds	r7, #120	@ 0x78
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40004400 	.word	0x40004400
 80015b8:	40021000 	.word	0x40021000

080015bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <NMI_Handler+0x4>

080015c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <HardFault_Handler+0x4>

080015cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <MemManage_Handler+0x4>

080015d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <BusFault_Handler+0x4>

080015dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <UsageFault_Handler+0x4>

080015e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001612:	f000 f8dd 	bl	80017d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001624:	4a14      	ldr	r2, [pc, #80]	@ (8001678 <_sbrk+0x5c>)
 8001626:	4b15      	ldr	r3, [pc, #84]	@ (800167c <_sbrk+0x60>)
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001630:	4b13      	ldr	r3, [pc, #76]	@ (8001680 <_sbrk+0x64>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d102      	bne.n	800163e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001638:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <_sbrk+0x64>)
 800163a:	4a12      	ldr	r2, [pc, #72]	@ (8001684 <_sbrk+0x68>)
 800163c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800163e:	4b10      	ldr	r3, [pc, #64]	@ (8001680 <_sbrk+0x64>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	429a      	cmp	r2, r3
 800164a:	d207      	bcs.n	800165c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800164c:	f003 f980 	bl	8004950 <__errno>
 8001650:	4603      	mov	r3, r0
 8001652:	220c      	movs	r2, #12
 8001654:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001656:	f04f 33ff 	mov.w	r3, #4294967295
 800165a:	e009      	b.n	8001670 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800165c:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <_sbrk+0x64>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001662:	4b07      	ldr	r3, [pc, #28]	@ (8001680 <_sbrk+0x64>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	4a05      	ldr	r2, [pc, #20]	@ (8001680 <_sbrk+0x64>)
 800166c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800166e:	68fb      	ldr	r3, [r7, #12]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20010000 	.word	0x20010000
 800167c:	00000400 	.word	0x00000400
 8001680:	200001a0 	.word	0x200001a0
 8001684:	200002f0 	.word	0x200002f0

08001688 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800168c:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <SystemInit+0x20>)
 800168e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001692:	4a05      	ldr	r2, [pc, #20]	@ (80016a8 <SystemInit+0x20>)
 8001694:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001698:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <uart_serial_print>:

    @{
*/
/******************************************************************************/
void uart_serial_print(char* data, uint8_t size)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	70fb      	strb	r3, [r7, #3]
    HAL_UART_Transmit(&huart2, data, size, 100);
 80016b8:	78fb      	ldrb	r3, [r7, #3]
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	2364      	movs	r3, #100	@ 0x64
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	4803      	ldr	r0, [pc, #12]	@ (80016d0 <uart_serial_print+0x24>)
 80016c2:	f002 fc51 	bl	8003f68 <HAL_UART_Transmit>
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	200000f8 	.word	0x200000f8

080016d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800170c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016d8:	f7ff ffd6 	bl	8001688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016dc:	480c      	ldr	r0, [pc, #48]	@ (8001710 <LoopForever+0x6>)
  ldr r1, =_edata
 80016de:	490d      	ldr	r1, [pc, #52]	@ (8001714 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001718 <LoopForever+0xe>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e4:	e002      	b.n	80016ec <LoopCopyDataInit>

080016e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ea:	3304      	adds	r3, #4

080016ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f0:	d3f9      	bcc.n	80016e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016f2:	4a0a      	ldr	r2, [pc, #40]	@ (800171c <LoopForever+0x12>)
  ldr r4, =_ebss
 80016f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001720 <LoopForever+0x16>)
  movs r3, #0
 80016f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f8:	e001      	b.n	80016fe <LoopFillZerobss>

080016fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016fc:	3204      	adds	r2, #4

080016fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001700:	d3fb      	bcc.n	80016fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001702:	f003 f92b 	bl	800495c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001706:	f7ff fb3f 	bl	8000d88 <main>

0800170a <LoopForever>:

LoopForever:
    b LoopForever
 800170a:	e7fe      	b.n	800170a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800170c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001710:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001714:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001718:	0800547c 	.word	0x0800547c
  ldr r2, =_sbss
 800171c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001720:	200002f0 	.word	0x200002f0

08001724 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001724:	e7fe      	b.n	8001724 <ADC1_IRQHandler>

08001726 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800172c:	2300      	movs	r3, #0
 800172e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001730:	2003      	movs	r0, #3
 8001732:	f000 f943 	bl	80019bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001736:	2000      	movs	r0, #0
 8001738:	f000 f80e 	bl	8001758 <HAL_InitTick>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d002      	beq.n	8001748 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	71fb      	strb	r3, [r7, #7]
 8001746:	e001      	b.n	800174c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001748:	f7ff fe68 	bl	800141c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800174c:	79fb      	ldrb	r3, [r7, #7]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001760:	2300      	movs	r3, #0
 8001762:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001764:	4b17      	ldr	r3, [pc, #92]	@ (80017c4 <HAL_InitTick+0x6c>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d023      	beq.n	80017b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800176c:	4b16      	ldr	r3, [pc, #88]	@ (80017c8 <HAL_InitTick+0x70>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4b14      	ldr	r3, [pc, #80]	@ (80017c4 <HAL_InitTick+0x6c>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	4619      	mov	r1, r3
 8001776:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800177a:	fbb3 f3f1 	udiv	r3, r3, r1
 800177e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001782:	4618      	mov	r0, r3
 8001784:	f000 f941 	bl	8001a0a <HAL_SYSTICK_Config>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d10f      	bne.n	80017ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b0f      	cmp	r3, #15
 8001792:	d809      	bhi.n	80017a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001794:	2200      	movs	r2, #0
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	f04f 30ff 	mov.w	r0, #4294967295
 800179c:	f000 f919 	bl	80019d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017a0:	4a0a      	ldr	r2, [pc, #40]	@ (80017cc <HAL_InitTick+0x74>)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	e007      	b.n	80017b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	73fb      	strb	r3, [r7, #15]
 80017ac:	e004      	b.n	80017b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	73fb      	strb	r3, [r7, #15]
 80017b2:	e001      	b.n	80017b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000024 	.word	0x20000024
 80017c8:	2000001c 	.word	0x2000001c
 80017cc:	20000020 	.word	0x20000020

080017d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017d4:	4b06      	ldr	r3, [pc, #24]	@ (80017f0 <HAL_IncTick+0x20>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	461a      	mov	r2, r3
 80017da:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <HAL_IncTick+0x24>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4413      	add	r3, r2
 80017e0:	4a04      	ldr	r2, [pc, #16]	@ (80017f4 <HAL_IncTick+0x24>)
 80017e2:	6013      	str	r3, [r2, #0]
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	20000024 	.word	0x20000024
 80017f4:	200001a4 	.word	0x200001a4

080017f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return uwTick;
 80017fc:	4b03      	ldr	r3, [pc, #12]	@ (800180c <HAL_GetTick+0x14>)
 80017fe:	681b      	ldr	r3, [r3, #0]
}
 8001800:	4618      	mov	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	200001a4 	.word	0x200001a4

08001810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001818:	f7ff ffee 	bl	80017f8 <HAL_GetTick>
 800181c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001828:	d005      	beq.n	8001836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800182a:	4b0a      	ldr	r3, [pc, #40]	@ (8001854 <HAL_Delay+0x44>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001836:	bf00      	nop
 8001838:	f7ff ffde 	bl	80017f8 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	429a      	cmp	r2, r3
 8001846:	d8f7      	bhi.n	8001838 <HAL_Delay+0x28>
  {
  }
}
 8001848:	bf00      	nop
 800184a:	bf00      	nop
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000024 	.word	0x20000024

08001858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001868:	4b0c      	ldr	r3, [pc, #48]	@ (800189c <__NVIC_SetPriorityGrouping+0x44>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001874:	4013      	ands	r3, r2
 8001876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001880:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001884:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188a:	4a04      	ldr	r2, [pc, #16]	@ (800189c <__NVIC_SetPriorityGrouping+0x44>)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	60d3      	str	r3, [r2, #12]
}
 8001890:	bf00      	nop
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a4:	4b04      	ldr	r3, [pc, #16]	@ (80018b8 <__NVIC_GetPriorityGrouping+0x18>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	0a1b      	lsrs	r3, r3, #8
 80018aa:	f003 0307 	and.w	r3, r3, #7
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	6039      	str	r1, [r7, #0]
 80018c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	db0a      	blt.n	80018e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	490c      	ldr	r1, [pc, #48]	@ (8001908 <__NVIC_SetPriority+0x4c>)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	0112      	lsls	r2, r2, #4
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	440b      	add	r3, r1
 80018e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e4:	e00a      	b.n	80018fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4908      	ldr	r1, [pc, #32]	@ (800190c <__NVIC_SetPriority+0x50>)
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	3b04      	subs	r3, #4
 80018f4:	0112      	lsls	r2, r2, #4
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	440b      	add	r3, r1
 80018fa:	761a      	strb	r2, [r3, #24]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000e100 	.word	0xe000e100
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	@ 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f1c3 0307 	rsb	r3, r3, #7
 800192a:	2b04      	cmp	r3, #4
 800192c:	bf28      	it	cs
 800192e:	2304      	movcs	r3, #4
 8001930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3304      	adds	r3, #4
 8001936:	2b06      	cmp	r3, #6
 8001938:	d902      	bls.n	8001940 <NVIC_EncodePriority+0x30>
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3b03      	subs	r3, #3
 800193e:	e000      	b.n	8001942 <NVIC_EncodePriority+0x32>
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001944:	f04f 32ff 	mov.w	r2, #4294967295
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43da      	mvns	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	401a      	ands	r2, r3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001958:	f04f 31ff 	mov.w	r1, #4294967295
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	fa01 f303 	lsl.w	r3, r1, r3
 8001962:	43d9      	mvns	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001968:	4313      	orrs	r3, r2
         );
}
 800196a:	4618      	mov	r0, r3
 800196c:	3724      	adds	r7, #36	@ 0x24
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3b01      	subs	r3, #1
 8001984:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001988:	d301      	bcc.n	800198e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800198a:	2301      	movs	r3, #1
 800198c:	e00f      	b.n	80019ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198e:	4a0a      	ldr	r2, [pc, #40]	@ (80019b8 <SysTick_Config+0x40>)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3b01      	subs	r3, #1
 8001994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001996:	210f      	movs	r1, #15
 8001998:	f04f 30ff 	mov.w	r0, #4294967295
 800199c:	f7ff ff8e 	bl	80018bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a0:	4b05      	ldr	r3, [pc, #20]	@ (80019b8 <SysTick_Config+0x40>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a6:	4b04      	ldr	r3, [pc, #16]	@ (80019b8 <SysTick_Config+0x40>)
 80019a8:	2207      	movs	r2, #7
 80019aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	e000e010 	.word	0xe000e010

080019bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff ff47 	bl	8001858 <__NVIC_SetPriorityGrouping>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b086      	sub	sp, #24
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	4603      	mov	r3, r0
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
 80019de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019e4:	f7ff ff5c 	bl	80018a0 <__NVIC_GetPriorityGrouping>
 80019e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	6978      	ldr	r0, [r7, #20]
 80019f0:	f7ff ff8e 	bl	8001910 <NVIC_EncodePriority>
 80019f4:	4602      	mov	r2, r0
 80019f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fa:	4611      	mov	r1, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff5d 	bl	80018bc <__NVIC_SetPriority>
}
 8001a02:	bf00      	nop
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff ffb0 	bl	8001978 <SysTick_Config>
 8001a18:	4603      	mov	r3, r0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b087      	sub	sp, #28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a32:	e148      	b.n	8001cc6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	2101      	movs	r1, #1
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a40:	4013      	ands	r3, r2
 8001a42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 813a 	beq.w	8001cc0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f003 0303 	and.w	r3, r3, #3
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d005      	beq.n	8001a64 <HAL_GPIO_Init+0x40>
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 0303 	and.w	r3, r3, #3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d130      	bne.n	8001ac6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	2203      	movs	r2, #3
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	091b      	lsrs	r3, r3, #4
 8001ab0:	f003 0201 	and.w	r2, r3, #1
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	2b03      	cmp	r3, #3
 8001ad0:	d017      	beq.n	8001b02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	2203      	movs	r2, #3
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d123      	bne.n	8001b56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	08da      	lsrs	r2, r3, #3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3208      	adds	r2, #8
 8001b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	220f      	movs	r2, #15
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	691a      	ldr	r2, [r3, #16]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	08da      	lsrs	r2, r3, #3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3208      	adds	r2, #8
 8001b50:	6939      	ldr	r1, [r7, #16]
 8001b52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	2203      	movs	r2, #3
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 0203 	and.w	r2, r3, #3
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 8094 	beq.w	8001cc0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b98:	4b52      	ldr	r3, [pc, #328]	@ (8001ce4 <HAL_GPIO_Init+0x2c0>)
 8001b9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b9c:	4a51      	ldr	r2, [pc, #324]	@ (8001ce4 <HAL_GPIO_Init+0x2c0>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ba4:	4b4f      	ldr	r3, [pc, #316]	@ (8001ce4 <HAL_GPIO_Init+0x2c0>)
 8001ba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bb0:	4a4d      	ldr	r2, [pc, #308]	@ (8001ce8 <HAL_GPIO_Init+0x2c4>)
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	089b      	lsrs	r3, r3, #2
 8001bb6:	3302      	adds	r3, #2
 8001bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f003 0303 	and.w	r3, r3, #3
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	220f      	movs	r2, #15
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001bda:	d00d      	beq.n	8001bf8 <HAL_GPIO_Init+0x1d4>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a43      	ldr	r2, [pc, #268]	@ (8001cec <HAL_GPIO_Init+0x2c8>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d007      	beq.n	8001bf4 <HAL_GPIO_Init+0x1d0>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a42      	ldr	r2, [pc, #264]	@ (8001cf0 <HAL_GPIO_Init+0x2cc>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d101      	bne.n	8001bf0 <HAL_GPIO_Init+0x1cc>
 8001bec:	2302      	movs	r3, #2
 8001bee:	e004      	b.n	8001bfa <HAL_GPIO_Init+0x1d6>
 8001bf0:	2307      	movs	r3, #7
 8001bf2:	e002      	b.n	8001bfa <HAL_GPIO_Init+0x1d6>
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e000      	b.n	8001bfa <HAL_GPIO_Init+0x1d6>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	f002 0203 	and.w	r2, r2, #3
 8001c00:	0092      	lsls	r2, r2, #2
 8001c02:	4093      	lsls	r3, r2
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c0a:	4937      	ldr	r1, [pc, #220]	@ (8001ce8 <HAL_GPIO_Init+0x2c4>)
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	089b      	lsrs	r3, r3, #2
 8001c10:	3302      	adds	r3, #2
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c18:	4b36      	ldr	r3, [pc, #216]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	43db      	mvns	r3, r3
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	4013      	ands	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c3c:	4a2d      	ldr	r2, [pc, #180]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c42:	4b2c      	ldr	r3, [pc, #176]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c66:	4a23      	ldr	r2, [pc, #140]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c6c:	4b21      	ldr	r3, [pc, #132]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	43db      	mvns	r3, r3
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c90:	4a18      	ldr	r2, [pc, #96]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c96:	4b17      	ldr	r3, [pc, #92]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cba:	4a0e      	ldr	r2, [pc, #56]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f47f aeaf 	bne.w	8001a34 <HAL_GPIO_Init+0x10>
  }
}
 8001cd6:	bf00      	nop
 8001cd8:	bf00      	nop
 8001cda:	371c      	adds	r7, #28
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	40010000 	.word	0x40010000
 8001cec:	48000400 	.word	0x48000400
 8001cf0:	48000800 	.word	0x48000800
 8001cf4:	40010400 	.word	0x40010400

08001cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	807b      	strh	r3, [r7, #2]
 8001d04:	4613      	mov	r3, r2
 8001d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d08:	787b      	ldrb	r3, [r7, #1]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d0e:	887a      	ldrh	r2, [r7, #2]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d14:	e002      	b.n	8001d1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d16:	887a      	ldrh	r2, [r7, #2]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d2c:	4b05      	ldr	r3, [pc, #20]	@ (8001d44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a04      	ldr	r2, [pc, #16]	@ (8001d44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d36:	6013      	str	r3, [r2, #0]
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40007000 	.word	0x40007000

08001d48 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d4c:	4b04      	ldr	r3, [pc, #16]	@ (8001d60 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	40007000 	.word	0x40007000

08001d64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d72:	d130      	bne.n	8001dd6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d74:	4b23      	ldr	r3, [pc, #140]	@ (8001e04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d80:	d038      	beq.n	8001df4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d82:	4b20      	ldr	r3, [pc, #128]	@ (8001e04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d8a:	4a1e      	ldr	r2, [pc, #120]	@ (8001e04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d8c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d90:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d92:	4b1d      	ldr	r3, [pc, #116]	@ (8001e08 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2232      	movs	r2, #50	@ 0x32
 8001d98:	fb02 f303 	mul.w	r3, r2, r3
 8001d9c:	4a1b      	ldr	r2, [pc, #108]	@ (8001e0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001da2:	0c9b      	lsrs	r3, r3, #18
 8001da4:	3301      	adds	r3, #1
 8001da6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001da8:	e002      	b.n	8001db0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	3b01      	subs	r3, #1
 8001dae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001db0:	4b14      	ldr	r3, [pc, #80]	@ (8001e04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001db8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dbc:	d102      	bne.n	8001dc4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1f2      	bne.n	8001daa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dd0:	d110      	bne.n	8001df4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e00f      	b.n	8001df6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001dde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001de2:	d007      	beq.n	8001df4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001de4:	4b07      	ldr	r3, [pc, #28]	@ (8001e04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001dec:	4a05      	ldr	r2, [pc, #20]	@ (8001e04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001df2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	40007000 	.word	0x40007000
 8001e08:	2000001c 	.word	0x2000001c
 8001e0c:	431bde83 	.word	0x431bde83

08001e10 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b088      	sub	sp, #32
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d102      	bne.n	8001e24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	f000 bc02 	b.w	8002628 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e24:	4b96      	ldr	r3, [pc, #600]	@ (8002080 <HAL_RCC_OscConfig+0x270>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 030c 	and.w	r3, r3, #12
 8001e2c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e2e:	4b94      	ldr	r3, [pc, #592]	@ (8002080 <HAL_RCC_OscConfig+0x270>)
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0310 	and.w	r3, r3, #16
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 80e4 	beq.w	800200e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d007      	beq.n	8001e5c <HAL_RCC_OscConfig+0x4c>
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	2b0c      	cmp	r3, #12
 8001e50:	f040 808b 	bne.w	8001f6a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	f040 8087 	bne.w	8001f6a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e5c:	4b88      	ldr	r3, [pc, #544]	@ (8002080 <HAL_RCC_OscConfig+0x270>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d005      	beq.n	8001e74 <HAL_RCC_OscConfig+0x64>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e3d9      	b.n	8002628 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a1a      	ldr	r2, [r3, #32]
 8001e78:	4b81      	ldr	r3, [pc, #516]	@ (8002080 <HAL_RCC_OscConfig+0x270>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0308 	and.w	r3, r3, #8
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d004      	beq.n	8001e8e <HAL_RCC_OscConfig+0x7e>
 8001e84:	4b7e      	ldr	r3, [pc, #504]	@ (8002080 <HAL_RCC_OscConfig+0x270>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e8c:	e005      	b.n	8001e9a <HAL_RCC_OscConfig+0x8a>
 8001e8e:	4b7c      	ldr	r3, [pc, #496]	@ (8002080 <HAL_RCC_OscConfig+0x270>)
 8001e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e94:	091b      	lsrs	r3, r3, #4
 8001e96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d223      	bcs.n	8001ee6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f000 fd8c 	bl	80029c0 <RCC_SetFlashLatencyFromMSIRange>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e3ba      	b.n	8002628 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eb2:	4b73      	ldr	r3, [pc, #460]	@ (8002080 <HAL_RCC_OscConfig+0x270>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a72      	ldr	r2, [pc, #456]	@ (8002080 <HAL_RCC_OscConfig+0x270>)
 8001eb8:	f043 0308 	orr.w	r3, r3, #8
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	4b70      	ldr	r3, [pc, #448]	@ (8002080 <HAL_RCC_OscConfig+0x270>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	496d      	ldr	r1, [pc, #436]	@ (8002080 <HAL_RCC_OscConfig+0x270>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ed0:	4b6b      	ldr	r3, [pc, #428]	@ (8002080 <HAL_RCC_OscConfig+0x270>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	021b      	lsls	r3, r3, #8
 8001ede:	4968      	ldr	r1, [pc, #416]	@ (8002080 <HAL_RCC_OscConfig+0x270>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	604b      	str	r3, [r1, #4]
 8001ee4:	e025      	b.n	8001f32 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ee6:	4b66      	ldr	r3, [pc, #408]	@ (8002080 <HAL_RCC_OscConfig+0x270>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a65      	ldr	r2, [pc, #404]	@ (8002080 <HAL_RCC_OscConfig+0x270>)
 8001eec:	f043 0308 	orr.w	r3, r3, #8
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	4b63      	ldr	r3, [pc, #396]	@ (8002080 <HAL_RCC_OscConfig+0x270>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	4960      	ldr	r1, [pc, #384]	@ (8002080 <HAL_RCC_OscConfig+0x270>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f04:	4b5e      	ldr	r3, [pc, #376]	@ (8002080 <HAL_RCC_OscConfig+0x270>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	021b      	lsls	r3, r3, #8
 8001f12:	495b      	ldr	r1, [pc, #364]	@ (8002080 <HAL_RCC_OscConfig+0x270>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d109      	bne.n	8001f32 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 fd4c 	bl	80029c0 <RCC_SetFlashLatencyFromMSIRange>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e37a      	b.n	8002628 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f32:	f000 fc81 	bl	8002838 <HAL_RCC_GetSysClockFreq>
 8001f36:	4602      	mov	r2, r0
 8001f38:	4b51      	ldr	r3, [pc, #324]	@ (8002080 <HAL_RCC_OscConfig+0x270>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	4950      	ldr	r1, [pc, #320]	@ (8002084 <HAL_RCC_OscConfig+0x274>)
 8001f44:	5ccb      	ldrb	r3, [r1, r3]
 8001f46:	f003 031f 	and.w	r3, r3, #31
 8001f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f4e:	4a4e      	ldr	r2, [pc, #312]	@ (8002088 <HAL_RCC_OscConfig+0x278>)
 8001f50:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f52:	4b4e      	ldr	r3, [pc, #312]	@ (800208c <HAL_RCC_OscConfig+0x27c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff fbfe 	bl	8001758 <HAL_InitTick>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d052      	beq.n	800200c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
 8001f68:	e35e      	b.n	8002628 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d032      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f72:	4b43      	ldr	r3, [pc, #268]	@ (8002080 <HAL_RCC_OscConfig+0x270>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a42      	ldr	r2, [pc, #264]	@ (8002080 <HAL_RCC_OscConfig+0x270>)
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f7e:	f7ff fc3b 	bl	80017f8 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f86:	f7ff fc37 	bl	80017f8 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e347      	b.n	8002628 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f98:	4b39      	ldr	r3, [pc, #228]	@ (8002080 <HAL_RCC_OscConfig+0x270>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0f0      	beq.n	8001f86 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fa4:	4b36      	ldr	r3, [pc, #216]	@ (8002080 <HAL_RCC_OscConfig+0x270>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a35      	ldr	r2, [pc, #212]	@ (8002080 <HAL_RCC_OscConfig+0x270>)
 8001faa:	f043 0308 	orr.w	r3, r3, #8
 8001fae:	6013      	str	r3, [r2, #0]
 8001fb0:	4b33      	ldr	r3, [pc, #204]	@ (8002080 <HAL_RCC_OscConfig+0x270>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	4930      	ldr	r1, [pc, #192]	@ (8002080 <HAL_RCC_OscConfig+0x270>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fc2:	4b2f      	ldr	r3, [pc, #188]	@ (8002080 <HAL_RCC_OscConfig+0x270>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	021b      	lsls	r3, r3, #8
 8001fd0:	492b      	ldr	r1, [pc, #172]	@ (8002080 <HAL_RCC_OscConfig+0x270>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	604b      	str	r3, [r1, #4]
 8001fd6:	e01a      	b.n	800200e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fd8:	4b29      	ldr	r3, [pc, #164]	@ (8002080 <HAL_RCC_OscConfig+0x270>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a28      	ldr	r2, [pc, #160]	@ (8002080 <HAL_RCC_OscConfig+0x270>)
 8001fde:	f023 0301 	bic.w	r3, r3, #1
 8001fe2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fe4:	f7ff fc08 	bl	80017f8 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fec:	f7ff fc04 	bl	80017f8 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e314      	b.n	8002628 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ffe:	4b20      	ldr	r3, [pc, #128]	@ (8002080 <HAL_RCC_OscConfig+0x270>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f0      	bne.n	8001fec <HAL_RCC_OscConfig+0x1dc>
 800200a:	e000      	b.n	800200e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800200c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d073      	beq.n	8002102 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	2b08      	cmp	r3, #8
 800201e:	d005      	beq.n	800202c <HAL_RCC_OscConfig+0x21c>
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	2b0c      	cmp	r3, #12
 8002024:	d10e      	bne.n	8002044 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	2b03      	cmp	r3, #3
 800202a:	d10b      	bne.n	8002044 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800202c:	4b14      	ldr	r3, [pc, #80]	@ (8002080 <HAL_RCC_OscConfig+0x270>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d063      	beq.n	8002100 <HAL_RCC_OscConfig+0x2f0>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d15f      	bne.n	8002100 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e2f1      	b.n	8002628 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800204c:	d106      	bne.n	800205c <HAL_RCC_OscConfig+0x24c>
 800204e:	4b0c      	ldr	r3, [pc, #48]	@ (8002080 <HAL_RCC_OscConfig+0x270>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a0b      	ldr	r2, [pc, #44]	@ (8002080 <HAL_RCC_OscConfig+0x270>)
 8002054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	e025      	b.n	80020a8 <HAL_RCC_OscConfig+0x298>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002064:	d114      	bne.n	8002090 <HAL_RCC_OscConfig+0x280>
 8002066:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <HAL_RCC_OscConfig+0x270>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a05      	ldr	r2, [pc, #20]	@ (8002080 <HAL_RCC_OscConfig+0x270>)
 800206c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	4b03      	ldr	r3, [pc, #12]	@ (8002080 <HAL_RCC_OscConfig+0x270>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a02      	ldr	r2, [pc, #8]	@ (8002080 <HAL_RCC_OscConfig+0x270>)
 8002078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	e013      	b.n	80020a8 <HAL_RCC_OscConfig+0x298>
 8002080:	40021000 	.word	0x40021000
 8002084:	080053f0 	.word	0x080053f0
 8002088:	2000001c 	.word	0x2000001c
 800208c:	20000020 	.word	0x20000020
 8002090:	4ba0      	ldr	r3, [pc, #640]	@ (8002314 <HAL_RCC_OscConfig+0x504>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a9f      	ldr	r2, [pc, #636]	@ (8002314 <HAL_RCC_OscConfig+0x504>)
 8002096:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	4b9d      	ldr	r3, [pc, #628]	@ (8002314 <HAL_RCC_OscConfig+0x504>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a9c      	ldr	r2, [pc, #624]	@ (8002314 <HAL_RCC_OscConfig+0x504>)
 80020a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d013      	beq.n	80020d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b0:	f7ff fba2 	bl	80017f8 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b8:	f7ff fb9e 	bl	80017f8 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b64      	cmp	r3, #100	@ 0x64
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e2ae      	b.n	8002628 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ca:	4b92      	ldr	r3, [pc, #584]	@ (8002314 <HAL_RCC_OscConfig+0x504>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCC_OscConfig+0x2a8>
 80020d6:	e014      	b.n	8002102 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d8:	f7ff fb8e 	bl	80017f8 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e0:	f7ff fb8a 	bl	80017f8 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b64      	cmp	r3, #100	@ 0x64
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e29a      	b.n	8002628 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020f2:	4b88      	ldr	r3, [pc, #544]	@ (8002314 <HAL_RCC_OscConfig+0x504>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x2d0>
 80020fe:	e000      	b.n	8002102 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d060      	beq.n	80021d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	2b04      	cmp	r3, #4
 8002112:	d005      	beq.n	8002120 <HAL_RCC_OscConfig+0x310>
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	2b0c      	cmp	r3, #12
 8002118:	d119      	bne.n	800214e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	2b02      	cmp	r3, #2
 800211e:	d116      	bne.n	800214e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002120:	4b7c      	ldr	r3, [pc, #496]	@ (8002314 <HAL_RCC_OscConfig+0x504>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_RCC_OscConfig+0x328>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e277      	b.n	8002628 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002138:	4b76      	ldr	r3, [pc, #472]	@ (8002314 <HAL_RCC_OscConfig+0x504>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	061b      	lsls	r3, r3, #24
 8002146:	4973      	ldr	r1, [pc, #460]	@ (8002314 <HAL_RCC_OscConfig+0x504>)
 8002148:	4313      	orrs	r3, r2
 800214a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800214c:	e040      	b.n	80021d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d023      	beq.n	800219e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002156:	4b6f      	ldr	r3, [pc, #444]	@ (8002314 <HAL_RCC_OscConfig+0x504>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a6e      	ldr	r2, [pc, #440]	@ (8002314 <HAL_RCC_OscConfig+0x504>)
 800215c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002160:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002162:	f7ff fb49 	bl	80017f8 <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800216a:	f7ff fb45 	bl	80017f8 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e255      	b.n	8002628 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800217c:	4b65      	ldr	r3, [pc, #404]	@ (8002314 <HAL_RCC_OscConfig+0x504>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0f0      	beq.n	800216a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002188:	4b62      	ldr	r3, [pc, #392]	@ (8002314 <HAL_RCC_OscConfig+0x504>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	061b      	lsls	r3, r3, #24
 8002196:	495f      	ldr	r1, [pc, #380]	@ (8002314 <HAL_RCC_OscConfig+0x504>)
 8002198:	4313      	orrs	r3, r2
 800219a:	604b      	str	r3, [r1, #4]
 800219c:	e018      	b.n	80021d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800219e:	4b5d      	ldr	r3, [pc, #372]	@ (8002314 <HAL_RCC_OscConfig+0x504>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a5c      	ldr	r2, [pc, #368]	@ (8002314 <HAL_RCC_OscConfig+0x504>)
 80021a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021aa:	f7ff fb25 	bl	80017f8 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b2:	f7ff fb21 	bl	80017f8 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e231      	b.n	8002628 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021c4:	4b53      	ldr	r3, [pc, #332]	@ (8002314 <HAL_RCC_OscConfig+0x504>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1f0      	bne.n	80021b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0308 	and.w	r3, r3, #8
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d03c      	beq.n	8002256 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d01c      	beq.n	800221e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021e4:	4b4b      	ldr	r3, [pc, #300]	@ (8002314 <HAL_RCC_OscConfig+0x504>)
 80021e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021ea:	4a4a      	ldr	r2, [pc, #296]	@ (8002314 <HAL_RCC_OscConfig+0x504>)
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f4:	f7ff fb00 	bl	80017f8 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021fc:	f7ff fafc 	bl	80017f8 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e20c      	b.n	8002628 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800220e:	4b41      	ldr	r3, [pc, #260]	@ (8002314 <HAL_RCC_OscConfig+0x504>)
 8002210:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0ef      	beq.n	80021fc <HAL_RCC_OscConfig+0x3ec>
 800221c:	e01b      	b.n	8002256 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800221e:	4b3d      	ldr	r3, [pc, #244]	@ (8002314 <HAL_RCC_OscConfig+0x504>)
 8002220:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002224:	4a3b      	ldr	r2, [pc, #236]	@ (8002314 <HAL_RCC_OscConfig+0x504>)
 8002226:	f023 0301 	bic.w	r3, r3, #1
 800222a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222e:	f7ff fae3 	bl	80017f8 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002236:	f7ff fadf 	bl	80017f8 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e1ef      	b.n	8002628 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002248:	4b32      	ldr	r3, [pc, #200]	@ (8002314 <HAL_RCC_OscConfig+0x504>)
 800224a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1ef      	bne.n	8002236 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0304 	and.w	r3, r3, #4
 800225e:	2b00      	cmp	r3, #0
 8002260:	f000 80a6 	beq.w	80023b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002264:	2300      	movs	r3, #0
 8002266:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002268:	4b2a      	ldr	r3, [pc, #168]	@ (8002314 <HAL_RCC_OscConfig+0x504>)
 800226a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800226c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10d      	bne.n	8002290 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002274:	4b27      	ldr	r3, [pc, #156]	@ (8002314 <HAL_RCC_OscConfig+0x504>)
 8002276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002278:	4a26      	ldr	r2, [pc, #152]	@ (8002314 <HAL_RCC_OscConfig+0x504>)
 800227a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800227e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002280:	4b24      	ldr	r3, [pc, #144]	@ (8002314 <HAL_RCC_OscConfig+0x504>)
 8002282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002284:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800228c:	2301      	movs	r3, #1
 800228e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002290:	4b21      	ldr	r3, [pc, #132]	@ (8002318 <HAL_RCC_OscConfig+0x508>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002298:	2b00      	cmp	r3, #0
 800229a:	d118      	bne.n	80022ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800229c:	4b1e      	ldr	r3, [pc, #120]	@ (8002318 <HAL_RCC_OscConfig+0x508>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a1d      	ldr	r2, [pc, #116]	@ (8002318 <HAL_RCC_OscConfig+0x508>)
 80022a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022a8:	f7ff faa6 	bl	80017f8 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b0:	f7ff faa2 	bl	80017f8 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e1b2      	b.n	8002628 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022c2:	4b15      	ldr	r3, [pc, #84]	@ (8002318 <HAL_RCC_OscConfig+0x508>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d108      	bne.n	80022e8 <HAL_RCC_OscConfig+0x4d8>
 80022d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002314 <HAL_RCC_OscConfig+0x504>)
 80022d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002314 <HAL_RCC_OscConfig+0x504>)
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022e6:	e029      	b.n	800233c <HAL_RCC_OscConfig+0x52c>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	2b05      	cmp	r3, #5
 80022ee:	d115      	bne.n	800231c <HAL_RCC_OscConfig+0x50c>
 80022f0:	4b08      	ldr	r3, [pc, #32]	@ (8002314 <HAL_RCC_OscConfig+0x504>)
 80022f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022f6:	4a07      	ldr	r2, [pc, #28]	@ (8002314 <HAL_RCC_OscConfig+0x504>)
 80022f8:	f043 0304 	orr.w	r3, r3, #4
 80022fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002300:	4b04      	ldr	r3, [pc, #16]	@ (8002314 <HAL_RCC_OscConfig+0x504>)
 8002302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002306:	4a03      	ldr	r2, [pc, #12]	@ (8002314 <HAL_RCC_OscConfig+0x504>)
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002310:	e014      	b.n	800233c <HAL_RCC_OscConfig+0x52c>
 8002312:	bf00      	nop
 8002314:	40021000 	.word	0x40021000
 8002318:	40007000 	.word	0x40007000
 800231c:	4b9a      	ldr	r3, [pc, #616]	@ (8002588 <HAL_RCC_OscConfig+0x778>)
 800231e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002322:	4a99      	ldr	r2, [pc, #612]	@ (8002588 <HAL_RCC_OscConfig+0x778>)
 8002324:	f023 0301 	bic.w	r3, r3, #1
 8002328:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800232c:	4b96      	ldr	r3, [pc, #600]	@ (8002588 <HAL_RCC_OscConfig+0x778>)
 800232e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002332:	4a95      	ldr	r2, [pc, #596]	@ (8002588 <HAL_RCC_OscConfig+0x778>)
 8002334:	f023 0304 	bic.w	r3, r3, #4
 8002338:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d016      	beq.n	8002372 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002344:	f7ff fa58 	bl	80017f8 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800234a:	e00a      	b.n	8002362 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800234c:	f7ff fa54 	bl	80017f8 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800235a:	4293      	cmp	r3, r2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e162      	b.n	8002628 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002362:	4b89      	ldr	r3, [pc, #548]	@ (8002588 <HAL_RCC_OscConfig+0x778>)
 8002364:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0ed      	beq.n	800234c <HAL_RCC_OscConfig+0x53c>
 8002370:	e015      	b.n	800239e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002372:	f7ff fa41 	bl	80017f8 <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002378:	e00a      	b.n	8002390 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800237a:	f7ff fa3d 	bl	80017f8 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002388:	4293      	cmp	r3, r2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e14b      	b.n	8002628 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002390:	4b7d      	ldr	r3, [pc, #500]	@ (8002588 <HAL_RCC_OscConfig+0x778>)
 8002392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1ed      	bne.n	800237a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800239e:	7ffb      	ldrb	r3, [r7, #31]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d105      	bne.n	80023b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a4:	4b78      	ldr	r3, [pc, #480]	@ (8002588 <HAL_RCC_OscConfig+0x778>)
 80023a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a8:	4a77      	ldr	r2, [pc, #476]	@ (8002588 <HAL_RCC_OscConfig+0x778>)
 80023aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023ae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0320 	and.w	r3, r3, #32
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d03c      	beq.n	8002436 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d01c      	beq.n	80023fe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023c4:	4b70      	ldr	r3, [pc, #448]	@ (8002588 <HAL_RCC_OscConfig+0x778>)
 80023c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023ca:	4a6f      	ldr	r2, [pc, #444]	@ (8002588 <HAL_RCC_OscConfig+0x778>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d4:	f7ff fa10 	bl	80017f8 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023dc:	f7ff fa0c 	bl	80017f8 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e11c      	b.n	8002628 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023ee:	4b66      	ldr	r3, [pc, #408]	@ (8002588 <HAL_RCC_OscConfig+0x778>)
 80023f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0ef      	beq.n	80023dc <HAL_RCC_OscConfig+0x5cc>
 80023fc:	e01b      	b.n	8002436 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023fe:	4b62      	ldr	r3, [pc, #392]	@ (8002588 <HAL_RCC_OscConfig+0x778>)
 8002400:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002404:	4a60      	ldr	r2, [pc, #384]	@ (8002588 <HAL_RCC_OscConfig+0x778>)
 8002406:	f023 0301 	bic.w	r3, r3, #1
 800240a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240e:	f7ff f9f3 	bl	80017f8 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002416:	f7ff f9ef 	bl	80017f8 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e0ff      	b.n	8002628 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002428:	4b57      	ldr	r3, [pc, #348]	@ (8002588 <HAL_RCC_OscConfig+0x778>)
 800242a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1ef      	bne.n	8002416 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 80f3 	beq.w	8002626 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002444:	2b02      	cmp	r3, #2
 8002446:	f040 80c9 	bne.w	80025dc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800244a:	4b4f      	ldr	r3, [pc, #316]	@ (8002588 <HAL_RCC_OscConfig+0x778>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	f003 0203 	and.w	r2, r3, #3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800245a:	429a      	cmp	r2, r3
 800245c:	d12c      	bne.n	80024b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002468:	3b01      	subs	r3, #1
 800246a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800246c:	429a      	cmp	r2, r3
 800246e:	d123      	bne.n	80024b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800247a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800247c:	429a      	cmp	r2, r3
 800247e:	d11b      	bne.n	80024b8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800248a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800248c:	429a      	cmp	r2, r3
 800248e:	d113      	bne.n	80024b8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800249a:	085b      	lsrs	r3, r3, #1
 800249c:	3b01      	subs	r3, #1
 800249e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d109      	bne.n	80024b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ae:	085b      	lsrs	r3, r3, #1
 80024b0:	3b01      	subs	r3, #1
 80024b2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d06b      	beq.n	8002590 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	2b0c      	cmp	r3, #12
 80024bc:	d062      	beq.n	8002584 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80024be:	4b32      	ldr	r3, [pc, #200]	@ (8002588 <HAL_RCC_OscConfig+0x778>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e0ac      	b.n	8002628 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80024ce:	4b2e      	ldr	r3, [pc, #184]	@ (8002588 <HAL_RCC_OscConfig+0x778>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a2d      	ldr	r2, [pc, #180]	@ (8002588 <HAL_RCC_OscConfig+0x778>)
 80024d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024d8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024da:	f7ff f98d 	bl	80017f8 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e2:	f7ff f989 	bl	80017f8 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e099      	b.n	8002628 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024f4:	4b24      	ldr	r3, [pc, #144]	@ (8002588 <HAL_RCC_OscConfig+0x778>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1f0      	bne.n	80024e2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002500:	4b21      	ldr	r3, [pc, #132]	@ (8002588 <HAL_RCC_OscConfig+0x778>)
 8002502:	68da      	ldr	r2, [r3, #12]
 8002504:	4b21      	ldr	r3, [pc, #132]	@ (800258c <HAL_RCC_OscConfig+0x77c>)
 8002506:	4013      	ands	r3, r2
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002510:	3a01      	subs	r2, #1
 8002512:	0112      	lsls	r2, r2, #4
 8002514:	4311      	orrs	r1, r2
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800251a:	0212      	lsls	r2, r2, #8
 800251c:	4311      	orrs	r1, r2
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002522:	0852      	lsrs	r2, r2, #1
 8002524:	3a01      	subs	r2, #1
 8002526:	0552      	lsls	r2, r2, #21
 8002528:	4311      	orrs	r1, r2
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800252e:	0852      	lsrs	r2, r2, #1
 8002530:	3a01      	subs	r2, #1
 8002532:	0652      	lsls	r2, r2, #25
 8002534:	4311      	orrs	r1, r2
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800253a:	06d2      	lsls	r2, r2, #27
 800253c:	430a      	orrs	r2, r1
 800253e:	4912      	ldr	r1, [pc, #72]	@ (8002588 <HAL_RCC_OscConfig+0x778>)
 8002540:	4313      	orrs	r3, r2
 8002542:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002544:	4b10      	ldr	r3, [pc, #64]	@ (8002588 <HAL_RCC_OscConfig+0x778>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a0f      	ldr	r2, [pc, #60]	@ (8002588 <HAL_RCC_OscConfig+0x778>)
 800254a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800254e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002550:	4b0d      	ldr	r3, [pc, #52]	@ (8002588 <HAL_RCC_OscConfig+0x778>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	4a0c      	ldr	r2, [pc, #48]	@ (8002588 <HAL_RCC_OscConfig+0x778>)
 8002556:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800255a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800255c:	f7ff f94c 	bl	80017f8 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002564:	f7ff f948 	bl	80017f8 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e058      	b.n	8002628 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002576:	4b04      	ldr	r3, [pc, #16]	@ (8002588 <HAL_RCC_OscConfig+0x778>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0f0      	beq.n	8002564 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002582:	e050      	b.n	8002626 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e04f      	b.n	8002628 <HAL_RCC_OscConfig+0x818>
 8002588:	40021000 	.word	0x40021000
 800258c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002590:	4b27      	ldr	r3, [pc, #156]	@ (8002630 <HAL_RCC_OscConfig+0x820>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d144      	bne.n	8002626 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800259c:	4b24      	ldr	r3, [pc, #144]	@ (8002630 <HAL_RCC_OscConfig+0x820>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a23      	ldr	r2, [pc, #140]	@ (8002630 <HAL_RCC_OscConfig+0x820>)
 80025a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025a8:	4b21      	ldr	r3, [pc, #132]	@ (8002630 <HAL_RCC_OscConfig+0x820>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	4a20      	ldr	r2, [pc, #128]	@ (8002630 <HAL_RCC_OscConfig+0x820>)
 80025ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025b4:	f7ff f920 	bl	80017f8 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025bc:	f7ff f91c 	bl	80017f8 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e02c      	b.n	8002628 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ce:	4b18      	ldr	r3, [pc, #96]	@ (8002630 <HAL_RCC_OscConfig+0x820>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0f0      	beq.n	80025bc <HAL_RCC_OscConfig+0x7ac>
 80025da:	e024      	b.n	8002626 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	2b0c      	cmp	r3, #12
 80025e0:	d01f      	beq.n	8002622 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e2:	4b13      	ldr	r3, [pc, #76]	@ (8002630 <HAL_RCC_OscConfig+0x820>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a12      	ldr	r2, [pc, #72]	@ (8002630 <HAL_RCC_OscConfig+0x820>)
 80025e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ee:	f7ff f903 	bl	80017f8 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f6:	f7ff f8ff 	bl	80017f8 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e00f      	b.n	8002628 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002608:	4b09      	ldr	r3, [pc, #36]	@ (8002630 <HAL_RCC_OscConfig+0x820>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1f0      	bne.n	80025f6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002614:	4b06      	ldr	r3, [pc, #24]	@ (8002630 <HAL_RCC_OscConfig+0x820>)
 8002616:	68da      	ldr	r2, [r3, #12]
 8002618:	4905      	ldr	r1, [pc, #20]	@ (8002630 <HAL_RCC_OscConfig+0x820>)
 800261a:	4b06      	ldr	r3, [pc, #24]	@ (8002634 <HAL_RCC_OscConfig+0x824>)
 800261c:	4013      	ands	r3, r2
 800261e:	60cb      	str	r3, [r1, #12]
 8002620:	e001      	b.n	8002626 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e000      	b.n	8002628 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3720      	adds	r7, #32
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40021000 	.word	0x40021000
 8002634:	feeefffc 	.word	0xfeeefffc

08002638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e0e7      	b.n	800281c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800264c:	4b75      	ldr	r3, [pc, #468]	@ (8002824 <HAL_RCC_ClockConfig+0x1ec>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d910      	bls.n	800267c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265a:	4b72      	ldr	r3, [pc, #456]	@ (8002824 <HAL_RCC_ClockConfig+0x1ec>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f023 0207 	bic.w	r2, r3, #7
 8002662:	4970      	ldr	r1, [pc, #448]	@ (8002824 <HAL_RCC_ClockConfig+0x1ec>)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	4313      	orrs	r3, r2
 8002668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800266a:	4b6e      	ldr	r3, [pc, #440]	@ (8002824 <HAL_RCC_ClockConfig+0x1ec>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d001      	beq.n	800267c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e0cf      	b.n	800281c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d010      	beq.n	80026aa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	4b66      	ldr	r3, [pc, #408]	@ (8002828 <HAL_RCC_ClockConfig+0x1f0>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002694:	429a      	cmp	r2, r3
 8002696:	d908      	bls.n	80026aa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002698:	4b63      	ldr	r3, [pc, #396]	@ (8002828 <HAL_RCC_ClockConfig+0x1f0>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	4960      	ldr	r1, [pc, #384]	@ (8002828 <HAL_RCC_ClockConfig+0x1f0>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d04c      	beq.n	8002750 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b03      	cmp	r3, #3
 80026bc:	d107      	bne.n	80026ce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026be:	4b5a      	ldr	r3, [pc, #360]	@ (8002828 <HAL_RCC_ClockConfig+0x1f0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d121      	bne.n	800270e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e0a6      	b.n	800281c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d107      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026d6:	4b54      	ldr	r3, [pc, #336]	@ (8002828 <HAL_RCC_ClockConfig+0x1f0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d115      	bne.n	800270e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e09a      	b.n	800281c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d107      	bne.n	80026fe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026ee:	4b4e      	ldr	r3, [pc, #312]	@ (8002828 <HAL_RCC_ClockConfig+0x1f0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d109      	bne.n	800270e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e08e      	b.n	800281c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026fe:	4b4a      	ldr	r3, [pc, #296]	@ (8002828 <HAL_RCC_ClockConfig+0x1f0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e086      	b.n	800281c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800270e:	4b46      	ldr	r3, [pc, #280]	@ (8002828 <HAL_RCC_ClockConfig+0x1f0>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f023 0203 	bic.w	r2, r3, #3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	4943      	ldr	r1, [pc, #268]	@ (8002828 <HAL_RCC_ClockConfig+0x1f0>)
 800271c:	4313      	orrs	r3, r2
 800271e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002720:	f7ff f86a 	bl	80017f8 <HAL_GetTick>
 8002724:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002726:	e00a      	b.n	800273e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002728:	f7ff f866 	bl	80017f8 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002736:	4293      	cmp	r3, r2
 8002738:	d901      	bls.n	800273e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e06e      	b.n	800281c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273e:	4b3a      	ldr	r3, [pc, #232]	@ (8002828 <HAL_RCC_ClockConfig+0x1f0>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 020c 	and.w	r2, r3, #12
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	429a      	cmp	r2, r3
 800274e:	d1eb      	bne.n	8002728 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d010      	beq.n	800277e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	4b31      	ldr	r3, [pc, #196]	@ (8002828 <HAL_RCC_ClockConfig+0x1f0>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002768:	429a      	cmp	r2, r3
 800276a:	d208      	bcs.n	800277e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800276c:	4b2e      	ldr	r3, [pc, #184]	@ (8002828 <HAL_RCC_ClockConfig+0x1f0>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	492b      	ldr	r1, [pc, #172]	@ (8002828 <HAL_RCC_ClockConfig+0x1f0>)
 800277a:	4313      	orrs	r3, r2
 800277c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800277e:	4b29      	ldr	r3, [pc, #164]	@ (8002824 <HAL_RCC_ClockConfig+0x1ec>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	429a      	cmp	r2, r3
 800278a:	d210      	bcs.n	80027ae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278c:	4b25      	ldr	r3, [pc, #148]	@ (8002824 <HAL_RCC_ClockConfig+0x1ec>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f023 0207 	bic.w	r2, r3, #7
 8002794:	4923      	ldr	r1, [pc, #140]	@ (8002824 <HAL_RCC_ClockConfig+0x1ec>)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	4313      	orrs	r3, r2
 800279a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800279c:	4b21      	ldr	r3, [pc, #132]	@ (8002824 <HAL_RCC_ClockConfig+0x1ec>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d001      	beq.n	80027ae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e036      	b.n	800281c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d008      	beq.n	80027cc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002828 <HAL_RCC_ClockConfig+0x1f0>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	4918      	ldr	r1, [pc, #96]	@ (8002828 <HAL_RCC_ClockConfig+0x1f0>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0308 	and.w	r3, r3, #8
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d009      	beq.n	80027ec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027d8:	4b13      	ldr	r3, [pc, #76]	@ (8002828 <HAL_RCC_ClockConfig+0x1f0>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	4910      	ldr	r1, [pc, #64]	@ (8002828 <HAL_RCC_ClockConfig+0x1f0>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027ec:	f000 f824 	bl	8002838 <HAL_RCC_GetSysClockFreq>
 80027f0:	4602      	mov	r2, r0
 80027f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002828 <HAL_RCC_ClockConfig+0x1f0>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	091b      	lsrs	r3, r3, #4
 80027f8:	f003 030f 	and.w	r3, r3, #15
 80027fc:	490b      	ldr	r1, [pc, #44]	@ (800282c <HAL_RCC_ClockConfig+0x1f4>)
 80027fe:	5ccb      	ldrb	r3, [r1, r3]
 8002800:	f003 031f 	and.w	r3, r3, #31
 8002804:	fa22 f303 	lsr.w	r3, r2, r3
 8002808:	4a09      	ldr	r2, [pc, #36]	@ (8002830 <HAL_RCC_ClockConfig+0x1f8>)
 800280a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800280c:	4b09      	ldr	r3, [pc, #36]	@ (8002834 <HAL_RCC_ClockConfig+0x1fc>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f7fe ffa1 	bl	8001758 <HAL_InitTick>
 8002816:	4603      	mov	r3, r0
 8002818:	72fb      	strb	r3, [r7, #11]

  return status;
 800281a:	7afb      	ldrb	r3, [r7, #11]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40022000 	.word	0x40022000
 8002828:	40021000 	.word	0x40021000
 800282c:	080053f0 	.word	0x080053f0
 8002830:	2000001c 	.word	0x2000001c
 8002834:	20000020 	.word	0x20000020

08002838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002838:	b480      	push	{r7}
 800283a:	b089      	sub	sp, #36	@ 0x24
 800283c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800283e:	2300      	movs	r3, #0
 8002840:	61fb      	str	r3, [r7, #28]
 8002842:	2300      	movs	r3, #0
 8002844:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002846:	4b3e      	ldr	r3, [pc, #248]	@ (8002940 <HAL_RCC_GetSysClockFreq+0x108>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 030c 	and.w	r3, r3, #12
 800284e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002850:	4b3b      	ldr	r3, [pc, #236]	@ (8002940 <HAL_RCC_GetSysClockFreq+0x108>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	f003 0303 	and.w	r3, r3, #3
 8002858:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d005      	beq.n	800286c <HAL_RCC_GetSysClockFreq+0x34>
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	2b0c      	cmp	r3, #12
 8002864:	d121      	bne.n	80028aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d11e      	bne.n	80028aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800286c:	4b34      	ldr	r3, [pc, #208]	@ (8002940 <HAL_RCC_GetSysClockFreq+0x108>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0308 	and.w	r3, r3, #8
 8002874:	2b00      	cmp	r3, #0
 8002876:	d107      	bne.n	8002888 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002878:	4b31      	ldr	r3, [pc, #196]	@ (8002940 <HAL_RCC_GetSysClockFreq+0x108>)
 800287a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800287e:	0a1b      	lsrs	r3, r3, #8
 8002880:	f003 030f 	and.w	r3, r3, #15
 8002884:	61fb      	str	r3, [r7, #28]
 8002886:	e005      	b.n	8002894 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002888:	4b2d      	ldr	r3, [pc, #180]	@ (8002940 <HAL_RCC_GetSysClockFreq+0x108>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	091b      	lsrs	r3, r3, #4
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002894:	4a2b      	ldr	r2, [pc, #172]	@ (8002944 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800289c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10d      	bne.n	80028c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028a8:	e00a      	b.n	80028c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	d102      	bne.n	80028b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028b0:	4b25      	ldr	r3, [pc, #148]	@ (8002948 <HAL_RCC_GetSysClockFreq+0x110>)
 80028b2:	61bb      	str	r3, [r7, #24]
 80028b4:	e004      	b.n	80028c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d101      	bne.n	80028c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028bc:	4b23      	ldr	r3, [pc, #140]	@ (800294c <HAL_RCC_GetSysClockFreq+0x114>)
 80028be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	2b0c      	cmp	r3, #12
 80028c4:	d134      	bne.n	8002930 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002940 <HAL_RCC_GetSysClockFreq+0x108>)
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d003      	beq.n	80028de <HAL_RCC_GetSysClockFreq+0xa6>
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d003      	beq.n	80028e4 <HAL_RCC_GetSysClockFreq+0xac>
 80028dc:	e005      	b.n	80028ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80028de:	4b1a      	ldr	r3, [pc, #104]	@ (8002948 <HAL_RCC_GetSysClockFreq+0x110>)
 80028e0:	617b      	str	r3, [r7, #20]
      break;
 80028e2:	e005      	b.n	80028f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80028e4:	4b19      	ldr	r3, [pc, #100]	@ (800294c <HAL_RCC_GetSysClockFreq+0x114>)
 80028e6:	617b      	str	r3, [r7, #20]
      break;
 80028e8:	e002      	b.n	80028f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	617b      	str	r3, [r7, #20]
      break;
 80028ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028f0:	4b13      	ldr	r3, [pc, #76]	@ (8002940 <HAL_RCC_GetSysClockFreq+0x108>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	091b      	lsrs	r3, r3, #4
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	3301      	adds	r3, #1
 80028fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80028fe:	4b10      	ldr	r3, [pc, #64]	@ (8002940 <HAL_RCC_GetSysClockFreq+0x108>)
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	0a1b      	lsrs	r3, r3, #8
 8002904:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	fb03 f202 	mul.w	r2, r3, r2
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	fbb2 f3f3 	udiv	r3, r2, r3
 8002914:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002916:	4b0a      	ldr	r3, [pc, #40]	@ (8002940 <HAL_RCC_GetSysClockFreq+0x108>)
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	0e5b      	lsrs	r3, r3, #25
 800291c:	f003 0303 	and.w	r3, r3, #3
 8002920:	3301      	adds	r3, #1
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	fbb2 f3f3 	udiv	r3, r2, r3
 800292e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002930:	69bb      	ldr	r3, [r7, #24]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3724      	adds	r7, #36	@ 0x24
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	40021000 	.word	0x40021000
 8002944:	08005408 	.word	0x08005408
 8002948:	00f42400 	.word	0x00f42400
 800294c:	007a1200 	.word	0x007a1200

08002950 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002954:	4b03      	ldr	r3, [pc, #12]	@ (8002964 <HAL_RCC_GetHCLKFreq+0x14>)
 8002956:	681b      	ldr	r3, [r3, #0]
}
 8002958:	4618      	mov	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	2000001c 	.word	0x2000001c

08002968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800296c:	f7ff fff0 	bl	8002950 <HAL_RCC_GetHCLKFreq>
 8002970:	4602      	mov	r2, r0
 8002972:	4b06      	ldr	r3, [pc, #24]	@ (800298c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	0a1b      	lsrs	r3, r3, #8
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	4904      	ldr	r1, [pc, #16]	@ (8002990 <HAL_RCC_GetPCLK1Freq+0x28>)
 800297e:	5ccb      	ldrb	r3, [r1, r3]
 8002980:	f003 031f 	and.w	r3, r3, #31
 8002984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002988:	4618      	mov	r0, r3
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40021000 	.word	0x40021000
 8002990:	08005400 	.word	0x08005400

08002994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002998:	f7ff ffda 	bl	8002950 <HAL_RCC_GetHCLKFreq>
 800299c:	4602      	mov	r2, r0
 800299e:	4b06      	ldr	r3, [pc, #24]	@ (80029b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	0adb      	lsrs	r3, r3, #11
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	4904      	ldr	r1, [pc, #16]	@ (80029bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80029aa:	5ccb      	ldrb	r3, [r1, r3]
 80029ac:	f003 031f 	and.w	r3, r3, #31
 80029b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40021000 	.word	0x40021000
 80029bc:	08005400 	.word	0x08005400

080029c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029c8:	2300      	movs	r3, #0
 80029ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002a78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80029d8:	f7ff f9b6 	bl	8001d48 <HAL_PWREx_GetVoltageRange>
 80029dc:	6178      	str	r0, [r7, #20]
 80029de:	e014      	b.n	8002a0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029e0:	4b25      	ldr	r3, [pc, #148]	@ (8002a78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e4:	4a24      	ldr	r2, [pc, #144]	@ (8002a78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80029ec:	4b22      	ldr	r3, [pc, #136]	@ (8002a78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80029f8:	f7ff f9a6 	bl	8001d48 <HAL_PWREx_GetVoltageRange>
 80029fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80029fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002a78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a02:	4a1d      	ldr	r2, [pc, #116]	@ (8002a78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a08:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a10:	d10b      	bne.n	8002a2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b80      	cmp	r3, #128	@ 0x80
 8002a16:	d919      	bls.n	8002a4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2ba0      	cmp	r3, #160	@ 0xa0
 8002a1c:	d902      	bls.n	8002a24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a1e:	2302      	movs	r3, #2
 8002a20:	613b      	str	r3, [r7, #16]
 8002a22:	e013      	b.n	8002a4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a24:	2301      	movs	r3, #1
 8002a26:	613b      	str	r3, [r7, #16]
 8002a28:	e010      	b.n	8002a4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b80      	cmp	r3, #128	@ 0x80
 8002a2e:	d902      	bls.n	8002a36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a30:	2303      	movs	r3, #3
 8002a32:	613b      	str	r3, [r7, #16]
 8002a34:	e00a      	b.n	8002a4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b80      	cmp	r3, #128	@ 0x80
 8002a3a:	d102      	bne.n	8002a42 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	613b      	str	r3, [r7, #16]
 8002a40:	e004      	b.n	8002a4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b70      	cmp	r3, #112	@ 0x70
 8002a46:	d101      	bne.n	8002a4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a48:	2301      	movs	r3, #1
 8002a4a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f023 0207 	bic.w	r2, r3, #7
 8002a54:	4909      	ldr	r1, [pc, #36]	@ (8002a7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a5c:	4b07      	ldr	r3, [pc, #28]	@ (8002a7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0307 	and.w	r3, r3, #7
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d001      	beq.n	8002a6e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e000      	b.n	8002a70 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3718      	adds	r7, #24
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40022000 	.word	0x40022000

08002a80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a88:	2300      	movs	r3, #0
 8002a8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d031      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aa0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002aa4:	d01a      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002aa6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002aaa:	d814      	bhi.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d009      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ab0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ab4:	d10f      	bne.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002ab6:	4b5d      	ldr	r3, [pc, #372]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	4a5c      	ldr	r2, [pc, #368]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ac0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ac2:	e00c      	b.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3304      	adds	r3, #4
 8002ac8:	2100      	movs	r1, #0
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 f9de 	bl	8002e8c <RCCEx_PLLSAI1_Config>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ad4:	e003      	b.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	74fb      	strb	r3, [r7, #19]
      break;
 8002ada:	e000      	b.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002adc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ade:	7cfb      	ldrb	r3, [r7, #19]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10b      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ae4:	4b51      	ldr	r3, [pc, #324]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002af2:	494e      	ldr	r1, [pc, #312]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002afa:	e001      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002afc:	7cfb      	ldrb	r3, [r7, #19]
 8002afe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 809e 	beq.w	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b12:	4b46      	ldr	r3, [pc, #280]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002b22:	2300      	movs	r3, #0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00d      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b28:	4b40      	ldr	r3, [pc, #256]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b2c:	4a3f      	ldr	r2, [pc, #252]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b32:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b34:	4b3d      	ldr	r3, [pc, #244]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b40:	2301      	movs	r3, #1
 8002b42:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b44:	4b3a      	ldr	r3, [pc, #232]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a39      	ldr	r2, [pc, #228]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b50:	f7fe fe52 	bl	80017f8 <HAL_GetTick>
 8002b54:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b56:	e009      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b58:	f7fe fe4e 	bl	80017f8 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d902      	bls.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	74fb      	strb	r3, [r7, #19]
        break;
 8002b6a:	e005      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b6c:	4b30      	ldr	r3, [pc, #192]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0ef      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002b78:	7cfb      	ldrb	r3, [r7, #19]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d15a      	bne.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b7e:	4b2b      	ldr	r3, [pc, #172]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b88:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d01e      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d019      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b9a:	4b24      	ldr	r3, [pc, #144]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ba0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ba4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ba6:	4b21      	ldr	r3, [pc, #132]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bac:	4a1f      	ldr	r2, [pc, #124]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bb2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bbc:	4a1b      	ldr	r2, [pc, #108]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bc2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002bc6:	4a19      	ldr	r2, [pc, #100]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d016      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd8:	f7fe fe0e 	bl	80017f8 <HAL_GetTick>
 8002bdc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bde:	e00b      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be0:	f7fe fe0a 	bl	80017f8 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d902      	bls.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	74fb      	strb	r3, [r7, #19]
            break;
 8002bf6:	e006      	b.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0ec      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002c06:	7cfb      	ldrb	r3, [r7, #19]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10b      	bne.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c0c:	4b07      	ldr	r3, [pc, #28]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c12:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c1a:	4904      	ldr	r1, [pc, #16]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002c22:	e009      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c24:	7cfb      	ldrb	r3, [r7, #19]
 8002c26:	74bb      	strb	r3, [r7, #18]
 8002c28:	e006      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002c2a:	bf00      	nop
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c34:	7cfb      	ldrb	r3, [r7, #19]
 8002c36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c38:	7c7b      	ldrb	r3, [r7, #17]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d105      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c3e:	4b8a      	ldr	r3, [pc, #552]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c42:	4a89      	ldr	r2, [pc, #548]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c48:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00a      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c56:	4b84      	ldr	r3, [pc, #528]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c5c:	f023 0203 	bic.w	r2, r3, #3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	4980      	ldr	r1, [pc, #512]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00a      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c78:	4b7b      	ldr	r3, [pc, #492]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c7e:	f023 020c 	bic.w	r2, r3, #12
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c86:	4978      	ldr	r1, [pc, #480]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0320 	and.w	r3, r3, #32
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00a      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c9a:	4b73      	ldr	r3, [pc, #460]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca8:	496f      	ldr	r1, [pc, #444]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00a      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cbc:	4b6a      	ldr	r3, [pc, #424]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc2:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cca:	4967      	ldr	r1, [pc, #412]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00a      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cde:	4b62      	ldr	r3, [pc, #392]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ce4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cec:	495e      	ldr	r1, [pc, #376]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00a      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d00:	4b59      	ldr	r3, [pc, #356]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d06:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d0e:	4956      	ldr	r1, [pc, #344]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00a      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d22:	4b51      	ldr	r3, [pc, #324]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d28:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d30:	494d      	ldr	r1, [pc, #308]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d028      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d44:	4b48      	ldr	r3, [pc, #288]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d4a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d52:	4945      	ldr	r1, [pc, #276]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d62:	d106      	bne.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d64:	4b40      	ldr	r3, [pc, #256]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	4a3f      	ldr	r2, [pc, #252]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d6e:	60d3      	str	r3, [r2, #12]
 8002d70:	e011      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d7a:	d10c      	bne.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3304      	adds	r3, #4
 8002d80:	2101      	movs	r1, #1
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 f882 	bl	8002e8c <RCCEx_PLLSAI1_Config>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d8c:	7cfb      	ldrb	r3, [r7, #19]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002d92:	7cfb      	ldrb	r3, [r7, #19]
 8002d94:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d028      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002da2:	4b31      	ldr	r3, [pc, #196]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002da8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db0:	492d      	ldr	r1, [pc, #180]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002dc0:	d106      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dc2:	4b29      	ldr	r3, [pc, #164]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	4a28      	ldr	r2, [pc, #160]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dc8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dcc:	60d3      	str	r3, [r2, #12]
 8002dce:	e011      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002dd8:	d10c      	bne.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	3304      	adds	r3, #4
 8002dde:	2101      	movs	r1, #1
 8002de0:	4618      	mov	r0, r3
 8002de2:	f000 f853 	bl	8002e8c <RCCEx_PLLSAI1_Config>
 8002de6:	4603      	mov	r3, r0
 8002de8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dea:	7cfb      	ldrb	r3, [r7, #19]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002df0:	7cfb      	ldrb	r3, [r7, #19]
 8002df2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d01c      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e00:	4b19      	ldr	r3, [pc, #100]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e06:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e0e:	4916      	ldr	r1, [pc, #88]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e1e:	d10c      	bne.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3304      	adds	r3, #4
 8002e24:	2102      	movs	r1, #2
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 f830 	bl	8002e8c <RCCEx_PLLSAI1_Config>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e30:	7cfb      	ldrb	r3, [r7, #19]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002e36:	7cfb      	ldrb	r3, [r7, #19]
 8002e38:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e46:	4b08      	ldr	r3, [pc, #32]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e4c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e54:	4904      	ldr	r1, [pc, #16]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e5c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3718      	adds	r7, #24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40021000 	.word	0x40021000

08002e6c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002e70:	4b05      	ldr	r3, [pc, #20]	@ (8002e88 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a04      	ldr	r2, [pc, #16]	@ (8002e88 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002e76:	f043 0304 	orr.w	r3, r3, #4
 8002e7a:	6013      	str	r3, [r2, #0]
}
 8002e7c:	bf00      	nop
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	40021000 	.word	0x40021000

08002e8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e96:	2300      	movs	r3, #0
 8002e98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e9a:	4b74      	ldr	r3, [pc, #464]	@ (800306c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d018      	beq.n	8002ed8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ea6:	4b71      	ldr	r3, [pc, #452]	@ (800306c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	f003 0203 	and.w	r2, r3, #3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d10d      	bne.n	8002ed2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
       ||
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d009      	beq.n	8002ed2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ebe:	4b6b      	ldr	r3, [pc, #428]	@ (800306c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	091b      	lsrs	r3, r3, #4
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	1c5a      	adds	r2, r3, #1
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
       ||
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d047      	beq.n	8002f62 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	73fb      	strb	r3, [r7, #15]
 8002ed6:	e044      	b.n	8002f62 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b03      	cmp	r3, #3
 8002ede:	d018      	beq.n	8002f12 <RCCEx_PLLSAI1_Config+0x86>
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	d825      	bhi.n	8002f30 <RCCEx_PLLSAI1_Config+0xa4>
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d002      	beq.n	8002eee <RCCEx_PLLSAI1_Config+0x62>
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d009      	beq.n	8002f00 <RCCEx_PLLSAI1_Config+0x74>
 8002eec:	e020      	b.n	8002f30 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002eee:	4b5f      	ldr	r3, [pc, #380]	@ (800306c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d11d      	bne.n	8002f36 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002efe:	e01a      	b.n	8002f36 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f00:	4b5a      	ldr	r3, [pc, #360]	@ (800306c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d116      	bne.n	8002f3a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f10:	e013      	b.n	8002f3a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f12:	4b56      	ldr	r3, [pc, #344]	@ (800306c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10f      	bne.n	8002f3e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f1e:	4b53      	ldr	r3, [pc, #332]	@ (800306c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d109      	bne.n	8002f3e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f2e:	e006      	b.n	8002f3e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	73fb      	strb	r3, [r7, #15]
      break;
 8002f34:	e004      	b.n	8002f40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f36:	bf00      	nop
 8002f38:	e002      	b.n	8002f40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f3a:	bf00      	nop
 8002f3c:	e000      	b.n	8002f40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10d      	bne.n	8002f62 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f46:	4b49      	ldr	r3, [pc, #292]	@ (800306c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6819      	ldr	r1, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	3b01      	subs	r3, #1
 8002f58:	011b      	lsls	r3, r3, #4
 8002f5a:	430b      	orrs	r3, r1
 8002f5c:	4943      	ldr	r1, [pc, #268]	@ (800306c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f62:	7bfb      	ldrb	r3, [r7, #15]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d17c      	bne.n	8003062 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f68:	4b40      	ldr	r3, [pc, #256]	@ (800306c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a3f      	ldr	r2, [pc, #252]	@ (800306c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f6e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002f72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f74:	f7fe fc40 	bl	80017f8 <HAL_GetTick>
 8002f78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f7a:	e009      	b.n	8002f90 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f7c:	f7fe fc3c 	bl	80017f8 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d902      	bls.n	8002f90 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	73fb      	strb	r3, [r7, #15]
        break;
 8002f8e:	e005      	b.n	8002f9c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f90:	4b36      	ldr	r3, [pc, #216]	@ (800306c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1ef      	bne.n	8002f7c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f9c:	7bfb      	ldrb	r3, [r7, #15]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d15f      	bne.n	8003062 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d110      	bne.n	8002fca <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fa8:	4b30      	ldr	r3, [pc, #192]	@ (800306c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002fb0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6892      	ldr	r2, [r2, #8]
 8002fb8:	0211      	lsls	r1, r2, #8
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	68d2      	ldr	r2, [r2, #12]
 8002fbe:	06d2      	lsls	r2, r2, #27
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	492a      	ldr	r1, [pc, #168]	@ (800306c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	610b      	str	r3, [r1, #16]
 8002fc8:	e027      	b.n	800301a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d112      	bne.n	8002ff6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fd0:	4b26      	ldr	r3, [pc, #152]	@ (800306c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002fd8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6892      	ldr	r2, [r2, #8]
 8002fe0:	0211      	lsls	r1, r2, #8
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6912      	ldr	r2, [r2, #16]
 8002fe6:	0852      	lsrs	r2, r2, #1
 8002fe8:	3a01      	subs	r2, #1
 8002fea:	0552      	lsls	r2, r2, #21
 8002fec:	430a      	orrs	r2, r1
 8002fee:	491f      	ldr	r1, [pc, #124]	@ (800306c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	610b      	str	r3, [r1, #16]
 8002ff4:	e011      	b.n	800301a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800306c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002ffe:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6892      	ldr	r2, [r2, #8]
 8003006:	0211      	lsls	r1, r2, #8
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6952      	ldr	r2, [r2, #20]
 800300c:	0852      	lsrs	r2, r2, #1
 800300e:	3a01      	subs	r2, #1
 8003010:	0652      	lsls	r2, r2, #25
 8003012:	430a      	orrs	r2, r1
 8003014:	4915      	ldr	r1, [pc, #84]	@ (800306c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003016:	4313      	orrs	r3, r2
 8003018:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800301a:	4b14      	ldr	r3, [pc, #80]	@ (800306c <RCCEx_PLLSAI1_Config+0x1e0>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a13      	ldr	r2, [pc, #76]	@ (800306c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003020:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003024:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003026:	f7fe fbe7 	bl	80017f8 <HAL_GetTick>
 800302a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800302c:	e009      	b.n	8003042 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800302e:	f7fe fbe3 	bl	80017f8 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d902      	bls.n	8003042 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	73fb      	strb	r3, [r7, #15]
          break;
 8003040:	e005      	b.n	800304e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003042:	4b0a      	ldr	r3, [pc, #40]	@ (800306c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0ef      	beq.n	800302e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800304e:	7bfb      	ldrb	r3, [r7, #15]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d106      	bne.n	8003062 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003054:	4b05      	ldr	r3, [pc, #20]	@ (800306c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003056:	691a      	ldr	r2, [r3, #16]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	4903      	ldr	r1, [pc, #12]	@ (800306c <RCCEx_PLLSAI1_Config+0x1e0>)
 800305e:	4313      	orrs	r3, r2
 8003060:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003062:	7bfb      	ldrb	r3, [r7, #15]
}
 8003064:	4618      	mov	r0, r3
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	40021000 	.word	0x40021000

08003070 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e095      	b.n	80031ae <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003086:	2b00      	cmp	r3, #0
 8003088:	d108      	bne.n	800309c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003092:	d009      	beq.n	80030a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	61da      	str	r2, [r3, #28]
 800309a:	e005      	b.n	80030a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d106      	bne.n	80030c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7fe f9ce 	bl	8001464 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2202      	movs	r2, #2
 80030cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80030e8:	d902      	bls.n	80030f0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80030ea:	2300      	movs	r3, #0
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	e002      	b.n	80030f6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80030f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030f4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80030fe:	d007      	beq.n	8003110 <HAL_SPI_Init+0xa0>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003108:	d002      	beq.n	8003110 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003120:	431a      	orrs	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	431a      	orrs	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003148:	431a      	orrs	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003152:	ea42 0103 	orr.w	r1, r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800315a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	0c1b      	lsrs	r3, r3, #16
 800316c:	f003 0204 	and.w	r2, r3, #4
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003174:	f003 0310 	and.w	r3, r3, #16
 8003178:	431a      	orrs	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800318c:	ea42 0103 	orr.w	r1, r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b088      	sub	sp, #32
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	60f8      	str	r0, [r7, #12]
 80031be:	60b9      	str	r1, [r7, #8]
 80031c0:	603b      	str	r3, [r7, #0]
 80031c2:	4613      	mov	r3, r2
 80031c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d101      	bne.n	80031d8 <HAL_SPI_Transmit+0x22>
 80031d4:	2302      	movs	r3, #2
 80031d6:	e15f      	b.n	8003498 <HAL_SPI_Transmit+0x2e2>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031e0:	f7fe fb0a 	bl	80017f8 <HAL_GetTick>
 80031e4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80031e6:	88fb      	ldrh	r3, [r7, #6]
 80031e8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d002      	beq.n	80031fc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80031f6:	2302      	movs	r3, #2
 80031f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031fa:	e148      	b.n	800348e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d002      	beq.n	8003208 <HAL_SPI_Transmit+0x52>
 8003202:	88fb      	ldrh	r3, [r7, #6]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d102      	bne.n	800320e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800320c:	e13f      	b.n	800348e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2203      	movs	r2, #3
 8003212:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	88fa      	ldrh	r2, [r7, #6]
 8003226:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	88fa      	ldrh	r2, [r7, #6]
 800322c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003258:	d10f      	bne.n	800327a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003268:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003278:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003284:	2b40      	cmp	r3, #64	@ 0x40
 8003286:	d007      	beq.n	8003298 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003296:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80032a0:	d94f      	bls.n	8003342 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <HAL_SPI_Transmit+0xfa>
 80032aa:	8afb      	ldrh	r3, [r7, #22]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d142      	bne.n	8003336 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b4:	881a      	ldrh	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c0:	1c9a      	adds	r2, r3, #2
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032d4:	e02f      	b.n	8003336 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d112      	bne.n	800330a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e8:	881a      	ldrh	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f4:	1c9a      	adds	r2, r3, #2
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032fe:	b29b      	uxth	r3, r3
 8003300:	3b01      	subs	r3, #1
 8003302:	b29a      	uxth	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003308:	e015      	b.n	8003336 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800330a:	f7fe fa75 	bl	80017f8 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d803      	bhi.n	8003322 <HAL_SPI_Transmit+0x16c>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003320:	d102      	bne.n	8003328 <HAL_SPI_Transmit+0x172>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d106      	bne.n	8003336 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003334:	e0ab      	b.n	800348e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800333a:	b29b      	uxth	r3, r3
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1ca      	bne.n	80032d6 <HAL_SPI_Transmit+0x120>
 8003340:	e080      	b.n	8003444 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <HAL_SPI_Transmit+0x19a>
 800334a:	8afb      	ldrh	r3, [r7, #22]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d174      	bne.n	800343a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003354:	b29b      	uxth	r3, r3
 8003356:	2b01      	cmp	r3, #1
 8003358:	d912      	bls.n	8003380 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800335e:	881a      	ldrh	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800336a:	1c9a      	adds	r2, r3, #2
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003374:	b29b      	uxth	r3, r3
 8003376:	3b02      	subs	r3, #2
 8003378:	b29a      	uxth	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800337e:	e05c      	b.n	800343a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	330c      	adds	r3, #12
 800338a:	7812      	ldrb	r2, [r2, #0]
 800338c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003392:	1c5a      	adds	r2, r3, #1
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800339c:	b29b      	uxth	r3, r3
 800339e:	3b01      	subs	r3, #1
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80033a6:	e048      	b.n	800343a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d12b      	bne.n	800340e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d912      	bls.n	80033e6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c4:	881a      	ldrh	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d0:	1c9a      	adds	r2, r3, #2
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3b02      	subs	r3, #2
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80033e4:	e029      	b.n	800343a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	330c      	adds	r3, #12
 80033f0:	7812      	ldrb	r2, [r2, #0]
 80033f2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f8:	1c5a      	adds	r2, r3, #1
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003402:	b29b      	uxth	r3, r3
 8003404:	3b01      	subs	r3, #1
 8003406:	b29a      	uxth	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800340c:	e015      	b.n	800343a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800340e:	f7fe f9f3 	bl	80017f8 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d803      	bhi.n	8003426 <HAL_SPI_Transmit+0x270>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003424:	d102      	bne.n	800342c <HAL_SPI_Transmit+0x276>
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d106      	bne.n	800343a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003438:	e029      	b.n	800348e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800343e:	b29b      	uxth	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1b1      	bne.n	80033a8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	6839      	ldr	r1, [r7, #0]
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 fcf9 	bl	8003e40 <SPI_EndRxTxTransaction>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d002      	beq.n	800345a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2220      	movs	r2, #32
 8003458:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10a      	bne.n	8003478 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003462:	2300      	movs	r3, #0
 8003464:	613b      	str	r3, [r7, #16]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	613b      	str	r3, [r7, #16]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	613b      	str	r3, [r7, #16]
 8003476:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	77fb      	strb	r3, [r7, #31]
 8003484:	e003      	b.n	800348e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003496:	7ffb      	ldrb	r3, [r7, #31]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3720      	adds	r7, #32
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af02      	add	r7, sp, #8
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	4613      	mov	r3, r2
 80034ae:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d002      	beq.n	80034c6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80034c0:	2302      	movs	r3, #2
 80034c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034c4:	e11a      	b.n	80036fc <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034ce:	d112      	bne.n	80034f6 <HAL_SPI_Receive+0x56>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10e      	bne.n	80034f6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2204      	movs	r2, #4
 80034dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80034e0:	88fa      	ldrh	r2, [r7, #6]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	4613      	mov	r3, r2
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	68b9      	ldr	r1, [r7, #8]
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 f90e 	bl	800370e <HAL_SPI_TransmitReceive>
 80034f2:	4603      	mov	r3, r0
 80034f4:	e107      	b.n	8003706 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d101      	bne.n	8003504 <HAL_SPI_Receive+0x64>
 8003500:	2302      	movs	r3, #2
 8003502:	e100      	b.n	8003706 <HAL_SPI_Receive+0x266>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800350c:	f7fe f974 	bl	80017f8 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d002      	beq.n	800351e <HAL_SPI_Receive+0x7e>
 8003518:	88fb      	ldrh	r3, [r7, #6]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d102      	bne.n	8003524 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003522:	e0eb      	b.n	80036fc <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2204      	movs	r2, #4
 8003528:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	88fa      	ldrh	r2, [r7, #6]
 800353c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	88fa      	ldrh	r2, [r7, #6]
 8003544:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800356e:	d908      	bls.n	8003582 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800357e:	605a      	str	r2, [r3, #4]
 8003580:	e007      	b.n	8003592 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003590:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800359a:	d10f      	bne.n	80035bc <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80035ba:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035c6:	2b40      	cmp	r3, #64	@ 0x40
 80035c8:	d007      	beq.n	80035da <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035d8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80035e2:	d86f      	bhi.n	80036c4 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80035e4:	e034      	b.n	8003650 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d117      	bne.n	8003624 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f103 020c 	add.w	r2, r3, #12
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003600:	7812      	ldrb	r2, [r2, #0]
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003616:	b29b      	uxth	r3, r3
 8003618:	3b01      	subs	r3, #1
 800361a:	b29a      	uxth	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003622:	e015      	b.n	8003650 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003624:	f7fe f8e8 	bl	80017f8 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	429a      	cmp	r2, r3
 8003632:	d803      	bhi.n	800363c <HAL_SPI_Receive+0x19c>
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363a:	d102      	bne.n	8003642 <HAL_SPI_Receive+0x1a2>
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d106      	bne.n	8003650 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800364e:	e055      	b.n	80036fc <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003656:	b29b      	uxth	r3, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1c4      	bne.n	80035e6 <HAL_SPI_Receive+0x146>
 800365c:	e038      	b.n	80036d0 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b01      	cmp	r3, #1
 800366a:	d115      	bne.n	8003698 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003676:	b292      	uxth	r2, r2
 8003678:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367e:	1c9a      	adds	r2, r3, #2
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800368a:	b29b      	uxth	r3, r3
 800368c:	3b01      	subs	r3, #1
 800368e:	b29a      	uxth	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003696:	e015      	b.n	80036c4 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003698:	f7fe f8ae 	bl	80017f8 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d803      	bhi.n	80036b0 <HAL_SPI_Receive+0x210>
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ae:	d102      	bne.n	80036b6 <HAL_SPI_Receive+0x216>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d106      	bne.n	80036c4 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80036c2:	e01b      	b.n	80036fc <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1c6      	bne.n	800365e <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	6839      	ldr	r1, [r7, #0]
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f000 fb5b 	bl	8003d90 <SPI_EndRxTransaction>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d002      	beq.n	80036e6 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2220      	movs	r2, #32
 80036e4:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d002      	beq.n	80036f4 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	75fb      	strb	r3, [r7, #23]
 80036f2:	e003      	b.n	80036fc <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003704:	7dfb      	ldrb	r3, [r7, #23]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b08a      	sub	sp, #40	@ 0x28
 8003712:	af00      	add	r7, sp, #0
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	607a      	str	r2, [r7, #4]
 800371a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800371c:	2301      	movs	r3, #1
 800371e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003720:	2300      	movs	r3, #0
 8003722:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_SPI_TransmitReceive+0x26>
 8003730:	2302      	movs	r3, #2
 8003732:	e20a      	b.n	8003b4a <HAL_SPI_TransmitReceive+0x43c>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800373c:	f7fe f85c 	bl	80017f8 <HAL_GetTick>
 8003740:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003748:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003750:	887b      	ldrh	r3, [r7, #2]
 8003752:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003754:	887b      	ldrh	r3, [r7, #2]
 8003756:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003758:	7efb      	ldrb	r3, [r7, #27]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d00e      	beq.n	800377c <HAL_SPI_TransmitReceive+0x6e>
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003764:	d106      	bne.n	8003774 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d102      	bne.n	8003774 <HAL_SPI_TransmitReceive+0x66>
 800376e:	7efb      	ldrb	r3, [r7, #27]
 8003770:	2b04      	cmp	r3, #4
 8003772:	d003      	beq.n	800377c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003774:	2302      	movs	r3, #2
 8003776:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800377a:	e1e0      	b.n	8003b3e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d005      	beq.n	800378e <HAL_SPI_TransmitReceive+0x80>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d002      	beq.n	800378e <HAL_SPI_TransmitReceive+0x80>
 8003788:	887b      	ldrh	r3, [r7, #2]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d103      	bne.n	8003796 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003794:	e1d3      	b.n	8003b3e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d003      	beq.n	80037aa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2205      	movs	r2, #5
 80037a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	887a      	ldrh	r2, [r7, #2]
 80037ba:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	887a      	ldrh	r2, [r7, #2]
 80037c2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	887a      	ldrh	r2, [r7, #2]
 80037d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	887a      	ldrh	r2, [r7, #2]
 80037d6:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80037ec:	d802      	bhi.n	80037f4 <HAL_SPI_TransmitReceive+0xe6>
 80037ee:	8a3b      	ldrh	r3, [r7, #16]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d908      	bls.n	8003806 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003802:	605a      	str	r2, [r3, #4]
 8003804:	e007      	b.n	8003816 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003814:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003820:	2b40      	cmp	r3, #64	@ 0x40
 8003822:	d007      	beq.n	8003834 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003832:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800383c:	f240 8081 	bls.w	8003942 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <HAL_SPI_TransmitReceive+0x140>
 8003848:	8a7b      	ldrh	r3, [r7, #18]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d16d      	bne.n	800392a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003852:	881a      	ldrh	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800385e:	1c9a      	adds	r2, r3, #2
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003868:	b29b      	uxth	r3, r3
 800386a:	3b01      	subs	r3, #1
 800386c:	b29a      	uxth	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003872:	e05a      	b.n	800392a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b02      	cmp	r3, #2
 8003880:	d11b      	bne.n	80038ba <HAL_SPI_TransmitReceive+0x1ac>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003886:	b29b      	uxth	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	d016      	beq.n	80038ba <HAL_SPI_TransmitReceive+0x1ac>
 800388c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388e:	2b01      	cmp	r3, #1
 8003890:	d113      	bne.n	80038ba <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003896:	881a      	ldrh	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a2:	1c9a      	adds	r2, r3, #2
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	3b01      	subs	r3, #1
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038b6:	2300      	movs	r3, #0
 80038b8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d11c      	bne.n	8003902 <HAL_SPI_TransmitReceive+0x1f4>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d016      	beq.n	8003902 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68da      	ldr	r2, [r3, #12]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038de:	b292      	uxth	r2, r2
 80038e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e6:	1c9a      	adds	r2, r3, #2
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038fe:	2301      	movs	r3, #1
 8003900:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003902:	f7fd ff79 	bl	80017f8 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800390e:	429a      	cmp	r2, r3
 8003910:	d80b      	bhi.n	800392a <HAL_SPI_TransmitReceive+0x21c>
 8003912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003918:	d007      	beq.n	800392a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003928:	e109      	b.n	8003b3e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800392e:	b29b      	uxth	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	d19f      	bne.n	8003874 <HAL_SPI_TransmitReceive+0x166>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800393a:	b29b      	uxth	r3, r3
 800393c:	2b00      	cmp	r3, #0
 800393e:	d199      	bne.n	8003874 <HAL_SPI_TransmitReceive+0x166>
 8003940:	e0e3      	b.n	8003b0a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_SPI_TransmitReceive+0x244>
 800394a:	8a7b      	ldrh	r3, [r7, #18]
 800394c:	2b01      	cmp	r3, #1
 800394e:	f040 80cf 	bne.w	8003af0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003956:	b29b      	uxth	r3, r3
 8003958:	2b01      	cmp	r3, #1
 800395a:	d912      	bls.n	8003982 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003960:	881a      	ldrh	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800396c:	1c9a      	adds	r2, r3, #2
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003976:	b29b      	uxth	r3, r3
 8003978:	3b02      	subs	r3, #2
 800397a:	b29a      	uxth	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003980:	e0b6      	b.n	8003af0 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	330c      	adds	r3, #12
 800398c:	7812      	ldrb	r2, [r2, #0]
 800398e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039a8:	e0a2      	b.n	8003af0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d134      	bne.n	8003a22 <HAL_SPI_TransmitReceive+0x314>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039bc:	b29b      	uxth	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d02f      	beq.n	8003a22 <HAL_SPI_TransmitReceive+0x314>
 80039c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d12c      	bne.n	8003a22 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d912      	bls.n	80039f8 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039d6:	881a      	ldrh	r2, [r3, #0]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e2:	1c9a      	adds	r2, r3, #2
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	3b02      	subs	r3, #2
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80039f6:	e012      	b.n	8003a1e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	330c      	adds	r3, #12
 8003a02:	7812      	ldrb	r2, [r2, #0]
 8003a04:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d148      	bne.n	8003ac2 <HAL_SPI_TransmitReceive+0x3b4>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d042      	beq.n	8003ac2 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d923      	bls.n	8003a90 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68da      	ldr	r2, [r3, #12]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a52:	b292      	uxth	r2, r2
 8003a54:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5a:	1c9a      	adds	r2, r3, #2
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	3b02      	subs	r3, #2
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d81f      	bhi.n	8003abe <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003a8c:	605a      	str	r2, [r3, #4]
 8003a8e:	e016      	b.n	8003abe <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f103 020c 	add.w	r2, r3, #12
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9c:	7812      	ldrb	r2, [r2, #0]
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ac2:	f7fd fe99 	bl	80017f8 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d803      	bhi.n	8003ada <HAL_SPI_TransmitReceive+0x3cc>
 8003ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad8:	d102      	bne.n	8003ae0 <HAL_SPI_TransmitReceive+0x3d2>
 8003ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d107      	bne.n	8003af0 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003aee:	e026      	b.n	8003b3e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f47f af57 	bne.w	80039aa <HAL_SPI_TransmitReceive+0x29c>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f47f af50 	bne.w	80039aa <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b0a:	69fa      	ldr	r2, [r7, #28]
 8003b0c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 f996 	bl	8003e40 <SPI_EndRxTxTransaction>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d005      	beq.n	8003b26 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2220      	movs	r2, #32
 8003b24:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b34:	e003      	b.n	8003b3e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003b46:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3728      	adds	r7, #40	@ 0x28
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b088      	sub	sp, #32
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	603b      	str	r3, [r7, #0]
 8003b60:	4613      	mov	r3, r2
 8003b62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b64:	f7fd fe48 	bl	80017f8 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b6c:	1a9b      	subs	r3, r3, r2
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	4413      	add	r3, r2
 8003b72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b74:	f7fd fe40 	bl	80017f8 <HAL_GetTick>
 8003b78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b7a:	4b39      	ldr	r3, [pc, #228]	@ (8003c60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	015b      	lsls	r3, r3, #5
 8003b80:	0d1b      	lsrs	r3, r3, #20
 8003b82:	69fa      	ldr	r2, [r7, #28]
 8003b84:	fb02 f303 	mul.w	r3, r2, r3
 8003b88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b8a:	e054      	b.n	8003c36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b92:	d050      	beq.n	8003c36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b94:	f7fd fe30 	bl	80017f8 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	69fa      	ldr	r2, [r7, #28]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d902      	bls.n	8003baa <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d13d      	bne.n	8003c26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003bb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bc2:	d111      	bne.n	8003be8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bcc:	d004      	beq.n	8003bd8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bd6:	d107      	bne.n	8003be8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003be6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bf0:	d10f      	bne.n	8003c12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e017      	b.n	8003c56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	bf0c      	ite	eq
 8003c46:	2301      	moveq	r3, #1
 8003c48:	2300      	movne	r3, #0
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	79fb      	ldrb	r3, [r7, #7]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d19b      	bne.n	8003b8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3720      	adds	r7, #32
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	2000001c 	.word	0x2000001c

08003c64 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b08a      	sub	sp, #40	@ 0x28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
 8003c70:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003c72:	2300      	movs	r3, #0
 8003c74:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003c76:	f7fd fdbf 	bl	80017f8 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c7e:	1a9b      	subs	r3, r3, r2
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	4413      	add	r3, r2
 8003c84:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003c86:	f7fd fdb7 	bl	80017f8 <HAL_GetTick>
 8003c8a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	330c      	adds	r3, #12
 8003c92:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003c94:	4b3d      	ldr	r3, [pc, #244]	@ (8003d8c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4413      	add	r3, r2
 8003c9e:	00da      	lsls	r2, r3, #3
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	0d1b      	lsrs	r3, r3, #20
 8003ca4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ca6:	fb02 f303 	mul.w	r3, r2, r3
 8003caa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003cac:	e060      	b.n	8003d70 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003cb4:	d107      	bne.n	8003cc6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d104      	bne.n	8003cc6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003cc4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ccc:	d050      	beq.n	8003d70 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003cce:	f7fd fd93 	bl	80017f8 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	6a3b      	ldr	r3, [r7, #32]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d902      	bls.n	8003ce4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d13d      	bne.n	8003d60 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003cf2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cfc:	d111      	bne.n	8003d22 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d06:	d004      	beq.n	8003d12 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d10:	d107      	bne.n	8003d22 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d20:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d2a:	d10f      	bne.n	8003d4c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d4a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e010      	b.n	8003d82 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d196      	bne.n	8003cae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3728      	adds	r7, #40	@ 0x28
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	2000001c 	.word	0x2000001c

08003d90 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af02      	add	r7, sp, #8
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003da4:	d111      	bne.n	8003dca <SPI_EndRxTransaction+0x3a>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dae:	d004      	beq.n	8003dba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003db8:	d107      	bne.n	8003dca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dc8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	2180      	movs	r1, #128	@ 0x80
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f7ff febd 	bl	8003b54 <SPI_WaitFlagStateUntilTimeout>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d007      	beq.n	8003df0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003de4:	f043 0220 	orr.w	r2, r3, #32
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e023      	b.n	8003e38 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003df8:	d11d      	bne.n	8003e36 <SPI_EndRxTransaction+0xa6>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e02:	d004      	beq.n	8003e0e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e0c:	d113      	bne.n	8003e36 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f7ff ff22 	bl	8003c64 <SPI_WaitFifoStateUntilTimeout>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d007      	beq.n	8003e36 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e2a:	f043 0220 	orr.w	r2, r3, #32
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e000      	b.n	8003e38 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af02      	add	r7, sp, #8
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	9300      	str	r3, [sp, #0]
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f7ff ff03 	bl	8003c64 <SPI_WaitFifoStateUntilTimeout>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d007      	beq.n	8003e74 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e68:	f043 0220 	orr.w	r2, r3, #32
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e027      	b.n	8003ec4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	2180      	movs	r1, #128	@ 0x80
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f7ff fe68 	bl	8003b54 <SPI_WaitFlagStateUntilTimeout>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d007      	beq.n	8003e9a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e8e:	f043 0220 	orr.w	r2, r3, #32
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e014      	b.n	8003ec4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f7ff fedc 	bl	8003c64 <SPI_WaitFifoStateUntilTimeout>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d007      	beq.n	8003ec2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eb6:	f043 0220 	orr.w	r2, r3, #32
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e000      	b.n	8003ec4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e040      	b.n	8003f60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d106      	bne.n	8003ef4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7fd fafa 	bl	80014e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2224      	movs	r2, #36	@ 0x24
 8003ef8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 0201 	bic.w	r2, r2, #1
 8003f08:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 fade 	bl	80044d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 f8af 	bl	800407c <UART_SetConfig>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d101      	bne.n	8003f28 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e01b      	b.n	8003f60 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0201 	orr.w	r2, r2, #1
 8003f56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 fb5d 	bl	8004618 <UART_CheckIdleState>
 8003f5e:	4603      	mov	r3, r0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3708      	adds	r7, #8
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b08a      	sub	sp, #40	@ 0x28
 8003f6c:	af02      	add	r7, sp, #8
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	603b      	str	r3, [r7, #0]
 8003f74:	4613      	mov	r3, r2
 8003f76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f7c:	2b20      	cmp	r3, #32
 8003f7e:	d177      	bne.n	8004070 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <HAL_UART_Transmit+0x24>
 8003f86:	88fb      	ldrh	r3, [r7, #6]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e070      	b.n	8004072 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2221      	movs	r2, #33	@ 0x21
 8003f9c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f9e:	f7fd fc2b 	bl	80017f8 <HAL_GetTick>
 8003fa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	88fa      	ldrh	r2, [r7, #6]
 8003fa8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	88fa      	ldrh	r2, [r7, #6]
 8003fb0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fbc:	d108      	bne.n	8003fd0 <HAL_UART_Transmit+0x68>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d104      	bne.n	8003fd0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	61bb      	str	r3, [r7, #24]
 8003fce:	e003      	b.n	8003fd8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fd8:	e02f      	b.n	800403a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	2180      	movs	r1, #128	@ 0x80
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 fbbf 	bl	8004768 <UART_WaitOnFlagUntilTimeout>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d004      	beq.n	8003ffa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e03b      	b.n	8004072 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10b      	bne.n	8004018 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	881a      	ldrh	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800400c:	b292      	uxth	r2, r2
 800400e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	3302      	adds	r3, #2
 8004014:	61bb      	str	r3, [r7, #24]
 8004016:	e007      	b.n	8004028 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	781a      	ldrb	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	3301      	adds	r3, #1
 8004026:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b01      	subs	r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004040:	b29b      	uxth	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1c9      	bne.n	8003fda <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	2200      	movs	r2, #0
 800404e:	2140      	movs	r1, #64	@ 0x40
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f000 fb89 	bl	8004768 <UART_WaitOnFlagUntilTimeout>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d004      	beq.n	8004066 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2220      	movs	r2, #32
 8004060:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e005      	b.n	8004072 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2220      	movs	r2, #32
 800406a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800406c:	2300      	movs	r3, #0
 800406e:	e000      	b.n	8004072 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004070:	2302      	movs	r3, #2
  }
}
 8004072:	4618      	mov	r0, r3
 8004074:	3720      	adds	r7, #32
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
	...

0800407c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800407c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004080:	b08a      	sub	sp, #40	@ 0x28
 8004082:	af00      	add	r7, sp, #0
 8004084:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004086:	2300      	movs	r3, #0
 8004088:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	431a      	orrs	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	431a      	orrs	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	69db      	ldr	r3, [r3, #28]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	4bb4      	ldr	r3, [pc, #720]	@ (800437c <UART_SetConfig+0x300>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	6812      	ldr	r2, [r2, #0]
 80040b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80040b4:	430b      	orrs	r3, r1
 80040b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	68da      	ldr	r2, [r3, #12]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4aa9      	ldr	r2, [pc, #676]	@ (8004380 <UART_SetConfig+0x304>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d004      	beq.n	80040e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040e4:	4313      	orrs	r3, r2
 80040e6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040f8:	430a      	orrs	r2, r1
 80040fa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4aa0      	ldr	r2, [pc, #640]	@ (8004384 <UART_SetConfig+0x308>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d126      	bne.n	8004154 <UART_SetConfig+0xd8>
 8004106:	4ba0      	ldr	r3, [pc, #640]	@ (8004388 <UART_SetConfig+0x30c>)
 8004108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800410c:	f003 0303 	and.w	r3, r3, #3
 8004110:	2b03      	cmp	r3, #3
 8004112:	d81b      	bhi.n	800414c <UART_SetConfig+0xd0>
 8004114:	a201      	add	r2, pc, #4	@ (adr r2, 800411c <UART_SetConfig+0xa0>)
 8004116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411a:	bf00      	nop
 800411c:	0800412d 	.word	0x0800412d
 8004120:	0800413d 	.word	0x0800413d
 8004124:	08004135 	.word	0x08004135
 8004128:	08004145 	.word	0x08004145
 800412c:	2301      	movs	r3, #1
 800412e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004132:	e080      	b.n	8004236 <UART_SetConfig+0x1ba>
 8004134:	2302      	movs	r3, #2
 8004136:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800413a:	e07c      	b.n	8004236 <UART_SetConfig+0x1ba>
 800413c:	2304      	movs	r3, #4
 800413e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004142:	e078      	b.n	8004236 <UART_SetConfig+0x1ba>
 8004144:	2308      	movs	r3, #8
 8004146:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800414a:	e074      	b.n	8004236 <UART_SetConfig+0x1ba>
 800414c:	2310      	movs	r3, #16
 800414e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004152:	e070      	b.n	8004236 <UART_SetConfig+0x1ba>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a8c      	ldr	r2, [pc, #560]	@ (800438c <UART_SetConfig+0x310>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d138      	bne.n	80041d0 <UART_SetConfig+0x154>
 800415e:	4b8a      	ldr	r3, [pc, #552]	@ (8004388 <UART_SetConfig+0x30c>)
 8004160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004164:	f003 030c 	and.w	r3, r3, #12
 8004168:	2b0c      	cmp	r3, #12
 800416a:	d82d      	bhi.n	80041c8 <UART_SetConfig+0x14c>
 800416c:	a201      	add	r2, pc, #4	@ (adr r2, 8004174 <UART_SetConfig+0xf8>)
 800416e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004172:	bf00      	nop
 8004174:	080041a9 	.word	0x080041a9
 8004178:	080041c9 	.word	0x080041c9
 800417c:	080041c9 	.word	0x080041c9
 8004180:	080041c9 	.word	0x080041c9
 8004184:	080041b9 	.word	0x080041b9
 8004188:	080041c9 	.word	0x080041c9
 800418c:	080041c9 	.word	0x080041c9
 8004190:	080041c9 	.word	0x080041c9
 8004194:	080041b1 	.word	0x080041b1
 8004198:	080041c9 	.word	0x080041c9
 800419c:	080041c9 	.word	0x080041c9
 80041a0:	080041c9 	.word	0x080041c9
 80041a4:	080041c1 	.word	0x080041c1
 80041a8:	2300      	movs	r3, #0
 80041aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041ae:	e042      	b.n	8004236 <UART_SetConfig+0x1ba>
 80041b0:	2302      	movs	r3, #2
 80041b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041b6:	e03e      	b.n	8004236 <UART_SetConfig+0x1ba>
 80041b8:	2304      	movs	r3, #4
 80041ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041be:	e03a      	b.n	8004236 <UART_SetConfig+0x1ba>
 80041c0:	2308      	movs	r3, #8
 80041c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041c6:	e036      	b.n	8004236 <UART_SetConfig+0x1ba>
 80041c8:	2310      	movs	r3, #16
 80041ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041ce:	e032      	b.n	8004236 <UART_SetConfig+0x1ba>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a6a      	ldr	r2, [pc, #424]	@ (8004380 <UART_SetConfig+0x304>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d12a      	bne.n	8004230 <UART_SetConfig+0x1b4>
 80041da:	4b6b      	ldr	r3, [pc, #428]	@ (8004388 <UART_SetConfig+0x30c>)
 80041dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80041e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80041e8:	d01a      	beq.n	8004220 <UART_SetConfig+0x1a4>
 80041ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80041ee:	d81b      	bhi.n	8004228 <UART_SetConfig+0x1ac>
 80041f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041f4:	d00c      	beq.n	8004210 <UART_SetConfig+0x194>
 80041f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041fa:	d815      	bhi.n	8004228 <UART_SetConfig+0x1ac>
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <UART_SetConfig+0x18c>
 8004200:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004204:	d008      	beq.n	8004218 <UART_SetConfig+0x19c>
 8004206:	e00f      	b.n	8004228 <UART_SetConfig+0x1ac>
 8004208:	2300      	movs	r3, #0
 800420a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800420e:	e012      	b.n	8004236 <UART_SetConfig+0x1ba>
 8004210:	2302      	movs	r3, #2
 8004212:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004216:	e00e      	b.n	8004236 <UART_SetConfig+0x1ba>
 8004218:	2304      	movs	r3, #4
 800421a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800421e:	e00a      	b.n	8004236 <UART_SetConfig+0x1ba>
 8004220:	2308      	movs	r3, #8
 8004222:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004226:	e006      	b.n	8004236 <UART_SetConfig+0x1ba>
 8004228:	2310      	movs	r3, #16
 800422a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800422e:	e002      	b.n	8004236 <UART_SetConfig+0x1ba>
 8004230:	2310      	movs	r3, #16
 8004232:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a51      	ldr	r2, [pc, #324]	@ (8004380 <UART_SetConfig+0x304>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d17a      	bne.n	8004336 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004240:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004244:	2b08      	cmp	r3, #8
 8004246:	d824      	bhi.n	8004292 <UART_SetConfig+0x216>
 8004248:	a201      	add	r2, pc, #4	@ (adr r2, 8004250 <UART_SetConfig+0x1d4>)
 800424a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800424e:	bf00      	nop
 8004250:	08004275 	.word	0x08004275
 8004254:	08004293 	.word	0x08004293
 8004258:	0800427d 	.word	0x0800427d
 800425c:	08004293 	.word	0x08004293
 8004260:	08004283 	.word	0x08004283
 8004264:	08004293 	.word	0x08004293
 8004268:	08004293 	.word	0x08004293
 800426c:	08004293 	.word	0x08004293
 8004270:	0800428b 	.word	0x0800428b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004274:	f7fe fb78 	bl	8002968 <HAL_RCC_GetPCLK1Freq>
 8004278:	61f8      	str	r0, [r7, #28]
        break;
 800427a:	e010      	b.n	800429e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800427c:	4b44      	ldr	r3, [pc, #272]	@ (8004390 <UART_SetConfig+0x314>)
 800427e:	61fb      	str	r3, [r7, #28]
        break;
 8004280:	e00d      	b.n	800429e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004282:	f7fe fad9 	bl	8002838 <HAL_RCC_GetSysClockFreq>
 8004286:	61f8      	str	r0, [r7, #28]
        break;
 8004288:	e009      	b.n	800429e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800428a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800428e:	61fb      	str	r3, [r7, #28]
        break;
 8004290:	e005      	b.n	800429e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004292:	2300      	movs	r3, #0
 8004294:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800429c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 8107 	beq.w	80044b4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	4613      	mov	r3, r2
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	4413      	add	r3, r2
 80042b0:	69fa      	ldr	r2, [r7, #28]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d305      	bcc.n	80042c2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80042bc:	69fa      	ldr	r2, [r7, #28]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d903      	bls.n	80042ca <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80042c8:	e0f4      	b.n	80044b4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	2200      	movs	r2, #0
 80042ce:	461c      	mov	r4, r3
 80042d0:	4615      	mov	r5, r2
 80042d2:	f04f 0200 	mov.w	r2, #0
 80042d6:	f04f 0300 	mov.w	r3, #0
 80042da:	022b      	lsls	r3, r5, #8
 80042dc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80042e0:	0222      	lsls	r2, r4, #8
 80042e2:	68f9      	ldr	r1, [r7, #12]
 80042e4:	6849      	ldr	r1, [r1, #4]
 80042e6:	0849      	lsrs	r1, r1, #1
 80042e8:	2000      	movs	r0, #0
 80042ea:	4688      	mov	r8, r1
 80042ec:	4681      	mov	r9, r0
 80042ee:	eb12 0a08 	adds.w	sl, r2, r8
 80042f2:	eb43 0b09 	adc.w	fp, r3, r9
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	603b      	str	r3, [r7, #0]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004304:	4650      	mov	r0, sl
 8004306:	4659      	mov	r1, fp
 8004308:	f7fb ffb2 	bl	8000270 <__aeabi_uldivmod>
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	4613      	mov	r3, r2
 8004312:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800431a:	d308      	bcc.n	800432e <UART_SetConfig+0x2b2>
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004322:	d204      	bcs.n	800432e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	60da      	str	r2, [r3, #12]
 800432c:	e0c2      	b.n	80044b4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004334:	e0be      	b.n	80044b4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800433e:	d16a      	bne.n	8004416 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004340:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004344:	2b08      	cmp	r3, #8
 8004346:	d834      	bhi.n	80043b2 <UART_SetConfig+0x336>
 8004348:	a201      	add	r2, pc, #4	@ (adr r2, 8004350 <UART_SetConfig+0x2d4>)
 800434a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434e:	bf00      	nop
 8004350:	08004375 	.word	0x08004375
 8004354:	08004395 	.word	0x08004395
 8004358:	0800439d 	.word	0x0800439d
 800435c:	080043b3 	.word	0x080043b3
 8004360:	080043a3 	.word	0x080043a3
 8004364:	080043b3 	.word	0x080043b3
 8004368:	080043b3 	.word	0x080043b3
 800436c:	080043b3 	.word	0x080043b3
 8004370:	080043ab 	.word	0x080043ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004374:	f7fe faf8 	bl	8002968 <HAL_RCC_GetPCLK1Freq>
 8004378:	61f8      	str	r0, [r7, #28]
        break;
 800437a:	e020      	b.n	80043be <UART_SetConfig+0x342>
 800437c:	efff69f3 	.word	0xefff69f3
 8004380:	40008000 	.word	0x40008000
 8004384:	40013800 	.word	0x40013800
 8004388:	40021000 	.word	0x40021000
 800438c:	40004400 	.word	0x40004400
 8004390:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004394:	f7fe fafe 	bl	8002994 <HAL_RCC_GetPCLK2Freq>
 8004398:	61f8      	str	r0, [r7, #28]
        break;
 800439a:	e010      	b.n	80043be <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800439c:	4b4c      	ldr	r3, [pc, #304]	@ (80044d0 <UART_SetConfig+0x454>)
 800439e:	61fb      	str	r3, [r7, #28]
        break;
 80043a0:	e00d      	b.n	80043be <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043a2:	f7fe fa49 	bl	8002838 <HAL_RCC_GetSysClockFreq>
 80043a6:	61f8      	str	r0, [r7, #28]
        break;
 80043a8:	e009      	b.n	80043be <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043ae:	61fb      	str	r3, [r7, #28]
        break;
 80043b0:	e005      	b.n	80043be <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80043b2:	2300      	movs	r3, #0
 80043b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80043bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d077      	beq.n	80044b4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	005a      	lsls	r2, r3, #1
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	085b      	lsrs	r3, r3, #1
 80043ce:	441a      	add	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	2b0f      	cmp	r3, #15
 80043de:	d916      	bls.n	800440e <UART_SetConfig+0x392>
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043e6:	d212      	bcs.n	800440e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	f023 030f 	bic.w	r3, r3, #15
 80043f0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	085b      	lsrs	r3, r3, #1
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	f003 0307 	and.w	r3, r3, #7
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	8afb      	ldrh	r3, [r7, #22]
 8004400:	4313      	orrs	r3, r2
 8004402:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	8afa      	ldrh	r2, [r7, #22]
 800440a:	60da      	str	r2, [r3, #12]
 800440c:	e052      	b.n	80044b4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004414:	e04e      	b.n	80044b4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004416:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800441a:	2b08      	cmp	r3, #8
 800441c:	d827      	bhi.n	800446e <UART_SetConfig+0x3f2>
 800441e:	a201      	add	r2, pc, #4	@ (adr r2, 8004424 <UART_SetConfig+0x3a8>)
 8004420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004424:	08004449 	.word	0x08004449
 8004428:	08004451 	.word	0x08004451
 800442c:	08004459 	.word	0x08004459
 8004430:	0800446f 	.word	0x0800446f
 8004434:	0800445f 	.word	0x0800445f
 8004438:	0800446f 	.word	0x0800446f
 800443c:	0800446f 	.word	0x0800446f
 8004440:	0800446f 	.word	0x0800446f
 8004444:	08004467 	.word	0x08004467
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004448:	f7fe fa8e 	bl	8002968 <HAL_RCC_GetPCLK1Freq>
 800444c:	61f8      	str	r0, [r7, #28]
        break;
 800444e:	e014      	b.n	800447a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004450:	f7fe faa0 	bl	8002994 <HAL_RCC_GetPCLK2Freq>
 8004454:	61f8      	str	r0, [r7, #28]
        break;
 8004456:	e010      	b.n	800447a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004458:	4b1d      	ldr	r3, [pc, #116]	@ (80044d0 <UART_SetConfig+0x454>)
 800445a:	61fb      	str	r3, [r7, #28]
        break;
 800445c:	e00d      	b.n	800447a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800445e:	f7fe f9eb 	bl	8002838 <HAL_RCC_GetSysClockFreq>
 8004462:	61f8      	str	r0, [r7, #28]
        break;
 8004464:	e009      	b.n	800447a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004466:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800446a:	61fb      	str	r3, [r7, #28]
        break;
 800446c:	e005      	b.n	800447a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800446e:	2300      	movs	r3, #0
 8004470:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004478:	bf00      	nop
    }

    if (pclk != 0U)
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d019      	beq.n	80044b4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	085a      	lsrs	r2, r3, #1
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	441a      	add	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004492:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	2b0f      	cmp	r3, #15
 8004498:	d909      	bls.n	80044ae <UART_SetConfig+0x432>
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044a0:	d205      	bcs.n	80044ae <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	60da      	str	r2, [r3, #12]
 80044ac:	e002      	b.n	80044b4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80044c0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3728      	adds	r7, #40	@ 0x28
 80044c8:	46bd      	mov	sp, r7
 80044ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044ce:	bf00      	nop
 80044d0:	00f42400 	.word	0x00f42400

080044d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e0:	f003 0308 	and.w	r3, r3, #8
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00a      	beq.n	80044fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00a      	beq.n	8004520 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00a      	beq.n	8004542 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004546:	f003 0304 	and.w	r3, r3, #4
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00a      	beq.n	8004564 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004568:	f003 0310 	and.w	r3, r3, #16
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00a      	beq.n	8004586 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458a:	f003 0320 	and.w	r3, r3, #32
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00a      	beq.n	80045a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	430a      	orrs	r2, r1
 80045a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d01a      	beq.n	80045ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045d2:	d10a      	bne.n	80045ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	430a      	orrs	r2, r1
 800460a:	605a      	str	r2, [r3, #4]
  }
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b098      	sub	sp, #96	@ 0x60
 800461c:	af02      	add	r7, sp, #8
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004628:	f7fd f8e6 	bl	80017f8 <HAL_GetTick>
 800462c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0308 	and.w	r3, r3, #8
 8004638:	2b08      	cmp	r3, #8
 800463a:	d12e      	bne.n	800469a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800463c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004644:	2200      	movs	r2, #0
 8004646:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f88c 	bl	8004768 <UART_WaitOnFlagUntilTimeout>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d021      	beq.n	800469a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800465e:	e853 3f00 	ldrex	r3, [r3]
 8004662:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004666:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800466a:	653b      	str	r3, [r7, #80]	@ 0x50
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	461a      	mov	r2, r3
 8004672:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004674:	647b      	str	r3, [r7, #68]	@ 0x44
 8004676:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004678:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800467a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800467c:	e841 2300 	strex	r3, r2, [r1]
 8004680:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1e6      	bne.n	8004656 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2220      	movs	r2, #32
 800468c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e062      	b.n	8004760 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b04      	cmp	r3, #4
 80046a6:	d149      	bne.n	800473c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046b0:	2200      	movs	r2, #0
 80046b2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f856 	bl	8004768 <UART_WaitOnFlagUntilTimeout>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d03c      	beq.n	800473c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ca:	e853 3f00 	ldrex	r3, [r3]
 80046ce:	623b      	str	r3, [r7, #32]
   return(result);
 80046d0:	6a3b      	ldr	r3, [r7, #32]
 80046d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	461a      	mov	r2, r3
 80046de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80046e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046e8:	e841 2300 	strex	r3, r2, [r1]
 80046ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1e6      	bne.n	80046c2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	3308      	adds	r3, #8
 80046fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	e853 3f00 	ldrex	r3, [r3]
 8004702:	60fb      	str	r3, [r7, #12]
   return(result);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f023 0301 	bic.w	r3, r3, #1
 800470a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	3308      	adds	r3, #8
 8004712:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004714:	61fa      	str	r2, [r7, #28]
 8004716:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004718:	69b9      	ldr	r1, [r7, #24]
 800471a:	69fa      	ldr	r2, [r7, #28]
 800471c:	e841 2300 	strex	r3, r2, [r1]
 8004720:	617b      	str	r3, [r7, #20]
   return(result);
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1e5      	bne.n	80046f4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2220      	movs	r2, #32
 800472c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e011      	b.n	8004760 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2220      	movs	r2, #32
 8004740:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2220      	movs	r2, #32
 8004746:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3758      	adds	r7, #88	@ 0x58
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	603b      	str	r3, [r7, #0]
 8004774:	4613      	mov	r3, r2
 8004776:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004778:	e049      	b.n	800480e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004780:	d045      	beq.n	800480e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004782:	f7fd f839 	bl	80017f8 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	429a      	cmp	r2, r3
 8004790:	d302      	bcc.n	8004798 <UART_WaitOnFlagUntilTimeout+0x30>
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e048      	b.n	800482e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0304 	and.w	r3, r3, #4
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d031      	beq.n	800480e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	f003 0308 	and.w	r3, r3, #8
 80047b4:	2b08      	cmp	r3, #8
 80047b6:	d110      	bne.n	80047da <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2208      	movs	r2, #8
 80047be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 f838 	bl	8004836 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2208      	movs	r2, #8
 80047ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e029      	b.n	800482e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	69db      	ldr	r3, [r3, #28]
 80047e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047e8:	d111      	bne.n	800480e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80047f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 f81e 	bl	8004836 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2220      	movs	r2, #32
 80047fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e00f      	b.n	800482e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	69da      	ldr	r2, [r3, #28]
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	4013      	ands	r3, r2
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	429a      	cmp	r2, r3
 800481c:	bf0c      	ite	eq
 800481e:	2301      	moveq	r3, #1
 8004820:	2300      	movne	r3, #0
 8004822:	b2db      	uxtb	r3, r3
 8004824:	461a      	mov	r2, r3
 8004826:	79fb      	ldrb	r3, [r7, #7]
 8004828:	429a      	cmp	r2, r3
 800482a:	d0a6      	beq.n	800477a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004836:	b480      	push	{r7}
 8004838:	b095      	sub	sp, #84	@ 0x54
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004846:	e853 3f00 	ldrex	r3, [r3]
 800484a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800484c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800484e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004852:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	461a      	mov	r2, r3
 800485a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800485c:	643b      	str	r3, [r7, #64]	@ 0x40
 800485e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004860:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004862:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004864:	e841 2300 	strex	r3, r2, [r1]
 8004868:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800486a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1e6      	bne.n	800483e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	3308      	adds	r3, #8
 8004876:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004878:	6a3b      	ldr	r3, [r7, #32]
 800487a:	e853 3f00 	ldrex	r3, [r3]
 800487e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	f023 0301 	bic.w	r3, r3, #1
 8004886:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	3308      	adds	r3, #8
 800488e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004890:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004892:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004894:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004896:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004898:	e841 2300 	strex	r3, r2, [r1]
 800489c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800489e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1e5      	bne.n	8004870 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d118      	bne.n	80048de <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	e853 3f00 	ldrex	r3, [r3]
 80048b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	f023 0310 	bic.w	r3, r3, #16
 80048c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	461a      	mov	r2, r3
 80048c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048ca:	61bb      	str	r3, [r7, #24]
 80048cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ce:	6979      	ldr	r1, [r7, #20]
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	e841 2300 	strex	r3, r2, [r1]
 80048d6:	613b      	str	r3, [r7, #16]
   return(result);
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1e6      	bne.n	80048ac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2220      	movs	r2, #32
 80048e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80048f2:	bf00      	nop
 80048f4:	3754      	adds	r7, #84	@ 0x54
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
	...

08004900 <siprintf>:
 8004900:	b40e      	push	{r1, r2, r3}
 8004902:	b500      	push	{lr}
 8004904:	b09c      	sub	sp, #112	@ 0x70
 8004906:	ab1d      	add	r3, sp, #116	@ 0x74
 8004908:	9002      	str	r0, [sp, #8]
 800490a:	9006      	str	r0, [sp, #24]
 800490c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004910:	4809      	ldr	r0, [pc, #36]	@ (8004938 <siprintf+0x38>)
 8004912:	9107      	str	r1, [sp, #28]
 8004914:	9104      	str	r1, [sp, #16]
 8004916:	4909      	ldr	r1, [pc, #36]	@ (800493c <siprintf+0x3c>)
 8004918:	f853 2b04 	ldr.w	r2, [r3], #4
 800491c:	9105      	str	r1, [sp, #20]
 800491e:	6800      	ldr	r0, [r0, #0]
 8004920:	9301      	str	r3, [sp, #4]
 8004922:	a902      	add	r1, sp, #8
 8004924:	f000 f994 	bl	8004c50 <_svfiprintf_r>
 8004928:	9b02      	ldr	r3, [sp, #8]
 800492a:	2200      	movs	r2, #0
 800492c:	701a      	strb	r2, [r3, #0]
 800492e:	b01c      	add	sp, #112	@ 0x70
 8004930:	f85d eb04 	ldr.w	lr, [sp], #4
 8004934:	b003      	add	sp, #12
 8004936:	4770      	bx	lr
 8004938:	20000028 	.word	0x20000028
 800493c:	ffff0208 	.word	0xffff0208

08004940 <memset>:
 8004940:	4402      	add	r2, r0
 8004942:	4603      	mov	r3, r0
 8004944:	4293      	cmp	r3, r2
 8004946:	d100      	bne.n	800494a <memset+0xa>
 8004948:	4770      	bx	lr
 800494a:	f803 1b01 	strb.w	r1, [r3], #1
 800494e:	e7f9      	b.n	8004944 <memset+0x4>

08004950 <__errno>:
 8004950:	4b01      	ldr	r3, [pc, #4]	@ (8004958 <__errno+0x8>)
 8004952:	6818      	ldr	r0, [r3, #0]
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	20000028 	.word	0x20000028

0800495c <__libc_init_array>:
 800495c:	b570      	push	{r4, r5, r6, lr}
 800495e:	4d0d      	ldr	r5, [pc, #52]	@ (8004994 <__libc_init_array+0x38>)
 8004960:	4c0d      	ldr	r4, [pc, #52]	@ (8004998 <__libc_init_array+0x3c>)
 8004962:	1b64      	subs	r4, r4, r5
 8004964:	10a4      	asrs	r4, r4, #2
 8004966:	2600      	movs	r6, #0
 8004968:	42a6      	cmp	r6, r4
 800496a:	d109      	bne.n	8004980 <__libc_init_array+0x24>
 800496c:	4d0b      	ldr	r5, [pc, #44]	@ (800499c <__libc_init_array+0x40>)
 800496e:	4c0c      	ldr	r4, [pc, #48]	@ (80049a0 <__libc_init_array+0x44>)
 8004970:	f000 fc66 	bl	8005240 <_init>
 8004974:	1b64      	subs	r4, r4, r5
 8004976:	10a4      	asrs	r4, r4, #2
 8004978:	2600      	movs	r6, #0
 800497a:	42a6      	cmp	r6, r4
 800497c:	d105      	bne.n	800498a <__libc_init_array+0x2e>
 800497e:	bd70      	pop	{r4, r5, r6, pc}
 8004980:	f855 3b04 	ldr.w	r3, [r5], #4
 8004984:	4798      	blx	r3
 8004986:	3601      	adds	r6, #1
 8004988:	e7ee      	b.n	8004968 <__libc_init_array+0xc>
 800498a:	f855 3b04 	ldr.w	r3, [r5], #4
 800498e:	4798      	blx	r3
 8004990:	3601      	adds	r6, #1
 8004992:	e7f2      	b.n	800497a <__libc_init_array+0x1e>
 8004994:	08005474 	.word	0x08005474
 8004998:	08005474 	.word	0x08005474
 800499c:	08005474 	.word	0x08005474
 80049a0:	08005478 	.word	0x08005478

080049a4 <__retarget_lock_acquire_recursive>:
 80049a4:	4770      	bx	lr

080049a6 <__retarget_lock_release_recursive>:
 80049a6:	4770      	bx	lr

080049a8 <_free_r>:
 80049a8:	b538      	push	{r3, r4, r5, lr}
 80049aa:	4605      	mov	r5, r0
 80049ac:	2900      	cmp	r1, #0
 80049ae:	d041      	beq.n	8004a34 <_free_r+0x8c>
 80049b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049b4:	1f0c      	subs	r4, r1, #4
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	bfb8      	it	lt
 80049ba:	18e4      	addlt	r4, r4, r3
 80049bc:	f000 f8e0 	bl	8004b80 <__malloc_lock>
 80049c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004a38 <_free_r+0x90>)
 80049c2:	6813      	ldr	r3, [r2, #0]
 80049c4:	b933      	cbnz	r3, 80049d4 <_free_r+0x2c>
 80049c6:	6063      	str	r3, [r4, #4]
 80049c8:	6014      	str	r4, [r2, #0]
 80049ca:	4628      	mov	r0, r5
 80049cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049d0:	f000 b8dc 	b.w	8004b8c <__malloc_unlock>
 80049d4:	42a3      	cmp	r3, r4
 80049d6:	d908      	bls.n	80049ea <_free_r+0x42>
 80049d8:	6820      	ldr	r0, [r4, #0]
 80049da:	1821      	adds	r1, r4, r0
 80049dc:	428b      	cmp	r3, r1
 80049de:	bf01      	itttt	eq
 80049e0:	6819      	ldreq	r1, [r3, #0]
 80049e2:	685b      	ldreq	r3, [r3, #4]
 80049e4:	1809      	addeq	r1, r1, r0
 80049e6:	6021      	streq	r1, [r4, #0]
 80049e8:	e7ed      	b.n	80049c6 <_free_r+0x1e>
 80049ea:	461a      	mov	r2, r3
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	b10b      	cbz	r3, 80049f4 <_free_r+0x4c>
 80049f0:	42a3      	cmp	r3, r4
 80049f2:	d9fa      	bls.n	80049ea <_free_r+0x42>
 80049f4:	6811      	ldr	r1, [r2, #0]
 80049f6:	1850      	adds	r0, r2, r1
 80049f8:	42a0      	cmp	r0, r4
 80049fa:	d10b      	bne.n	8004a14 <_free_r+0x6c>
 80049fc:	6820      	ldr	r0, [r4, #0]
 80049fe:	4401      	add	r1, r0
 8004a00:	1850      	adds	r0, r2, r1
 8004a02:	4283      	cmp	r3, r0
 8004a04:	6011      	str	r1, [r2, #0]
 8004a06:	d1e0      	bne.n	80049ca <_free_r+0x22>
 8004a08:	6818      	ldr	r0, [r3, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	6053      	str	r3, [r2, #4]
 8004a0e:	4408      	add	r0, r1
 8004a10:	6010      	str	r0, [r2, #0]
 8004a12:	e7da      	b.n	80049ca <_free_r+0x22>
 8004a14:	d902      	bls.n	8004a1c <_free_r+0x74>
 8004a16:	230c      	movs	r3, #12
 8004a18:	602b      	str	r3, [r5, #0]
 8004a1a:	e7d6      	b.n	80049ca <_free_r+0x22>
 8004a1c:	6820      	ldr	r0, [r4, #0]
 8004a1e:	1821      	adds	r1, r4, r0
 8004a20:	428b      	cmp	r3, r1
 8004a22:	bf04      	itt	eq
 8004a24:	6819      	ldreq	r1, [r3, #0]
 8004a26:	685b      	ldreq	r3, [r3, #4]
 8004a28:	6063      	str	r3, [r4, #4]
 8004a2a:	bf04      	itt	eq
 8004a2c:	1809      	addeq	r1, r1, r0
 8004a2e:	6021      	streq	r1, [r4, #0]
 8004a30:	6054      	str	r4, [r2, #4]
 8004a32:	e7ca      	b.n	80049ca <_free_r+0x22>
 8004a34:	bd38      	pop	{r3, r4, r5, pc}
 8004a36:	bf00      	nop
 8004a38:	200002ec 	.word	0x200002ec

08004a3c <sbrk_aligned>:
 8004a3c:	b570      	push	{r4, r5, r6, lr}
 8004a3e:	4e0f      	ldr	r6, [pc, #60]	@ (8004a7c <sbrk_aligned+0x40>)
 8004a40:	460c      	mov	r4, r1
 8004a42:	6831      	ldr	r1, [r6, #0]
 8004a44:	4605      	mov	r5, r0
 8004a46:	b911      	cbnz	r1, 8004a4e <sbrk_aligned+0x12>
 8004a48:	f000 fba6 	bl	8005198 <_sbrk_r>
 8004a4c:	6030      	str	r0, [r6, #0]
 8004a4e:	4621      	mov	r1, r4
 8004a50:	4628      	mov	r0, r5
 8004a52:	f000 fba1 	bl	8005198 <_sbrk_r>
 8004a56:	1c43      	adds	r3, r0, #1
 8004a58:	d103      	bne.n	8004a62 <sbrk_aligned+0x26>
 8004a5a:	f04f 34ff 	mov.w	r4, #4294967295
 8004a5e:	4620      	mov	r0, r4
 8004a60:	bd70      	pop	{r4, r5, r6, pc}
 8004a62:	1cc4      	adds	r4, r0, #3
 8004a64:	f024 0403 	bic.w	r4, r4, #3
 8004a68:	42a0      	cmp	r0, r4
 8004a6a:	d0f8      	beq.n	8004a5e <sbrk_aligned+0x22>
 8004a6c:	1a21      	subs	r1, r4, r0
 8004a6e:	4628      	mov	r0, r5
 8004a70:	f000 fb92 	bl	8005198 <_sbrk_r>
 8004a74:	3001      	adds	r0, #1
 8004a76:	d1f2      	bne.n	8004a5e <sbrk_aligned+0x22>
 8004a78:	e7ef      	b.n	8004a5a <sbrk_aligned+0x1e>
 8004a7a:	bf00      	nop
 8004a7c:	200002e8 	.word	0x200002e8

08004a80 <_malloc_r>:
 8004a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a84:	1ccd      	adds	r5, r1, #3
 8004a86:	f025 0503 	bic.w	r5, r5, #3
 8004a8a:	3508      	adds	r5, #8
 8004a8c:	2d0c      	cmp	r5, #12
 8004a8e:	bf38      	it	cc
 8004a90:	250c      	movcc	r5, #12
 8004a92:	2d00      	cmp	r5, #0
 8004a94:	4606      	mov	r6, r0
 8004a96:	db01      	blt.n	8004a9c <_malloc_r+0x1c>
 8004a98:	42a9      	cmp	r1, r5
 8004a9a:	d904      	bls.n	8004aa6 <_malloc_r+0x26>
 8004a9c:	230c      	movs	r3, #12
 8004a9e:	6033      	str	r3, [r6, #0]
 8004aa0:	2000      	movs	r0, #0
 8004aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004aa6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b7c <_malloc_r+0xfc>
 8004aaa:	f000 f869 	bl	8004b80 <__malloc_lock>
 8004aae:	f8d8 3000 	ldr.w	r3, [r8]
 8004ab2:	461c      	mov	r4, r3
 8004ab4:	bb44      	cbnz	r4, 8004b08 <_malloc_r+0x88>
 8004ab6:	4629      	mov	r1, r5
 8004ab8:	4630      	mov	r0, r6
 8004aba:	f7ff ffbf 	bl	8004a3c <sbrk_aligned>
 8004abe:	1c43      	adds	r3, r0, #1
 8004ac0:	4604      	mov	r4, r0
 8004ac2:	d158      	bne.n	8004b76 <_malloc_r+0xf6>
 8004ac4:	f8d8 4000 	ldr.w	r4, [r8]
 8004ac8:	4627      	mov	r7, r4
 8004aca:	2f00      	cmp	r7, #0
 8004acc:	d143      	bne.n	8004b56 <_malloc_r+0xd6>
 8004ace:	2c00      	cmp	r4, #0
 8004ad0:	d04b      	beq.n	8004b6a <_malloc_r+0xea>
 8004ad2:	6823      	ldr	r3, [r4, #0]
 8004ad4:	4639      	mov	r1, r7
 8004ad6:	4630      	mov	r0, r6
 8004ad8:	eb04 0903 	add.w	r9, r4, r3
 8004adc:	f000 fb5c 	bl	8005198 <_sbrk_r>
 8004ae0:	4581      	cmp	r9, r0
 8004ae2:	d142      	bne.n	8004b6a <_malloc_r+0xea>
 8004ae4:	6821      	ldr	r1, [r4, #0]
 8004ae6:	1a6d      	subs	r5, r5, r1
 8004ae8:	4629      	mov	r1, r5
 8004aea:	4630      	mov	r0, r6
 8004aec:	f7ff ffa6 	bl	8004a3c <sbrk_aligned>
 8004af0:	3001      	adds	r0, #1
 8004af2:	d03a      	beq.n	8004b6a <_malloc_r+0xea>
 8004af4:	6823      	ldr	r3, [r4, #0]
 8004af6:	442b      	add	r3, r5
 8004af8:	6023      	str	r3, [r4, #0]
 8004afa:	f8d8 3000 	ldr.w	r3, [r8]
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	bb62      	cbnz	r2, 8004b5c <_malloc_r+0xdc>
 8004b02:	f8c8 7000 	str.w	r7, [r8]
 8004b06:	e00f      	b.n	8004b28 <_malloc_r+0xa8>
 8004b08:	6822      	ldr	r2, [r4, #0]
 8004b0a:	1b52      	subs	r2, r2, r5
 8004b0c:	d420      	bmi.n	8004b50 <_malloc_r+0xd0>
 8004b0e:	2a0b      	cmp	r2, #11
 8004b10:	d917      	bls.n	8004b42 <_malloc_r+0xc2>
 8004b12:	1961      	adds	r1, r4, r5
 8004b14:	42a3      	cmp	r3, r4
 8004b16:	6025      	str	r5, [r4, #0]
 8004b18:	bf18      	it	ne
 8004b1a:	6059      	strne	r1, [r3, #4]
 8004b1c:	6863      	ldr	r3, [r4, #4]
 8004b1e:	bf08      	it	eq
 8004b20:	f8c8 1000 	streq.w	r1, [r8]
 8004b24:	5162      	str	r2, [r4, r5]
 8004b26:	604b      	str	r3, [r1, #4]
 8004b28:	4630      	mov	r0, r6
 8004b2a:	f000 f82f 	bl	8004b8c <__malloc_unlock>
 8004b2e:	f104 000b 	add.w	r0, r4, #11
 8004b32:	1d23      	adds	r3, r4, #4
 8004b34:	f020 0007 	bic.w	r0, r0, #7
 8004b38:	1ac2      	subs	r2, r0, r3
 8004b3a:	bf1c      	itt	ne
 8004b3c:	1a1b      	subne	r3, r3, r0
 8004b3e:	50a3      	strne	r3, [r4, r2]
 8004b40:	e7af      	b.n	8004aa2 <_malloc_r+0x22>
 8004b42:	6862      	ldr	r2, [r4, #4]
 8004b44:	42a3      	cmp	r3, r4
 8004b46:	bf0c      	ite	eq
 8004b48:	f8c8 2000 	streq.w	r2, [r8]
 8004b4c:	605a      	strne	r2, [r3, #4]
 8004b4e:	e7eb      	b.n	8004b28 <_malloc_r+0xa8>
 8004b50:	4623      	mov	r3, r4
 8004b52:	6864      	ldr	r4, [r4, #4]
 8004b54:	e7ae      	b.n	8004ab4 <_malloc_r+0x34>
 8004b56:	463c      	mov	r4, r7
 8004b58:	687f      	ldr	r7, [r7, #4]
 8004b5a:	e7b6      	b.n	8004aca <_malloc_r+0x4a>
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	42a3      	cmp	r3, r4
 8004b62:	d1fb      	bne.n	8004b5c <_malloc_r+0xdc>
 8004b64:	2300      	movs	r3, #0
 8004b66:	6053      	str	r3, [r2, #4]
 8004b68:	e7de      	b.n	8004b28 <_malloc_r+0xa8>
 8004b6a:	230c      	movs	r3, #12
 8004b6c:	6033      	str	r3, [r6, #0]
 8004b6e:	4630      	mov	r0, r6
 8004b70:	f000 f80c 	bl	8004b8c <__malloc_unlock>
 8004b74:	e794      	b.n	8004aa0 <_malloc_r+0x20>
 8004b76:	6005      	str	r5, [r0, #0]
 8004b78:	e7d6      	b.n	8004b28 <_malloc_r+0xa8>
 8004b7a:	bf00      	nop
 8004b7c:	200002ec 	.word	0x200002ec

08004b80 <__malloc_lock>:
 8004b80:	4801      	ldr	r0, [pc, #4]	@ (8004b88 <__malloc_lock+0x8>)
 8004b82:	f7ff bf0f 	b.w	80049a4 <__retarget_lock_acquire_recursive>
 8004b86:	bf00      	nop
 8004b88:	200002e4 	.word	0x200002e4

08004b8c <__malloc_unlock>:
 8004b8c:	4801      	ldr	r0, [pc, #4]	@ (8004b94 <__malloc_unlock+0x8>)
 8004b8e:	f7ff bf0a 	b.w	80049a6 <__retarget_lock_release_recursive>
 8004b92:	bf00      	nop
 8004b94:	200002e4 	.word	0x200002e4

08004b98 <__ssputs_r>:
 8004b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b9c:	688e      	ldr	r6, [r1, #8]
 8004b9e:	461f      	mov	r7, r3
 8004ba0:	42be      	cmp	r6, r7
 8004ba2:	680b      	ldr	r3, [r1, #0]
 8004ba4:	4682      	mov	sl, r0
 8004ba6:	460c      	mov	r4, r1
 8004ba8:	4690      	mov	r8, r2
 8004baa:	d82d      	bhi.n	8004c08 <__ssputs_r+0x70>
 8004bac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004bb0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004bb4:	d026      	beq.n	8004c04 <__ssputs_r+0x6c>
 8004bb6:	6965      	ldr	r5, [r4, #20]
 8004bb8:	6909      	ldr	r1, [r1, #16]
 8004bba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004bbe:	eba3 0901 	sub.w	r9, r3, r1
 8004bc2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004bc6:	1c7b      	adds	r3, r7, #1
 8004bc8:	444b      	add	r3, r9
 8004bca:	106d      	asrs	r5, r5, #1
 8004bcc:	429d      	cmp	r5, r3
 8004bce:	bf38      	it	cc
 8004bd0:	461d      	movcc	r5, r3
 8004bd2:	0553      	lsls	r3, r2, #21
 8004bd4:	d527      	bpl.n	8004c26 <__ssputs_r+0x8e>
 8004bd6:	4629      	mov	r1, r5
 8004bd8:	f7ff ff52 	bl	8004a80 <_malloc_r>
 8004bdc:	4606      	mov	r6, r0
 8004bde:	b360      	cbz	r0, 8004c3a <__ssputs_r+0xa2>
 8004be0:	6921      	ldr	r1, [r4, #16]
 8004be2:	464a      	mov	r2, r9
 8004be4:	f000 fae8 	bl	80051b8 <memcpy>
 8004be8:	89a3      	ldrh	r3, [r4, #12]
 8004bea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004bee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bf2:	81a3      	strh	r3, [r4, #12]
 8004bf4:	6126      	str	r6, [r4, #16]
 8004bf6:	6165      	str	r5, [r4, #20]
 8004bf8:	444e      	add	r6, r9
 8004bfa:	eba5 0509 	sub.w	r5, r5, r9
 8004bfe:	6026      	str	r6, [r4, #0]
 8004c00:	60a5      	str	r5, [r4, #8]
 8004c02:	463e      	mov	r6, r7
 8004c04:	42be      	cmp	r6, r7
 8004c06:	d900      	bls.n	8004c0a <__ssputs_r+0x72>
 8004c08:	463e      	mov	r6, r7
 8004c0a:	6820      	ldr	r0, [r4, #0]
 8004c0c:	4632      	mov	r2, r6
 8004c0e:	4641      	mov	r1, r8
 8004c10:	f000 faa8 	bl	8005164 <memmove>
 8004c14:	68a3      	ldr	r3, [r4, #8]
 8004c16:	1b9b      	subs	r3, r3, r6
 8004c18:	60a3      	str	r3, [r4, #8]
 8004c1a:	6823      	ldr	r3, [r4, #0]
 8004c1c:	4433      	add	r3, r6
 8004c1e:	6023      	str	r3, [r4, #0]
 8004c20:	2000      	movs	r0, #0
 8004c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c26:	462a      	mov	r2, r5
 8004c28:	f000 fad4 	bl	80051d4 <_realloc_r>
 8004c2c:	4606      	mov	r6, r0
 8004c2e:	2800      	cmp	r0, #0
 8004c30:	d1e0      	bne.n	8004bf4 <__ssputs_r+0x5c>
 8004c32:	6921      	ldr	r1, [r4, #16]
 8004c34:	4650      	mov	r0, sl
 8004c36:	f7ff feb7 	bl	80049a8 <_free_r>
 8004c3a:	230c      	movs	r3, #12
 8004c3c:	f8ca 3000 	str.w	r3, [sl]
 8004c40:	89a3      	ldrh	r3, [r4, #12]
 8004c42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c46:	81a3      	strh	r3, [r4, #12]
 8004c48:	f04f 30ff 	mov.w	r0, #4294967295
 8004c4c:	e7e9      	b.n	8004c22 <__ssputs_r+0x8a>
	...

08004c50 <_svfiprintf_r>:
 8004c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c54:	4698      	mov	r8, r3
 8004c56:	898b      	ldrh	r3, [r1, #12]
 8004c58:	061b      	lsls	r3, r3, #24
 8004c5a:	b09d      	sub	sp, #116	@ 0x74
 8004c5c:	4607      	mov	r7, r0
 8004c5e:	460d      	mov	r5, r1
 8004c60:	4614      	mov	r4, r2
 8004c62:	d510      	bpl.n	8004c86 <_svfiprintf_r+0x36>
 8004c64:	690b      	ldr	r3, [r1, #16]
 8004c66:	b973      	cbnz	r3, 8004c86 <_svfiprintf_r+0x36>
 8004c68:	2140      	movs	r1, #64	@ 0x40
 8004c6a:	f7ff ff09 	bl	8004a80 <_malloc_r>
 8004c6e:	6028      	str	r0, [r5, #0]
 8004c70:	6128      	str	r0, [r5, #16]
 8004c72:	b930      	cbnz	r0, 8004c82 <_svfiprintf_r+0x32>
 8004c74:	230c      	movs	r3, #12
 8004c76:	603b      	str	r3, [r7, #0]
 8004c78:	f04f 30ff 	mov.w	r0, #4294967295
 8004c7c:	b01d      	add	sp, #116	@ 0x74
 8004c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c82:	2340      	movs	r3, #64	@ 0x40
 8004c84:	616b      	str	r3, [r5, #20]
 8004c86:	2300      	movs	r3, #0
 8004c88:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c8a:	2320      	movs	r3, #32
 8004c8c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c90:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c94:	2330      	movs	r3, #48	@ 0x30
 8004c96:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004e34 <_svfiprintf_r+0x1e4>
 8004c9a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004c9e:	f04f 0901 	mov.w	r9, #1
 8004ca2:	4623      	mov	r3, r4
 8004ca4:	469a      	mov	sl, r3
 8004ca6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004caa:	b10a      	cbz	r2, 8004cb0 <_svfiprintf_r+0x60>
 8004cac:	2a25      	cmp	r2, #37	@ 0x25
 8004cae:	d1f9      	bne.n	8004ca4 <_svfiprintf_r+0x54>
 8004cb0:	ebba 0b04 	subs.w	fp, sl, r4
 8004cb4:	d00b      	beq.n	8004cce <_svfiprintf_r+0x7e>
 8004cb6:	465b      	mov	r3, fp
 8004cb8:	4622      	mov	r2, r4
 8004cba:	4629      	mov	r1, r5
 8004cbc:	4638      	mov	r0, r7
 8004cbe:	f7ff ff6b 	bl	8004b98 <__ssputs_r>
 8004cc2:	3001      	adds	r0, #1
 8004cc4:	f000 80a7 	beq.w	8004e16 <_svfiprintf_r+0x1c6>
 8004cc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004cca:	445a      	add	r2, fp
 8004ccc:	9209      	str	r2, [sp, #36]	@ 0x24
 8004cce:	f89a 3000 	ldrb.w	r3, [sl]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 809f 	beq.w	8004e16 <_svfiprintf_r+0x1c6>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	f04f 32ff 	mov.w	r2, #4294967295
 8004cde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ce2:	f10a 0a01 	add.w	sl, sl, #1
 8004ce6:	9304      	str	r3, [sp, #16]
 8004ce8:	9307      	str	r3, [sp, #28]
 8004cea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004cee:	931a      	str	r3, [sp, #104]	@ 0x68
 8004cf0:	4654      	mov	r4, sl
 8004cf2:	2205      	movs	r2, #5
 8004cf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cf8:	484e      	ldr	r0, [pc, #312]	@ (8004e34 <_svfiprintf_r+0x1e4>)
 8004cfa:	f7fb fa69 	bl	80001d0 <memchr>
 8004cfe:	9a04      	ldr	r2, [sp, #16]
 8004d00:	b9d8      	cbnz	r0, 8004d3a <_svfiprintf_r+0xea>
 8004d02:	06d0      	lsls	r0, r2, #27
 8004d04:	bf44      	itt	mi
 8004d06:	2320      	movmi	r3, #32
 8004d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d0c:	0711      	lsls	r1, r2, #28
 8004d0e:	bf44      	itt	mi
 8004d10:	232b      	movmi	r3, #43	@ 0x2b
 8004d12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d16:	f89a 3000 	ldrb.w	r3, [sl]
 8004d1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d1c:	d015      	beq.n	8004d4a <_svfiprintf_r+0xfa>
 8004d1e:	9a07      	ldr	r2, [sp, #28]
 8004d20:	4654      	mov	r4, sl
 8004d22:	2000      	movs	r0, #0
 8004d24:	f04f 0c0a 	mov.w	ip, #10
 8004d28:	4621      	mov	r1, r4
 8004d2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d2e:	3b30      	subs	r3, #48	@ 0x30
 8004d30:	2b09      	cmp	r3, #9
 8004d32:	d94b      	bls.n	8004dcc <_svfiprintf_r+0x17c>
 8004d34:	b1b0      	cbz	r0, 8004d64 <_svfiprintf_r+0x114>
 8004d36:	9207      	str	r2, [sp, #28]
 8004d38:	e014      	b.n	8004d64 <_svfiprintf_r+0x114>
 8004d3a:	eba0 0308 	sub.w	r3, r0, r8
 8004d3e:	fa09 f303 	lsl.w	r3, r9, r3
 8004d42:	4313      	orrs	r3, r2
 8004d44:	9304      	str	r3, [sp, #16]
 8004d46:	46a2      	mov	sl, r4
 8004d48:	e7d2      	b.n	8004cf0 <_svfiprintf_r+0xa0>
 8004d4a:	9b03      	ldr	r3, [sp, #12]
 8004d4c:	1d19      	adds	r1, r3, #4
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	9103      	str	r1, [sp, #12]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	bfbb      	ittet	lt
 8004d56:	425b      	neglt	r3, r3
 8004d58:	f042 0202 	orrlt.w	r2, r2, #2
 8004d5c:	9307      	strge	r3, [sp, #28]
 8004d5e:	9307      	strlt	r3, [sp, #28]
 8004d60:	bfb8      	it	lt
 8004d62:	9204      	strlt	r2, [sp, #16]
 8004d64:	7823      	ldrb	r3, [r4, #0]
 8004d66:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d68:	d10a      	bne.n	8004d80 <_svfiprintf_r+0x130>
 8004d6a:	7863      	ldrb	r3, [r4, #1]
 8004d6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d6e:	d132      	bne.n	8004dd6 <_svfiprintf_r+0x186>
 8004d70:	9b03      	ldr	r3, [sp, #12]
 8004d72:	1d1a      	adds	r2, r3, #4
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	9203      	str	r2, [sp, #12]
 8004d78:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004d7c:	3402      	adds	r4, #2
 8004d7e:	9305      	str	r3, [sp, #20]
 8004d80:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004e44 <_svfiprintf_r+0x1f4>
 8004d84:	7821      	ldrb	r1, [r4, #0]
 8004d86:	2203      	movs	r2, #3
 8004d88:	4650      	mov	r0, sl
 8004d8a:	f7fb fa21 	bl	80001d0 <memchr>
 8004d8e:	b138      	cbz	r0, 8004da0 <_svfiprintf_r+0x150>
 8004d90:	9b04      	ldr	r3, [sp, #16]
 8004d92:	eba0 000a 	sub.w	r0, r0, sl
 8004d96:	2240      	movs	r2, #64	@ 0x40
 8004d98:	4082      	lsls	r2, r0
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	3401      	adds	r4, #1
 8004d9e:	9304      	str	r3, [sp, #16]
 8004da0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004da4:	4824      	ldr	r0, [pc, #144]	@ (8004e38 <_svfiprintf_r+0x1e8>)
 8004da6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004daa:	2206      	movs	r2, #6
 8004dac:	f7fb fa10 	bl	80001d0 <memchr>
 8004db0:	2800      	cmp	r0, #0
 8004db2:	d036      	beq.n	8004e22 <_svfiprintf_r+0x1d2>
 8004db4:	4b21      	ldr	r3, [pc, #132]	@ (8004e3c <_svfiprintf_r+0x1ec>)
 8004db6:	bb1b      	cbnz	r3, 8004e00 <_svfiprintf_r+0x1b0>
 8004db8:	9b03      	ldr	r3, [sp, #12]
 8004dba:	3307      	adds	r3, #7
 8004dbc:	f023 0307 	bic.w	r3, r3, #7
 8004dc0:	3308      	adds	r3, #8
 8004dc2:	9303      	str	r3, [sp, #12]
 8004dc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dc6:	4433      	add	r3, r6
 8004dc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004dca:	e76a      	b.n	8004ca2 <_svfiprintf_r+0x52>
 8004dcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004dd0:	460c      	mov	r4, r1
 8004dd2:	2001      	movs	r0, #1
 8004dd4:	e7a8      	b.n	8004d28 <_svfiprintf_r+0xd8>
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	3401      	adds	r4, #1
 8004dda:	9305      	str	r3, [sp, #20]
 8004ddc:	4619      	mov	r1, r3
 8004dde:	f04f 0c0a 	mov.w	ip, #10
 8004de2:	4620      	mov	r0, r4
 8004de4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004de8:	3a30      	subs	r2, #48	@ 0x30
 8004dea:	2a09      	cmp	r2, #9
 8004dec:	d903      	bls.n	8004df6 <_svfiprintf_r+0x1a6>
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0c6      	beq.n	8004d80 <_svfiprintf_r+0x130>
 8004df2:	9105      	str	r1, [sp, #20]
 8004df4:	e7c4      	b.n	8004d80 <_svfiprintf_r+0x130>
 8004df6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004dfa:	4604      	mov	r4, r0
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e7f0      	b.n	8004de2 <_svfiprintf_r+0x192>
 8004e00:	ab03      	add	r3, sp, #12
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	462a      	mov	r2, r5
 8004e06:	4b0e      	ldr	r3, [pc, #56]	@ (8004e40 <_svfiprintf_r+0x1f0>)
 8004e08:	a904      	add	r1, sp, #16
 8004e0a:	4638      	mov	r0, r7
 8004e0c:	f3af 8000 	nop.w
 8004e10:	1c42      	adds	r2, r0, #1
 8004e12:	4606      	mov	r6, r0
 8004e14:	d1d6      	bne.n	8004dc4 <_svfiprintf_r+0x174>
 8004e16:	89ab      	ldrh	r3, [r5, #12]
 8004e18:	065b      	lsls	r3, r3, #25
 8004e1a:	f53f af2d 	bmi.w	8004c78 <_svfiprintf_r+0x28>
 8004e1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e20:	e72c      	b.n	8004c7c <_svfiprintf_r+0x2c>
 8004e22:	ab03      	add	r3, sp, #12
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	462a      	mov	r2, r5
 8004e28:	4b05      	ldr	r3, [pc, #20]	@ (8004e40 <_svfiprintf_r+0x1f0>)
 8004e2a:	a904      	add	r1, sp, #16
 8004e2c:	4638      	mov	r0, r7
 8004e2e:	f000 f879 	bl	8004f24 <_printf_i>
 8004e32:	e7ed      	b.n	8004e10 <_svfiprintf_r+0x1c0>
 8004e34:	08005438 	.word	0x08005438
 8004e38:	08005442 	.word	0x08005442
 8004e3c:	00000000 	.word	0x00000000
 8004e40:	08004b99 	.word	0x08004b99
 8004e44:	0800543e 	.word	0x0800543e

08004e48 <_printf_common>:
 8004e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e4c:	4616      	mov	r6, r2
 8004e4e:	4698      	mov	r8, r3
 8004e50:	688a      	ldr	r2, [r1, #8]
 8004e52:	690b      	ldr	r3, [r1, #16]
 8004e54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	bfb8      	it	lt
 8004e5c:	4613      	movlt	r3, r2
 8004e5e:	6033      	str	r3, [r6, #0]
 8004e60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e64:	4607      	mov	r7, r0
 8004e66:	460c      	mov	r4, r1
 8004e68:	b10a      	cbz	r2, 8004e6e <_printf_common+0x26>
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	6033      	str	r3, [r6, #0]
 8004e6e:	6823      	ldr	r3, [r4, #0]
 8004e70:	0699      	lsls	r1, r3, #26
 8004e72:	bf42      	ittt	mi
 8004e74:	6833      	ldrmi	r3, [r6, #0]
 8004e76:	3302      	addmi	r3, #2
 8004e78:	6033      	strmi	r3, [r6, #0]
 8004e7a:	6825      	ldr	r5, [r4, #0]
 8004e7c:	f015 0506 	ands.w	r5, r5, #6
 8004e80:	d106      	bne.n	8004e90 <_printf_common+0x48>
 8004e82:	f104 0a19 	add.w	sl, r4, #25
 8004e86:	68e3      	ldr	r3, [r4, #12]
 8004e88:	6832      	ldr	r2, [r6, #0]
 8004e8a:	1a9b      	subs	r3, r3, r2
 8004e8c:	42ab      	cmp	r3, r5
 8004e8e:	dc26      	bgt.n	8004ede <_printf_common+0x96>
 8004e90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e94:	6822      	ldr	r2, [r4, #0]
 8004e96:	3b00      	subs	r3, #0
 8004e98:	bf18      	it	ne
 8004e9a:	2301      	movne	r3, #1
 8004e9c:	0692      	lsls	r2, r2, #26
 8004e9e:	d42b      	bmi.n	8004ef8 <_printf_common+0xb0>
 8004ea0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ea4:	4641      	mov	r1, r8
 8004ea6:	4638      	mov	r0, r7
 8004ea8:	47c8      	blx	r9
 8004eaa:	3001      	adds	r0, #1
 8004eac:	d01e      	beq.n	8004eec <_printf_common+0xa4>
 8004eae:	6823      	ldr	r3, [r4, #0]
 8004eb0:	6922      	ldr	r2, [r4, #16]
 8004eb2:	f003 0306 	and.w	r3, r3, #6
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	bf02      	ittt	eq
 8004eba:	68e5      	ldreq	r5, [r4, #12]
 8004ebc:	6833      	ldreq	r3, [r6, #0]
 8004ebe:	1aed      	subeq	r5, r5, r3
 8004ec0:	68a3      	ldr	r3, [r4, #8]
 8004ec2:	bf0c      	ite	eq
 8004ec4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ec8:	2500      	movne	r5, #0
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	bfc4      	itt	gt
 8004ece:	1a9b      	subgt	r3, r3, r2
 8004ed0:	18ed      	addgt	r5, r5, r3
 8004ed2:	2600      	movs	r6, #0
 8004ed4:	341a      	adds	r4, #26
 8004ed6:	42b5      	cmp	r5, r6
 8004ed8:	d11a      	bne.n	8004f10 <_printf_common+0xc8>
 8004eda:	2000      	movs	r0, #0
 8004edc:	e008      	b.n	8004ef0 <_printf_common+0xa8>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	4652      	mov	r2, sl
 8004ee2:	4641      	mov	r1, r8
 8004ee4:	4638      	mov	r0, r7
 8004ee6:	47c8      	blx	r9
 8004ee8:	3001      	adds	r0, #1
 8004eea:	d103      	bne.n	8004ef4 <_printf_common+0xac>
 8004eec:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ef4:	3501      	adds	r5, #1
 8004ef6:	e7c6      	b.n	8004e86 <_printf_common+0x3e>
 8004ef8:	18e1      	adds	r1, r4, r3
 8004efa:	1c5a      	adds	r2, r3, #1
 8004efc:	2030      	movs	r0, #48	@ 0x30
 8004efe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f02:	4422      	add	r2, r4
 8004f04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004f08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004f0c:	3302      	adds	r3, #2
 8004f0e:	e7c7      	b.n	8004ea0 <_printf_common+0x58>
 8004f10:	2301      	movs	r3, #1
 8004f12:	4622      	mov	r2, r4
 8004f14:	4641      	mov	r1, r8
 8004f16:	4638      	mov	r0, r7
 8004f18:	47c8      	blx	r9
 8004f1a:	3001      	adds	r0, #1
 8004f1c:	d0e6      	beq.n	8004eec <_printf_common+0xa4>
 8004f1e:	3601      	adds	r6, #1
 8004f20:	e7d9      	b.n	8004ed6 <_printf_common+0x8e>
	...

08004f24 <_printf_i>:
 8004f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f28:	7e0f      	ldrb	r7, [r1, #24]
 8004f2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f2c:	2f78      	cmp	r7, #120	@ 0x78
 8004f2e:	4691      	mov	r9, r2
 8004f30:	4680      	mov	r8, r0
 8004f32:	460c      	mov	r4, r1
 8004f34:	469a      	mov	sl, r3
 8004f36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f3a:	d807      	bhi.n	8004f4c <_printf_i+0x28>
 8004f3c:	2f62      	cmp	r7, #98	@ 0x62
 8004f3e:	d80a      	bhi.n	8004f56 <_printf_i+0x32>
 8004f40:	2f00      	cmp	r7, #0
 8004f42:	f000 80d2 	beq.w	80050ea <_printf_i+0x1c6>
 8004f46:	2f58      	cmp	r7, #88	@ 0x58
 8004f48:	f000 80b9 	beq.w	80050be <_printf_i+0x19a>
 8004f4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f54:	e03a      	b.n	8004fcc <_printf_i+0xa8>
 8004f56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f5a:	2b15      	cmp	r3, #21
 8004f5c:	d8f6      	bhi.n	8004f4c <_printf_i+0x28>
 8004f5e:	a101      	add	r1, pc, #4	@ (adr r1, 8004f64 <_printf_i+0x40>)
 8004f60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f64:	08004fbd 	.word	0x08004fbd
 8004f68:	08004fd1 	.word	0x08004fd1
 8004f6c:	08004f4d 	.word	0x08004f4d
 8004f70:	08004f4d 	.word	0x08004f4d
 8004f74:	08004f4d 	.word	0x08004f4d
 8004f78:	08004f4d 	.word	0x08004f4d
 8004f7c:	08004fd1 	.word	0x08004fd1
 8004f80:	08004f4d 	.word	0x08004f4d
 8004f84:	08004f4d 	.word	0x08004f4d
 8004f88:	08004f4d 	.word	0x08004f4d
 8004f8c:	08004f4d 	.word	0x08004f4d
 8004f90:	080050d1 	.word	0x080050d1
 8004f94:	08004ffb 	.word	0x08004ffb
 8004f98:	0800508b 	.word	0x0800508b
 8004f9c:	08004f4d 	.word	0x08004f4d
 8004fa0:	08004f4d 	.word	0x08004f4d
 8004fa4:	080050f3 	.word	0x080050f3
 8004fa8:	08004f4d 	.word	0x08004f4d
 8004fac:	08004ffb 	.word	0x08004ffb
 8004fb0:	08004f4d 	.word	0x08004f4d
 8004fb4:	08004f4d 	.word	0x08004f4d
 8004fb8:	08005093 	.word	0x08005093
 8004fbc:	6833      	ldr	r3, [r6, #0]
 8004fbe:	1d1a      	adds	r2, r3, #4
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6032      	str	r2, [r6, #0]
 8004fc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e09d      	b.n	800510c <_printf_i+0x1e8>
 8004fd0:	6833      	ldr	r3, [r6, #0]
 8004fd2:	6820      	ldr	r0, [r4, #0]
 8004fd4:	1d19      	adds	r1, r3, #4
 8004fd6:	6031      	str	r1, [r6, #0]
 8004fd8:	0606      	lsls	r6, r0, #24
 8004fda:	d501      	bpl.n	8004fe0 <_printf_i+0xbc>
 8004fdc:	681d      	ldr	r5, [r3, #0]
 8004fde:	e003      	b.n	8004fe8 <_printf_i+0xc4>
 8004fe0:	0645      	lsls	r5, r0, #25
 8004fe2:	d5fb      	bpl.n	8004fdc <_printf_i+0xb8>
 8004fe4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004fe8:	2d00      	cmp	r5, #0
 8004fea:	da03      	bge.n	8004ff4 <_printf_i+0xd0>
 8004fec:	232d      	movs	r3, #45	@ 0x2d
 8004fee:	426d      	negs	r5, r5
 8004ff0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ff4:	4859      	ldr	r0, [pc, #356]	@ (800515c <_printf_i+0x238>)
 8004ff6:	230a      	movs	r3, #10
 8004ff8:	e011      	b.n	800501e <_printf_i+0xfa>
 8004ffa:	6821      	ldr	r1, [r4, #0]
 8004ffc:	6833      	ldr	r3, [r6, #0]
 8004ffe:	0608      	lsls	r0, r1, #24
 8005000:	f853 5b04 	ldr.w	r5, [r3], #4
 8005004:	d402      	bmi.n	800500c <_printf_i+0xe8>
 8005006:	0649      	lsls	r1, r1, #25
 8005008:	bf48      	it	mi
 800500a:	b2ad      	uxthmi	r5, r5
 800500c:	2f6f      	cmp	r7, #111	@ 0x6f
 800500e:	4853      	ldr	r0, [pc, #332]	@ (800515c <_printf_i+0x238>)
 8005010:	6033      	str	r3, [r6, #0]
 8005012:	bf14      	ite	ne
 8005014:	230a      	movne	r3, #10
 8005016:	2308      	moveq	r3, #8
 8005018:	2100      	movs	r1, #0
 800501a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800501e:	6866      	ldr	r6, [r4, #4]
 8005020:	60a6      	str	r6, [r4, #8]
 8005022:	2e00      	cmp	r6, #0
 8005024:	bfa2      	ittt	ge
 8005026:	6821      	ldrge	r1, [r4, #0]
 8005028:	f021 0104 	bicge.w	r1, r1, #4
 800502c:	6021      	strge	r1, [r4, #0]
 800502e:	b90d      	cbnz	r5, 8005034 <_printf_i+0x110>
 8005030:	2e00      	cmp	r6, #0
 8005032:	d04b      	beq.n	80050cc <_printf_i+0x1a8>
 8005034:	4616      	mov	r6, r2
 8005036:	fbb5 f1f3 	udiv	r1, r5, r3
 800503a:	fb03 5711 	mls	r7, r3, r1, r5
 800503e:	5dc7      	ldrb	r7, [r0, r7]
 8005040:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005044:	462f      	mov	r7, r5
 8005046:	42bb      	cmp	r3, r7
 8005048:	460d      	mov	r5, r1
 800504a:	d9f4      	bls.n	8005036 <_printf_i+0x112>
 800504c:	2b08      	cmp	r3, #8
 800504e:	d10b      	bne.n	8005068 <_printf_i+0x144>
 8005050:	6823      	ldr	r3, [r4, #0]
 8005052:	07df      	lsls	r7, r3, #31
 8005054:	d508      	bpl.n	8005068 <_printf_i+0x144>
 8005056:	6923      	ldr	r3, [r4, #16]
 8005058:	6861      	ldr	r1, [r4, #4]
 800505a:	4299      	cmp	r1, r3
 800505c:	bfde      	ittt	le
 800505e:	2330      	movle	r3, #48	@ 0x30
 8005060:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005064:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005068:	1b92      	subs	r2, r2, r6
 800506a:	6122      	str	r2, [r4, #16]
 800506c:	f8cd a000 	str.w	sl, [sp]
 8005070:	464b      	mov	r3, r9
 8005072:	aa03      	add	r2, sp, #12
 8005074:	4621      	mov	r1, r4
 8005076:	4640      	mov	r0, r8
 8005078:	f7ff fee6 	bl	8004e48 <_printf_common>
 800507c:	3001      	adds	r0, #1
 800507e:	d14a      	bne.n	8005116 <_printf_i+0x1f2>
 8005080:	f04f 30ff 	mov.w	r0, #4294967295
 8005084:	b004      	add	sp, #16
 8005086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	f043 0320 	orr.w	r3, r3, #32
 8005090:	6023      	str	r3, [r4, #0]
 8005092:	4833      	ldr	r0, [pc, #204]	@ (8005160 <_printf_i+0x23c>)
 8005094:	2778      	movs	r7, #120	@ 0x78
 8005096:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800509a:	6823      	ldr	r3, [r4, #0]
 800509c:	6831      	ldr	r1, [r6, #0]
 800509e:	061f      	lsls	r7, r3, #24
 80050a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80050a4:	d402      	bmi.n	80050ac <_printf_i+0x188>
 80050a6:	065f      	lsls	r7, r3, #25
 80050a8:	bf48      	it	mi
 80050aa:	b2ad      	uxthmi	r5, r5
 80050ac:	6031      	str	r1, [r6, #0]
 80050ae:	07d9      	lsls	r1, r3, #31
 80050b0:	bf44      	itt	mi
 80050b2:	f043 0320 	orrmi.w	r3, r3, #32
 80050b6:	6023      	strmi	r3, [r4, #0]
 80050b8:	b11d      	cbz	r5, 80050c2 <_printf_i+0x19e>
 80050ba:	2310      	movs	r3, #16
 80050bc:	e7ac      	b.n	8005018 <_printf_i+0xf4>
 80050be:	4827      	ldr	r0, [pc, #156]	@ (800515c <_printf_i+0x238>)
 80050c0:	e7e9      	b.n	8005096 <_printf_i+0x172>
 80050c2:	6823      	ldr	r3, [r4, #0]
 80050c4:	f023 0320 	bic.w	r3, r3, #32
 80050c8:	6023      	str	r3, [r4, #0]
 80050ca:	e7f6      	b.n	80050ba <_printf_i+0x196>
 80050cc:	4616      	mov	r6, r2
 80050ce:	e7bd      	b.n	800504c <_printf_i+0x128>
 80050d0:	6833      	ldr	r3, [r6, #0]
 80050d2:	6825      	ldr	r5, [r4, #0]
 80050d4:	6961      	ldr	r1, [r4, #20]
 80050d6:	1d18      	adds	r0, r3, #4
 80050d8:	6030      	str	r0, [r6, #0]
 80050da:	062e      	lsls	r6, r5, #24
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	d501      	bpl.n	80050e4 <_printf_i+0x1c0>
 80050e0:	6019      	str	r1, [r3, #0]
 80050e2:	e002      	b.n	80050ea <_printf_i+0x1c6>
 80050e4:	0668      	lsls	r0, r5, #25
 80050e6:	d5fb      	bpl.n	80050e0 <_printf_i+0x1bc>
 80050e8:	8019      	strh	r1, [r3, #0]
 80050ea:	2300      	movs	r3, #0
 80050ec:	6123      	str	r3, [r4, #16]
 80050ee:	4616      	mov	r6, r2
 80050f0:	e7bc      	b.n	800506c <_printf_i+0x148>
 80050f2:	6833      	ldr	r3, [r6, #0]
 80050f4:	1d1a      	adds	r2, r3, #4
 80050f6:	6032      	str	r2, [r6, #0]
 80050f8:	681e      	ldr	r6, [r3, #0]
 80050fa:	6862      	ldr	r2, [r4, #4]
 80050fc:	2100      	movs	r1, #0
 80050fe:	4630      	mov	r0, r6
 8005100:	f7fb f866 	bl	80001d0 <memchr>
 8005104:	b108      	cbz	r0, 800510a <_printf_i+0x1e6>
 8005106:	1b80      	subs	r0, r0, r6
 8005108:	6060      	str	r0, [r4, #4]
 800510a:	6863      	ldr	r3, [r4, #4]
 800510c:	6123      	str	r3, [r4, #16]
 800510e:	2300      	movs	r3, #0
 8005110:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005114:	e7aa      	b.n	800506c <_printf_i+0x148>
 8005116:	6923      	ldr	r3, [r4, #16]
 8005118:	4632      	mov	r2, r6
 800511a:	4649      	mov	r1, r9
 800511c:	4640      	mov	r0, r8
 800511e:	47d0      	blx	sl
 8005120:	3001      	adds	r0, #1
 8005122:	d0ad      	beq.n	8005080 <_printf_i+0x15c>
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	079b      	lsls	r3, r3, #30
 8005128:	d413      	bmi.n	8005152 <_printf_i+0x22e>
 800512a:	68e0      	ldr	r0, [r4, #12]
 800512c:	9b03      	ldr	r3, [sp, #12]
 800512e:	4298      	cmp	r0, r3
 8005130:	bfb8      	it	lt
 8005132:	4618      	movlt	r0, r3
 8005134:	e7a6      	b.n	8005084 <_printf_i+0x160>
 8005136:	2301      	movs	r3, #1
 8005138:	4632      	mov	r2, r6
 800513a:	4649      	mov	r1, r9
 800513c:	4640      	mov	r0, r8
 800513e:	47d0      	blx	sl
 8005140:	3001      	adds	r0, #1
 8005142:	d09d      	beq.n	8005080 <_printf_i+0x15c>
 8005144:	3501      	adds	r5, #1
 8005146:	68e3      	ldr	r3, [r4, #12]
 8005148:	9903      	ldr	r1, [sp, #12]
 800514a:	1a5b      	subs	r3, r3, r1
 800514c:	42ab      	cmp	r3, r5
 800514e:	dcf2      	bgt.n	8005136 <_printf_i+0x212>
 8005150:	e7eb      	b.n	800512a <_printf_i+0x206>
 8005152:	2500      	movs	r5, #0
 8005154:	f104 0619 	add.w	r6, r4, #25
 8005158:	e7f5      	b.n	8005146 <_printf_i+0x222>
 800515a:	bf00      	nop
 800515c:	08005449 	.word	0x08005449
 8005160:	0800545a 	.word	0x0800545a

08005164 <memmove>:
 8005164:	4288      	cmp	r0, r1
 8005166:	b510      	push	{r4, lr}
 8005168:	eb01 0402 	add.w	r4, r1, r2
 800516c:	d902      	bls.n	8005174 <memmove+0x10>
 800516e:	4284      	cmp	r4, r0
 8005170:	4623      	mov	r3, r4
 8005172:	d807      	bhi.n	8005184 <memmove+0x20>
 8005174:	1e43      	subs	r3, r0, #1
 8005176:	42a1      	cmp	r1, r4
 8005178:	d008      	beq.n	800518c <memmove+0x28>
 800517a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800517e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005182:	e7f8      	b.n	8005176 <memmove+0x12>
 8005184:	4402      	add	r2, r0
 8005186:	4601      	mov	r1, r0
 8005188:	428a      	cmp	r2, r1
 800518a:	d100      	bne.n	800518e <memmove+0x2a>
 800518c:	bd10      	pop	{r4, pc}
 800518e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005192:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005196:	e7f7      	b.n	8005188 <memmove+0x24>

08005198 <_sbrk_r>:
 8005198:	b538      	push	{r3, r4, r5, lr}
 800519a:	4d06      	ldr	r5, [pc, #24]	@ (80051b4 <_sbrk_r+0x1c>)
 800519c:	2300      	movs	r3, #0
 800519e:	4604      	mov	r4, r0
 80051a0:	4608      	mov	r0, r1
 80051a2:	602b      	str	r3, [r5, #0]
 80051a4:	f7fc fa3a 	bl	800161c <_sbrk>
 80051a8:	1c43      	adds	r3, r0, #1
 80051aa:	d102      	bne.n	80051b2 <_sbrk_r+0x1a>
 80051ac:	682b      	ldr	r3, [r5, #0]
 80051ae:	b103      	cbz	r3, 80051b2 <_sbrk_r+0x1a>
 80051b0:	6023      	str	r3, [r4, #0]
 80051b2:	bd38      	pop	{r3, r4, r5, pc}
 80051b4:	200002e0 	.word	0x200002e0

080051b8 <memcpy>:
 80051b8:	440a      	add	r2, r1
 80051ba:	4291      	cmp	r1, r2
 80051bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80051c0:	d100      	bne.n	80051c4 <memcpy+0xc>
 80051c2:	4770      	bx	lr
 80051c4:	b510      	push	{r4, lr}
 80051c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051ce:	4291      	cmp	r1, r2
 80051d0:	d1f9      	bne.n	80051c6 <memcpy+0xe>
 80051d2:	bd10      	pop	{r4, pc}

080051d4 <_realloc_r>:
 80051d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051d8:	4680      	mov	r8, r0
 80051da:	4615      	mov	r5, r2
 80051dc:	460c      	mov	r4, r1
 80051de:	b921      	cbnz	r1, 80051ea <_realloc_r+0x16>
 80051e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051e4:	4611      	mov	r1, r2
 80051e6:	f7ff bc4b 	b.w	8004a80 <_malloc_r>
 80051ea:	b92a      	cbnz	r2, 80051f8 <_realloc_r+0x24>
 80051ec:	f7ff fbdc 	bl	80049a8 <_free_r>
 80051f0:	2400      	movs	r4, #0
 80051f2:	4620      	mov	r0, r4
 80051f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051f8:	f000 f81a 	bl	8005230 <_malloc_usable_size_r>
 80051fc:	4285      	cmp	r5, r0
 80051fe:	4606      	mov	r6, r0
 8005200:	d802      	bhi.n	8005208 <_realloc_r+0x34>
 8005202:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005206:	d8f4      	bhi.n	80051f2 <_realloc_r+0x1e>
 8005208:	4629      	mov	r1, r5
 800520a:	4640      	mov	r0, r8
 800520c:	f7ff fc38 	bl	8004a80 <_malloc_r>
 8005210:	4607      	mov	r7, r0
 8005212:	2800      	cmp	r0, #0
 8005214:	d0ec      	beq.n	80051f0 <_realloc_r+0x1c>
 8005216:	42b5      	cmp	r5, r6
 8005218:	462a      	mov	r2, r5
 800521a:	4621      	mov	r1, r4
 800521c:	bf28      	it	cs
 800521e:	4632      	movcs	r2, r6
 8005220:	f7ff ffca 	bl	80051b8 <memcpy>
 8005224:	4621      	mov	r1, r4
 8005226:	4640      	mov	r0, r8
 8005228:	f7ff fbbe 	bl	80049a8 <_free_r>
 800522c:	463c      	mov	r4, r7
 800522e:	e7e0      	b.n	80051f2 <_realloc_r+0x1e>

08005230 <_malloc_usable_size_r>:
 8005230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005234:	1f18      	subs	r0, r3, #4
 8005236:	2b00      	cmp	r3, #0
 8005238:	bfbc      	itt	lt
 800523a:	580b      	ldrlt	r3, [r1, r0]
 800523c:	18c0      	addlt	r0, r0, r3
 800523e:	4770      	bx	lr

08005240 <_init>:
 8005240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005242:	bf00      	nop
 8005244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005246:	bc08      	pop	{r3}
 8005248:	469e      	mov	lr, r3
 800524a:	4770      	bx	lr

0800524c <_fini>:
 800524c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800524e:	bf00      	nop
 8005250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005252:	bc08      	pop	{r3}
 8005254:	469e      	mov	lr, r3
 8005256:	4770      	bx	lr
