
STM32L432KC Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045e4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  08004774  08004774  00005774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a78  08004a78  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a78  08004a78  00005a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a80  08004a80  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a80  08004a80  00005a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a84  08004a84  00005a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004a88  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  2000005c  08004ae4  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08004ae4  000062b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e200  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002437  00000000  00000000  0001428c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  000166c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000968  00000000  00000000  00017318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000210fc  00000000  00000000  00017c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f665  00000000  00000000  00038d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2429  00000000  00000000  000483e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010a80a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000366c  00000000  00000000  0010a850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  0010debc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800475c 	.word	0x0800475c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	0800475c 	.word	0x0800475c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <testRegisterWrite>:
    uart_serial_print(buf, sizeof(buf));
    memset(buf, '\0', sizeof(buf));
}

void testRegisterWrite(void)
{ 
 8000560:	b580      	push	{r7, lr}
 8000562:	b08c      	sub	sp, #48	@ 0x30
 8000564:	af00      	add	r7, sp, #0
    uint8_t writeByte = 0; 
 8000566:	2300      	movs	r3, #0
 8000568:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t readByte = 0; 
 800056c:	2300      	movs	r3, #0
 800056e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    // MCP2515_WriteMultipleBytes(MCP2515_TXB0SIDH, nullData, sizeof(nullData)); 
    // canspi_ReadTxRegisterPrint(); 
    // MCP2515_WriteMultipleBytes(MCP2515_TXB0SIDH, regData, sizeof(regData)); 
    // canspi_ReadTxRegisterPrint(); 
    sprintf(buf, "****** START ******\r\n\n"); 
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	4921      	ldr	r1, [pc, #132]	@ (80005fc <testRegisterWrite+0x9c>)
 8000576:	4618      	mov	r0, r3
 8000578:	f003 fc50 	bl	8003e1c <siprintf>
    uart_serial_print(buf, sizeof(buf));
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2128      	movs	r1, #40	@ 0x28
 8000580:	4618      	mov	r0, r3
 8000582:	f000 fb21 	bl	8000bc8 <uart_serial_print>
    memset(buf, '\0', sizeof(buf));
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	2228      	movs	r2, #40	@ 0x28
 800058a:	2100      	movs	r1, #0
 800058c:	4618      	mov	r0, r3
 800058e:	f003 fc65 	bl	8003e5c <memset>
    // }

    // writeByte = 0x08; 
    // MCP2515_WriteByte(MCP2515_TXB0SIDH, writeByte);

    writeByte = 0xC8; 
 8000592:	23c8      	movs	r3, #200	@ 0xc8
 8000594:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    MCP2515_WriteByte(MCP2515_TXB0SIDL, writeByte);
 8000598:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800059c:	4619      	mov	r1, r3
 800059e:	2032      	movs	r0, #50	@ 0x32
 80005a0:	f000 f95a 	bl	8000858 <MCP2515_WriteByte>
    readByte = MCP2515_ReadByte(MCP2515_TXB0SIDL);
 80005a4:	2032      	movs	r0, #50	@ 0x32
 80005a6:	f000 f97b 	bl	80008a0 <MCP2515_ReadByte>
 80005aa:	4603      	mov	r3, r0
 80005ac:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    sprintf(buf, "TXB0SIDL = %x\r\n", readByte); 
 80005b0:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	4912      	ldr	r1, [pc, #72]	@ (8000600 <testRegisterWrite+0xa0>)
 80005b8:	4618      	mov	r0, r3
 80005ba:	f003 fc2f 	bl	8003e1c <siprintf>
    uart_serial_print(buf, sizeof(buf));
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	2128      	movs	r1, #40	@ 0x28
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 fb00 	bl	8000bc8 <uart_serial_print>
    memset(buf, '\0', sizeof(buf));
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	2228      	movs	r2, #40	@ 0x28
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f003 fc44 	bl	8003e5c <memset>
    // writeByte = 0x07; 
    // MCP2515_WriteByte(MCP2515_TXB0D7, writeByte);

    // canspi_ReadTxRegisterPrint();   

    sprintf(buf, "****** END ******\r\n\r\n"); 
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	490b      	ldr	r1, [pc, #44]	@ (8000604 <testRegisterWrite+0xa4>)
 80005d8:	4618      	mov	r0, r3
 80005da:	f003 fc1f 	bl	8003e1c <siprintf>
    uart_serial_print(buf, sizeof(buf));
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2128      	movs	r1, #40	@ 0x28
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 faf0 	bl	8000bc8 <uart_serial_print>
    memset(buf, '\0', sizeof(buf));
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2228      	movs	r2, #40	@ 0x28
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 fc34 	bl	8003e5c <memset>
}
 80005f4:	bf00      	nop
 80005f6:	3730      	adds	r7, #48	@ 0x30
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	080049cc 	.word	0x080049cc
 8000600:	080048bc 	.word	0x080048bc
 8000604:	080049e4 	.word	0x080049e4

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 fb19 	bl	8000c42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f80e 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 f8d0 	bl	80007b8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000618:	f000 f860 	bl	80006dc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800061c:	f000 f89c 	bl	8000758 <MX_USART2_UART_Init>
  // uart_serial_print(start, sizeof(start));
  // canspi_Init(); 
  // MCP_test_function();
  // uart_serial_print(end, sizeof(end));
   
  testRegisterWrite(); 
 8000620:	f7ff ff9e 	bl	8000560 <testRegisterWrite>
    // if(canspi_ReceiveMessage(&rx_message))
    // {
    //   canspi_CanLoopTest(rx_message); 
    // } 
    
    HAL_Delay(1000); 
 8000624:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000628:	f000 fb80 	bl	8000d2c <HAL_Delay>
 800062c:	e7fa      	b.n	8000624 <main+0x1c>
	...

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b096      	sub	sp, #88	@ 0x58
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	2244      	movs	r2, #68	@ 0x44
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f003 fc0c 	bl	8003e5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	463b      	mov	r3, r7
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000652:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000656:	f000 fe13 	bl	8001280 <HAL_PWREx_ControlVoltageScaling>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000660:	f000 f8f4 	bl	800084c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000664:	f000 fdee 	bl	8001244 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000668:	4b1b      	ldr	r3, [pc, #108]	@ (80006d8 <SystemClock_Config+0xa8>)
 800066a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800066e:	4a1a      	ldr	r2, [pc, #104]	@ (80006d8 <SystemClock_Config+0xa8>)
 8000670:	f023 0318 	bic.w	r3, r3, #24
 8000674:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000678:	2314      	movs	r3, #20
 800067a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000680:	2301      	movs	r3, #1
 8000682:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000688:	2360      	movs	r3, #96	@ 0x60
 800068a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800068c:	2300      	movs	r3, #0
 800068e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	4618      	mov	r0, r3
 8000696:	f000 fe49 	bl	800132c <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006a0:	f000 f8d4 	bl	800084c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b8:	463b      	mov	r3, r7
 80006ba:	2100      	movs	r1, #0
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 fa49 	bl	8001b54 <HAL_RCC_ClockConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006c8:	f000 f8c0 	bl	800084c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006cc:	f001 fe5c 	bl	8002388 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006d0:	bf00      	nop
 80006d2:	3758      	adds	r7, #88	@ 0x58
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40021000 	.word	0x40021000

080006dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000750 <MX_SPI1_Init+0x74>)
 80006e2:	4a1c      	ldr	r2, [pc, #112]	@ (8000754 <MX_SPI1_Init+0x78>)
 80006e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000750 <MX_SPI1_Init+0x74>)
 80006e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ee:	4b18      	ldr	r3, [pc, #96]	@ (8000750 <MX_SPI1_Init+0x74>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006f4:	4b16      	ldr	r3, [pc, #88]	@ (8000750 <MX_SPI1_Init+0x74>)
 80006f6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80006fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006fc:	4b14      	ldr	r3, [pc, #80]	@ (8000750 <MX_SPI1_Init+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000702:	4b13      	ldr	r3, [pc, #76]	@ (8000750 <MX_SPI1_Init+0x74>)
 8000704:	2200      	movs	r2, #0
 8000706:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000708:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <MX_SPI1_Init+0x74>)
 800070a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800070e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000710:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <MX_SPI1_Init+0x74>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000716:	4b0e      	ldr	r3, [pc, #56]	@ (8000750 <MX_SPI1_Init+0x74>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800071c:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <MX_SPI1_Init+0x74>)
 800071e:	2200      	movs	r2, #0
 8000720:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	@ (8000750 <MX_SPI1_Init+0x74>)
 8000724:	2200      	movs	r2, #0
 8000726:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000728:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <MX_SPI1_Init+0x74>)
 800072a:	2207      	movs	r2, #7
 800072c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800072e:	4b08      	ldr	r3, [pc, #32]	@ (8000750 <MX_SPI1_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000734:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <MX_SPI1_Init+0x74>)
 8000736:	2208      	movs	r2, #8
 8000738:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	@ (8000750 <MX_SPI1_Init+0x74>)
 800073c:	f001 ff26 	bl	800258c <HAL_SPI_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000746:	f000 f881 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000078 	.word	0x20000078
 8000754:	40013000 	.word	0x40013000

08000758 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800075c:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <MX_USART2_UART_Init+0x58>)
 800075e:	4a15      	ldr	r2, [pc, #84]	@ (80007b4 <MX_USART2_UART_Init+0x5c>)
 8000760:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000762:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <MX_USART2_UART_Init+0x58>)
 8000764:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000768:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <MX_USART2_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <MX_USART2_UART_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000776:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <MX_USART2_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <MX_USART2_UART_Init+0x58>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	@ (80007b0 <MX_USART2_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000788:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <MX_USART2_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078e:	4b08      	ldr	r3, [pc, #32]	@ (80007b0 <MX_USART2_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000794:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <MX_USART2_UART_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <MX_USART2_UART_Init+0x58>)
 800079c:	f002 fe24 	bl	80033e8 <HAL_UART_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007a6:	f000 f851 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200000dc 	.word	0x200000dc
 80007b4:	40004400 	.word	0x40004400

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000844 <MX_GPIO_Init+0x8c>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000844 <MX_GPIO_Init+0x8c>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007da:	4b1a      	ldr	r3, [pc, #104]	@ (8000844 <MX_GPIO_Init+0x8c>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	4b17      	ldr	r3, [pc, #92]	@ (8000844 <MX_GPIO_Init+0x8c>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	4a16      	ldr	r2, [pc, #88]	@ (8000844 <MX_GPIO_Init+0x8c>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f2:	4b14      	ldr	r3, [pc, #80]	@ (8000844 <MX_GPIO_Init+0x8c>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <MX_GPIO_Init+0x8c>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a10      	ldr	r2, [pc, #64]	@ (8000844 <MX_GPIO_Init+0x8c>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <MX_GPIO_Init+0x8c>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, GPIO_PIN_SET);
 8000816:	2201      	movs	r2, #1
 8000818:	2180      	movs	r1, #128	@ 0x80
 800081a:	480b      	ldr	r0, [pc, #44]	@ (8000848 <MX_GPIO_Init+0x90>)
 800081c:	f000 fcfa 	bl	8001214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SP1_CS_Pin */
  GPIO_InitStruct.Pin = SP1_CS_Pin;
 8000820:	2380      	movs	r3, #128	@ 0x80
 8000822:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SP1_CS_GPIO_Port, &GPIO_InitStruct);
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	4619      	mov	r1, r3
 8000836:	4804      	ldr	r0, [pc, #16]	@ (8000848 <MX_GPIO_Init+0x90>)
 8000838:	f000 fb82 	bl	8000f40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800083c:	bf00      	nop
 800083e:	3720      	adds	r7, #32
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40021000 	.word	0x40021000
 8000848:	48000400 	.word	0x48000400

0800084c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
}
 8000852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <Error_Handler+0x8>

08000858 <MCP2515_WriteByte>:

    @{
*/
/******************************************************************************/
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	460a      	mov	r2, r1
 8000862:	71fb      	strb	r3, [r7, #7]
 8000864:	4613      	mov	r3, r2
 8000866:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();  
 8000868:	2200      	movs	r2, #0
 800086a:	2180      	movs	r1, #128	@ 0x80
 800086c:	480b      	ldr	r0, [pc, #44]	@ (800089c <MCP2515_WriteByte+0x44>)
 800086e:	f000 fcd1 	bl	8001214 <HAL_GPIO_WritePin>

  SPI_Tx((uint8_t)INSTRUCTION_WRITE);
 8000872:	2002      	movs	r0, #2
 8000874:	f000 f838 	bl	80008e8 <SPI_Tx>
  SPI_Tx(address);
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	4618      	mov	r0, r3
 800087c:	f000 f834 	bl	80008e8 <SPI_Tx>
  SPI_Tx(data);  
 8000880:	79bb      	ldrb	r3, [r7, #6]
 8000882:	4618      	mov	r0, r3
 8000884:	f000 f830 	bl	80008e8 <SPI_Tx>
  
  MCP2515_CS_HIGH();
 8000888:	2201      	movs	r2, #1
 800088a:	2180      	movs	r1, #128	@ 0x80
 800088c:	4803      	ldr	r0, [pc, #12]	@ (800089c <MCP2515_WriteByte+0x44>)
 800088e:	f000 fcc1 	bl	8001214 <HAL_GPIO_WritePin>
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	48000400 	.word	0x48000400

080008a0 <MCP2515_ReadByte>:

    @{
*/
/******************************************************************************/
uint8_t MCP2515_ReadByte(uint8_t address)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
    uint8_t retVal = 0; 
 80008aa:	2300      	movs	r3, #0
 80008ac:	73fb      	strb	r3, [r7, #15]

    MCP2515_CS_LOW();
 80008ae:	2200      	movs	r2, #0
 80008b0:	2180      	movs	r1, #128	@ 0x80
 80008b2:	480c      	ldr	r0, [pc, #48]	@ (80008e4 <MCP2515_ReadByte+0x44>)
 80008b4:	f000 fcae 	bl	8001214 <HAL_GPIO_WritePin>
  
    SPI_Tx((uint8_t)INSTRUCTION_READ);
 80008b8:	2003      	movs	r0, #3
 80008ba:	f000 f815 	bl	80008e8 <SPI_Tx>
    SPI_Tx(address);
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 f811 	bl	80008e8 <SPI_Tx>
    retVal = SPI_Rx();
 80008c6:	f000 f821 	bl	800090c <SPI_Rx>
 80008ca:	4603      	mov	r3, r0
 80008cc:	73fb      	strb	r3, [r7, #15]
  
    MCP2515_CS_HIGH();
 80008ce:	2201      	movs	r2, #1
 80008d0:	2180      	movs	r1, #128	@ 0x80
 80008d2:	4804      	ldr	r0, [pc, #16]	@ (80008e4 <MCP2515_ReadByte+0x44>)
 80008d4:	f000 fc9e 	bl	8001214 <HAL_GPIO_WritePin>

    return retVal;
 80008d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	48000400 	.word	0x48000400

080008e8 <SPI_Tx>:

    @{
*/
/******************************************************************************/
static void SPI_Tx(uint8_t data)
{ 
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]

  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);  
 80008f2:	1df9      	adds	r1, r7, #7
 80008f4:	2364      	movs	r3, #100	@ 0x64
 80008f6:	2201      	movs	r2, #1
 80008f8:	4803      	ldr	r0, [pc, #12]	@ (8000908 <SPI_Tx+0x20>)
 80008fa:	f001 feea 	bl	80026d2 <HAL_SPI_Transmit>

}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000078 	.word	0x20000078

0800090c <SPI_Rx>:

    @{
*/
/******************************************************************************/
static uint8_t SPI_Rx(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  read_error = (uint8_t) HAL_SPI_Receive(&hspi1, &retVal, 1, SPI_TIMEOUT);
 8000912:	1df9      	adds	r1, r7, #7
 8000914:	2364      	movs	r3, #100	@ 0x64
 8000916:	2201      	movs	r2, #1
 8000918:	4805      	ldr	r0, [pc, #20]	@ (8000930 <SPI_Rx+0x24>)
 800091a:	f002 f84f 	bl	80029bc <HAL_SPI_Receive>
 800091e:	4603      	mov	r3, r0
 8000920:	461a      	mov	r2, r3
 8000922:	4b04      	ldr	r3, [pc, #16]	@ (8000934 <SPI_Rx+0x28>)
 8000924:	701a      	strb	r2, [r3, #0]

  return retVal;
 8000926:	79fb      	ldrb	r3, [r7, #7]
}
 8000928:	4618      	mov	r0, r3
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000078 	.word	0x20000078
 8000934:	20000164 	.word	0x20000164

08000938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093e:	4b0f      	ldr	r3, [pc, #60]	@ (800097c <HAL_MspInit+0x44>)
 8000940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000942:	4a0e      	ldr	r2, [pc, #56]	@ (800097c <HAL_MspInit+0x44>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6613      	str	r3, [r2, #96]	@ 0x60
 800094a:	4b0c      	ldr	r3, [pc, #48]	@ (800097c <HAL_MspInit+0x44>)
 800094c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	4b09      	ldr	r3, [pc, #36]	@ (800097c <HAL_MspInit+0x44>)
 8000958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800095a:	4a08      	ldr	r2, [pc, #32]	@ (800097c <HAL_MspInit+0x44>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000960:	6593      	str	r3, [r2, #88]	@ 0x58
 8000962:	4b06      	ldr	r3, [pc, #24]	@ (800097c <HAL_MspInit+0x44>)
 8000964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	40021000 	.word	0x40021000

08000980 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	@ 0x28
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a17      	ldr	r2, [pc, #92]	@ (80009fc <HAL_SPI_MspInit+0x7c>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d128      	bne.n	80009f4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009a2:	4b17      	ldr	r3, [pc, #92]	@ (8000a00 <HAL_SPI_MspInit+0x80>)
 80009a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009a6:	4a16      	ldr	r2, [pc, #88]	@ (8000a00 <HAL_SPI_MspInit+0x80>)
 80009a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80009ae:	4b14      	ldr	r3, [pc, #80]	@ (8000a00 <HAL_SPI_MspInit+0x80>)
 80009b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	4b11      	ldr	r3, [pc, #68]	@ (8000a00 <HAL_SPI_MspInit+0x80>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009be:	4a10      	ldr	r2, [pc, #64]	@ (8000a00 <HAL_SPI_MspInit+0x80>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a00 <HAL_SPI_MspInit+0x80>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80009d2:	23c2      	movs	r3, #194	@ 0xc2
 80009d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009de:	2303      	movs	r3, #3
 80009e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009e2:	2305      	movs	r3, #5
 80009e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4619      	mov	r1, r3
 80009ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009f0:	f000 faa6 	bl	8000f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009f4:	bf00      	nop
 80009f6:	3728      	adds	r7, #40	@ 0x28
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40013000 	.word	0x40013000
 8000a00:	40021000 	.word	0x40021000

08000a04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b09e      	sub	sp, #120	@ 0x78
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a1c:	f107 0310 	add.w	r3, r7, #16
 8000a20:	2254      	movs	r2, #84	@ 0x54
 8000a22:	2100      	movs	r1, #0
 8000a24:	4618      	mov	r0, r3
 8000a26:	f003 fa19 	bl	8003e5c <memset>
  if(huart->Instance==USART2)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a28      	ldr	r2, [pc, #160]	@ (8000ad0 <HAL_UART_MspInit+0xcc>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d148      	bne.n	8000ac6 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a34:	2302      	movs	r3, #2
 8000a36:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	4618      	mov	r0, r3
 8000a42:	f001 faab 	bl	8001f9c <HAL_RCCEx_PeriphCLKConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a4c:	f7ff fefe 	bl	800084c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a50:	4b20      	ldr	r3, [pc, #128]	@ (8000ad4 <HAL_UART_MspInit+0xd0>)
 8000a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a54:	4a1f      	ldr	r2, [pc, #124]	@ (8000ad4 <HAL_UART_MspInit+0xd0>)
 8000a56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad4 <HAL_UART_MspInit+0xd0>)
 8000a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a68:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad4 <HAL_UART_MspInit+0xd0>)
 8000a6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6c:	4a19      	ldr	r2, [pc, #100]	@ (8000ad4 <HAL_UART_MspInit+0xd0>)
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a74:	4b17      	ldr	r3, [pc, #92]	@ (8000ad4 <HAL_UART_MspInit+0xd0>)
 8000a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a78:	f003 0301 	and.w	r3, r3, #1
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000a80:	2304      	movs	r3, #4
 8000a82:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a90:	2307      	movs	r3, #7
 8000a92:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000a94:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a98:	4619      	mov	r1, r3
 8000a9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a9e:	f000 fa4f 	bl	8000f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000aa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000aa6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000abc:	4619      	mov	r1, r3
 8000abe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ac2:	f000 fa3d 	bl	8000f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ac6:	bf00      	nop
 8000ac8:	3778      	adds	r7, #120	@ 0x78
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40004400 	.word	0x40004400
 8000ad4:	40021000 	.word	0x40021000

08000ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <NMI_Handler+0x4>

08000ae0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <HardFault_Handler+0x4>

08000ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <MemManage_Handler+0x4>

08000af0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <BusFault_Handler+0x4>

08000af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <UsageFault_Handler+0x4>

08000b00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b2e:	f000 f8dd 	bl	8000cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b40:	4a14      	ldr	r2, [pc, #80]	@ (8000b94 <_sbrk+0x5c>)
 8000b42:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <_sbrk+0x60>)
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b4c:	4b13      	ldr	r3, [pc, #76]	@ (8000b9c <_sbrk+0x64>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d102      	bne.n	8000b5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b54:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <_sbrk+0x64>)
 8000b56:	4a12      	ldr	r2, [pc, #72]	@ (8000ba0 <_sbrk+0x68>)
 8000b58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b5a:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <_sbrk+0x64>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d207      	bcs.n	8000b78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b68:	f003 f980 	bl	8003e6c <__errno>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	220c      	movs	r2, #12
 8000b70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295
 8000b76:	e009      	b.n	8000b8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b78:	4b08      	ldr	r3, [pc, #32]	@ (8000b9c <_sbrk+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b7e:	4b07      	ldr	r3, [pc, #28]	@ (8000b9c <_sbrk+0x64>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	4a05      	ldr	r2, [pc, #20]	@ (8000b9c <_sbrk+0x64>)
 8000b88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3718      	adds	r7, #24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20010000 	.word	0x20010000
 8000b98:	00000400 	.word	0x00000400
 8000b9c:	20000168 	.word	0x20000168
 8000ba0:	200002b8 	.word	0x200002b8

08000ba4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ba8:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <SystemInit+0x20>)
 8000baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bae:	4a05      	ldr	r2, [pc, #20]	@ (8000bc4 <SystemInit+0x20>)
 8000bb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <uart_serial_print>:

    @{
*/
/******************************************************************************/
void uart_serial_print(char* data, uint8_t size)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	70fb      	strb	r3, [r7, #3]
    HAL_UART_Transmit(&huart2, data, size, 100);
 8000bd4:	78fb      	ldrb	r3, [r7, #3]
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	2364      	movs	r3, #100	@ 0x64
 8000bda:	6879      	ldr	r1, [r7, #4]
 8000bdc:	4803      	ldr	r0, [pc, #12]	@ (8000bec <uart_serial_print+0x24>)
 8000bde:	f002 fc51 	bl	8003484 <HAL_UART_Transmit>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200000dc 	.word	0x200000dc

08000bf0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bf0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c28 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bf4:	f7ff ffd6 	bl	8000ba4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf8:	480c      	ldr	r0, [pc, #48]	@ (8000c2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000bfa:	490d      	ldr	r1, [pc, #52]	@ (8000c30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8000c34 <LoopForever+0xe>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c00:	e002      	b.n	8000c08 <LoopCopyDataInit>

08000c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c06:	3304      	adds	r3, #4

08000c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c0c:	d3f9      	bcc.n	8000c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c10:	4c0a      	ldr	r4, [pc, #40]	@ (8000c3c <LoopForever+0x16>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c14:	e001      	b.n	8000c1a <LoopFillZerobss>

08000c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c18:	3204      	adds	r2, #4

08000c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c1c:	d3fb      	bcc.n	8000c16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c1e:	f003 f92b 	bl	8003e78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c22:	f7ff fcf1 	bl	8000608 <main>

08000c26 <LoopForever>:

LoopForever:
    b LoopForever
 8000c26:	e7fe      	b.n	8000c26 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c28:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c30:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c34:	08004a88 	.word	0x08004a88
  ldr r2, =_sbss
 8000c38:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c3c:	200002b8 	.word	0x200002b8

08000c40 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c40:	e7fe      	b.n	8000c40 <ADC1_IRQHandler>

08000c42 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c4c:	2003      	movs	r0, #3
 8000c4e:	f000 f943 	bl	8000ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c52:	2000      	movs	r0, #0
 8000c54:	f000 f80e 	bl	8000c74 <HAL_InitTick>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d002      	beq.n	8000c64 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	71fb      	strb	r3, [r7, #7]
 8000c62:	e001      	b.n	8000c68 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c64:	f7ff fe68 	bl	8000938 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c68:	79fb      	ldrb	r3, [r7, #7]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c80:	4b17      	ldr	r3, [pc, #92]	@ (8000ce0 <HAL_InitTick+0x6c>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d023      	beq.n	8000cd0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c88:	4b16      	ldr	r3, [pc, #88]	@ (8000ce4 <HAL_InitTick+0x70>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4b14      	ldr	r3, [pc, #80]	@ (8000ce0 <HAL_InitTick+0x6c>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	4619      	mov	r1, r3
 8000c92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 f941 	bl	8000f26 <HAL_SYSTICK_Config>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d10f      	bne.n	8000cca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2b0f      	cmp	r3, #15
 8000cae:	d809      	bhi.n	8000cc4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb8:	f000 f919 	bl	8000eee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cbc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce8 <HAL_InitTick+0x74>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6013      	str	r3, [r2, #0]
 8000cc2:	e007      	b.n	8000cd4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	73fb      	strb	r3, [r7, #15]
 8000cc8:	e004      	b.n	8000cd4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	73fb      	strb	r3, [r7, #15]
 8000cce:	e001      	b.n	8000cd4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	20000000 	.word	0x20000000
 8000ce8:	20000004 	.word	0x20000004

08000cec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <HAL_IncTick+0x20>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <HAL_IncTick+0x24>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	4a04      	ldr	r2, [pc, #16]	@ (8000d10 <HAL_IncTick+0x24>)
 8000cfe:	6013      	str	r3, [r2, #0]
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	2000016c 	.word	0x2000016c

08000d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return uwTick;
 8000d18:	4b03      	ldr	r3, [pc, #12]	@ (8000d28 <HAL_GetTick+0x14>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	2000016c 	.word	0x2000016c

08000d2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d34:	f7ff ffee 	bl	8000d14 <HAL_GetTick>
 8000d38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d44:	d005      	beq.n	8000d52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d46:	4b0a      	ldr	r3, [pc, #40]	@ (8000d70 <HAL_Delay+0x44>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4413      	add	r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d52:	bf00      	nop
 8000d54:	f7ff ffde 	bl	8000d14 <HAL_GetTick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d8f7      	bhi.n	8000d54 <HAL_Delay+0x28>
  {
  }
}
 8000d64:	bf00      	nop
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000008 	.word	0x20000008

08000d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d84:	4b0c      	ldr	r3, [pc, #48]	@ (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d90:	4013      	ands	r3, r2
 8000d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da6:	4a04      	ldr	r2, [pc, #16]	@ (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	60d3      	str	r3, [r2, #12]
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc0:	4b04      	ldr	r3, [pc, #16]	@ (8000dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	0a1b      	lsrs	r3, r3, #8
 8000dc6:	f003 0307 	and.w	r3, r3, #7
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	6039      	str	r1, [r7, #0]
 8000de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	db0a      	blt.n	8000e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	490c      	ldr	r1, [pc, #48]	@ (8000e24 <__NVIC_SetPriority+0x4c>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	0112      	lsls	r2, r2, #4
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	440b      	add	r3, r1
 8000dfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e00:	e00a      	b.n	8000e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4908      	ldr	r1, [pc, #32]	@ (8000e28 <__NVIC_SetPriority+0x50>)
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	f003 030f 	and.w	r3, r3, #15
 8000e0e:	3b04      	subs	r3, #4
 8000e10:	0112      	lsls	r2, r2, #4
 8000e12:	b2d2      	uxtb	r2, r2
 8000e14:	440b      	add	r3, r1
 8000e16:	761a      	strb	r2, [r3, #24]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000e100 	.word	0xe000e100
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b089      	sub	sp, #36	@ 0x24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f1c3 0307 	rsb	r3, r3, #7
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	bf28      	it	cs
 8000e4a:	2304      	movcs	r3, #4
 8000e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3304      	adds	r3, #4
 8000e52:	2b06      	cmp	r3, #6
 8000e54:	d902      	bls.n	8000e5c <NVIC_EncodePriority+0x30>
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3b03      	subs	r3, #3
 8000e5a:	e000      	b.n	8000e5e <NVIC_EncodePriority+0x32>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	f04f 32ff 	mov.w	r2, #4294967295
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43da      	mvns	r2, r3
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	401a      	ands	r2, r3
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e74:	f04f 31ff 	mov.w	r1, #4294967295
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7e:	43d9      	mvns	r1, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	4313      	orrs	r3, r2
         );
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3724      	adds	r7, #36	@ 0x24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
	...

08000e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ea4:	d301      	bcc.n	8000eaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e00f      	b.n	8000eca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed4 <SysTick_Config+0x40>)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eb2:	210f      	movs	r1, #15
 8000eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb8:	f7ff ff8e 	bl	8000dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ebc:	4b05      	ldr	r3, [pc, #20]	@ (8000ed4 <SysTick_Config+0x40>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec2:	4b04      	ldr	r3, [pc, #16]	@ (8000ed4 <SysTick_Config+0x40>)
 8000ec4:	2207      	movs	r2, #7
 8000ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	e000e010 	.word	0xe000e010

08000ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f7ff ff47 	bl	8000d74 <__NVIC_SetPriorityGrouping>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b086      	sub	sp, #24
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	60b9      	str	r1, [r7, #8]
 8000ef8:	607a      	str	r2, [r7, #4]
 8000efa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f00:	f7ff ff5c 	bl	8000dbc <__NVIC_GetPriorityGrouping>
 8000f04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	68b9      	ldr	r1, [r7, #8]
 8000f0a:	6978      	ldr	r0, [r7, #20]
 8000f0c:	f7ff ff8e 	bl	8000e2c <NVIC_EncodePriority>
 8000f10:	4602      	mov	r2, r0
 8000f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f16:	4611      	mov	r1, r2
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff5d 	bl	8000dd8 <__NVIC_SetPriority>
}
 8000f1e:	bf00      	nop
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff ffb0 	bl	8000e94 <SysTick_Config>
 8000f34:	4603      	mov	r3, r0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b087      	sub	sp, #28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f4e:	e148      	b.n	80011e2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	2101      	movs	r1, #1
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f000 813a 	beq.w	80011dc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 0303 	and.w	r3, r3, #3
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d005      	beq.n	8000f80 <HAL_GPIO_Init+0x40>
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 0303 	and.w	r3, r3, #3
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d130      	bne.n	8000fe2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	68da      	ldr	r2, [r3, #12]
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	091b      	lsrs	r3, r3, #4
 8000fcc:	f003 0201 	and.w	r2, r3, #1
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	d017      	beq.n	800101e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4013      	ands	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	689a      	ldr	r2, [r3, #8]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	2b02      	cmp	r3, #2
 8001028:	d123      	bne.n	8001072 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	08da      	lsrs	r2, r3, #3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3208      	adds	r2, #8
 8001032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001036:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	220f      	movs	r2, #15
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4013      	ands	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	691a      	ldr	r2, [r3, #16]
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	f003 0307 	and.w	r3, r3, #7
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	08da      	lsrs	r2, r3, #3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3208      	adds	r2, #8
 800106c:	6939      	ldr	r1, [r7, #16]
 800106e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	2203      	movs	r2, #3
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 0203 	and.w	r2, r3, #3
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f000 8094 	beq.w	80011dc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b4:	4b52      	ldr	r3, [pc, #328]	@ (8001200 <HAL_GPIO_Init+0x2c0>)
 80010b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010b8:	4a51      	ldr	r2, [pc, #324]	@ (8001200 <HAL_GPIO_Init+0x2c0>)
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	6613      	str	r3, [r2, #96]	@ 0x60
 80010c0:	4b4f      	ldr	r3, [pc, #316]	@ (8001200 <HAL_GPIO_Init+0x2c0>)
 80010c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010cc:	4a4d      	ldr	r2, [pc, #308]	@ (8001204 <HAL_GPIO_Init+0x2c4>)
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	089b      	lsrs	r3, r3, #2
 80010d2:	3302      	adds	r3, #2
 80010d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	f003 0303 	and.w	r3, r3, #3
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	220f      	movs	r2, #15
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010f6:	d00d      	beq.n	8001114 <HAL_GPIO_Init+0x1d4>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a43      	ldr	r2, [pc, #268]	@ (8001208 <HAL_GPIO_Init+0x2c8>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d007      	beq.n	8001110 <HAL_GPIO_Init+0x1d0>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a42      	ldr	r2, [pc, #264]	@ (800120c <HAL_GPIO_Init+0x2cc>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d101      	bne.n	800110c <HAL_GPIO_Init+0x1cc>
 8001108:	2302      	movs	r3, #2
 800110a:	e004      	b.n	8001116 <HAL_GPIO_Init+0x1d6>
 800110c:	2307      	movs	r3, #7
 800110e:	e002      	b.n	8001116 <HAL_GPIO_Init+0x1d6>
 8001110:	2301      	movs	r3, #1
 8001112:	e000      	b.n	8001116 <HAL_GPIO_Init+0x1d6>
 8001114:	2300      	movs	r3, #0
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	f002 0203 	and.w	r2, r2, #3
 800111c:	0092      	lsls	r2, r2, #2
 800111e:	4093      	lsls	r3, r2
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4313      	orrs	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001126:	4937      	ldr	r1, [pc, #220]	@ (8001204 <HAL_GPIO_Init+0x2c4>)
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	089b      	lsrs	r3, r3, #2
 800112c:	3302      	adds	r3, #2
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001134:	4b36      	ldr	r3, [pc, #216]	@ (8001210 <HAL_GPIO_Init+0x2d0>)
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	43db      	mvns	r3, r3
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4013      	ands	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	4313      	orrs	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001158:	4a2d      	ldr	r2, [pc, #180]	@ (8001210 <HAL_GPIO_Init+0x2d0>)
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800115e:	4b2c      	ldr	r3, [pc, #176]	@ (8001210 <HAL_GPIO_Init+0x2d0>)
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	43db      	mvns	r3, r3
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	4013      	ands	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4313      	orrs	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001182:	4a23      	ldr	r2, [pc, #140]	@ (8001210 <HAL_GPIO_Init+0x2d0>)
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001188:	4b21      	ldr	r3, [pc, #132]	@ (8001210 <HAL_GPIO_Init+0x2d0>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	43db      	mvns	r3, r3
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011ac:	4a18      	ldr	r2, [pc, #96]	@ (8001210 <HAL_GPIO_Init+0x2d0>)
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011b2:	4b17      	ldr	r3, [pc, #92]	@ (8001210 <HAL_GPIO_Init+0x2d0>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	43db      	mvns	r3, r3
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4013      	ands	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001210 <HAL_GPIO_Init+0x2d0>)
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	3301      	adds	r3, #1
 80011e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	fa22 f303 	lsr.w	r3, r2, r3
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f47f aeaf 	bne.w	8000f50 <HAL_GPIO_Init+0x10>
  }
}
 80011f2:	bf00      	nop
 80011f4:	bf00      	nop
 80011f6:	371c      	adds	r7, #28
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	40021000 	.word	0x40021000
 8001204:	40010000 	.word	0x40010000
 8001208:	48000400 	.word	0x48000400
 800120c:	48000800 	.word	0x48000800
 8001210:	40010400 	.word	0x40010400

08001214 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	460b      	mov	r3, r1
 800121e:	807b      	strh	r3, [r7, #2]
 8001220:	4613      	mov	r3, r2
 8001222:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001224:	787b      	ldrb	r3, [r7, #1]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800122a:	887a      	ldrh	r2, [r7, #2]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001230:	e002      	b.n	8001238 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001232:	887a      	ldrh	r2, [r7, #2]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001248:	4b05      	ldr	r3, [pc, #20]	@ (8001260 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a04      	ldr	r2, [pc, #16]	@ (8001260 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800124e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001252:	6013      	str	r3, [r2, #0]
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	40007000 	.word	0x40007000

08001264 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001268:	4b04      	ldr	r3, [pc, #16]	@ (800127c <HAL_PWREx_GetVoltageRange+0x18>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001270:	4618      	mov	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40007000 	.word	0x40007000

08001280 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800128e:	d130      	bne.n	80012f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001290:	4b23      	ldr	r3, [pc, #140]	@ (8001320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001298:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800129c:	d038      	beq.n	8001310 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800129e:	4b20      	ldr	r3, [pc, #128]	@ (8001320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001324 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2232      	movs	r2, #50	@ 0x32
 80012b4:	fb02 f303 	mul.w	r3, r2, r3
 80012b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001328 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012ba:	fba2 2303 	umull	r2, r3, r2, r3
 80012be:	0c9b      	lsrs	r3, r3, #18
 80012c0:	3301      	adds	r3, #1
 80012c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012c4:	e002      	b.n	80012cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	3b01      	subs	r3, #1
 80012ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012cc:	4b14      	ldr	r3, [pc, #80]	@ (8001320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ce:	695b      	ldr	r3, [r3, #20]
 80012d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012d8:	d102      	bne.n	80012e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1f2      	bne.n	80012c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012ec:	d110      	bne.n	8001310 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e00f      	b.n	8001312 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012fe:	d007      	beq.n	8001310 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001300:	4b07      	ldr	r3, [pc, #28]	@ (8001320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001308:	4a05      	ldr	r2, [pc, #20]	@ (8001320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800130a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800130e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40007000 	.word	0x40007000
 8001324:	20000000 	.word	0x20000000
 8001328:	431bde83 	.word	0x431bde83

0800132c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d102      	bne.n	8001340 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	f000 bc02 	b.w	8001b44 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001340:	4b96      	ldr	r3, [pc, #600]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f003 030c 	and.w	r3, r3, #12
 8001348:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800134a:	4b94      	ldr	r3, [pc, #592]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	f003 0303 	and.w	r3, r3, #3
 8001352:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0310 	and.w	r3, r3, #16
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 80e4 	beq.w	800152a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d007      	beq.n	8001378 <HAL_RCC_OscConfig+0x4c>
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	2b0c      	cmp	r3, #12
 800136c:	f040 808b 	bne.w	8001486 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	2b01      	cmp	r3, #1
 8001374:	f040 8087 	bne.w	8001486 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001378:	4b88      	ldr	r3, [pc, #544]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0302 	and.w	r3, r3, #2
 8001380:	2b00      	cmp	r3, #0
 8001382:	d005      	beq.n	8001390 <HAL_RCC_OscConfig+0x64>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d101      	bne.n	8001390 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e3d9      	b.n	8001b44 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a1a      	ldr	r2, [r3, #32]
 8001394:	4b81      	ldr	r3, [pc, #516]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0308 	and.w	r3, r3, #8
 800139c:	2b00      	cmp	r3, #0
 800139e:	d004      	beq.n	80013aa <HAL_RCC_OscConfig+0x7e>
 80013a0:	4b7e      	ldr	r3, [pc, #504]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013a8:	e005      	b.n	80013b6 <HAL_RCC_OscConfig+0x8a>
 80013aa:	4b7c      	ldr	r3, [pc, #496]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 80013ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013b0:	091b      	lsrs	r3, r3, #4
 80013b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d223      	bcs.n	8001402 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a1b      	ldr	r3, [r3, #32]
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 fd8c 	bl	8001edc <RCC_SetFlashLatencyFromMSIRange>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e3ba      	b.n	8001b44 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013ce:	4b73      	ldr	r3, [pc, #460]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a72      	ldr	r2, [pc, #456]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 80013d4:	f043 0308 	orr.w	r3, r3, #8
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	4b70      	ldr	r3, [pc, #448]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a1b      	ldr	r3, [r3, #32]
 80013e6:	496d      	ldr	r1, [pc, #436]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013ec:	4b6b      	ldr	r3, [pc, #428]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	69db      	ldr	r3, [r3, #28]
 80013f8:	021b      	lsls	r3, r3, #8
 80013fa:	4968      	ldr	r1, [pc, #416]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 80013fc:	4313      	orrs	r3, r2
 80013fe:	604b      	str	r3, [r1, #4]
 8001400:	e025      	b.n	800144e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001402:	4b66      	ldr	r3, [pc, #408]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a65      	ldr	r2, [pc, #404]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 8001408:	f043 0308 	orr.w	r3, r3, #8
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	4b63      	ldr	r3, [pc, #396]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a1b      	ldr	r3, [r3, #32]
 800141a:	4960      	ldr	r1, [pc, #384]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 800141c:	4313      	orrs	r3, r2
 800141e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001420:	4b5e      	ldr	r3, [pc, #376]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	021b      	lsls	r3, r3, #8
 800142e:	495b      	ldr	r1, [pc, #364]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 8001430:	4313      	orrs	r3, r2
 8001432:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d109      	bne.n	800144e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a1b      	ldr	r3, [r3, #32]
 800143e:	4618      	mov	r0, r3
 8001440:	f000 fd4c 	bl	8001edc <RCC_SetFlashLatencyFromMSIRange>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e37a      	b.n	8001b44 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800144e:	f000 fc81 	bl	8001d54 <HAL_RCC_GetSysClockFreq>
 8001452:	4602      	mov	r2, r0
 8001454:	4b51      	ldr	r3, [pc, #324]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	091b      	lsrs	r3, r3, #4
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	4950      	ldr	r1, [pc, #320]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 8001460:	5ccb      	ldrb	r3, [r1, r3]
 8001462:	f003 031f 	and.w	r3, r3, #31
 8001466:	fa22 f303 	lsr.w	r3, r2, r3
 800146a:	4a4e      	ldr	r2, [pc, #312]	@ (80015a4 <HAL_RCC_OscConfig+0x278>)
 800146c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800146e:	4b4e      	ldr	r3, [pc, #312]	@ (80015a8 <HAL_RCC_OscConfig+0x27c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fbfe 	bl	8000c74 <HAL_InitTick>
 8001478:	4603      	mov	r3, r0
 800147a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800147c:	7bfb      	ldrb	r3, [r7, #15]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d052      	beq.n	8001528 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	e35e      	b.n	8001b44 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d032      	beq.n	80014f4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800148e:	4b43      	ldr	r3, [pc, #268]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a42      	ldr	r2, [pc, #264]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800149a:	f7ff fc3b 	bl	8000d14 <HAL_GetTick>
 800149e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014a0:	e008      	b.n	80014b4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014a2:	f7ff fc37 	bl	8000d14 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e347      	b.n	8001b44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014b4:	4b39      	ldr	r3, [pc, #228]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d0f0      	beq.n	80014a2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014c0:	4b36      	ldr	r3, [pc, #216]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a35      	ldr	r2, [pc, #212]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 80014c6:	f043 0308 	orr.w	r3, r3, #8
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	4b33      	ldr	r3, [pc, #204]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	4930      	ldr	r1, [pc, #192]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014de:	4b2f      	ldr	r3, [pc, #188]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	021b      	lsls	r3, r3, #8
 80014ec:	492b      	ldr	r1, [pc, #172]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	604b      	str	r3, [r1, #4]
 80014f2:	e01a      	b.n	800152a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014f4:	4b29      	ldr	r3, [pc, #164]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a28      	ldr	r2, [pc, #160]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 80014fa:	f023 0301 	bic.w	r3, r3, #1
 80014fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001500:	f7ff fc08 	bl	8000d14 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001508:	f7ff fc04 	bl	8000d14 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e314      	b.n	8001b44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800151a:	4b20      	ldr	r3, [pc, #128]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f0      	bne.n	8001508 <HAL_RCC_OscConfig+0x1dc>
 8001526:	e000      	b.n	800152a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001528:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b00      	cmp	r3, #0
 8001534:	d073      	beq.n	800161e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	2b08      	cmp	r3, #8
 800153a:	d005      	beq.n	8001548 <HAL_RCC_OscConfig+0x21c>
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	2b0c      	cmp	r3, #12
 8001540:	d10e      	bne.n	8001560 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	2b03      	cmp	r3, #3
 8001546:	d10b      	bne.n	8001560 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001548:	4b14      	ldr	r3, [pc, #80]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d063      	beq.n	800161c <HAL_RCC_OscConfig+0x2f0>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d15f      	bne.n	800161c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e2f1      	b.n	8001b44 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001568:	d106      	bne.n	8001578 <HAL_RCC_OscConfig+0x24c>
 800156a:	4b0c      	ldr	r3, [pc, #48]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a0b      	ldr	r2, [pc, #44]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 8001570:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	e025      	b.n	80015c4 <HAL_RCC_OscConfig+0x298>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001580:	d114      	bne.n	80015ac <HAL_RCC_OscConfig+0x280>
 8001582:	4b06      	ldr	r3, [pc, #24]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a05      	ldr	r2, [pc, #20]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 8001588:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	4b03      	ldr	r3, [pc, #12]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a02      	ldr	r2, [pc, #8]	@ (800159c <HAL_RCC_OscConfig+0x270>)
 8001594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	e013      	b.n	80015c4 <HAL_RCC_OscConfig+0x298>
 800159c:	40021000 	.word	0x40021000
 80015a0:	080049fc 	.word	0x080049fc
 80015a4:	20000000 	.word	0x20000000
 80015a8:	20000004 	.word	0x20000004
 80015ac:	4ba0      	ldr	r3, [pc, #640]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a9f      	ldr	r2, [pc, #636]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 80015b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	4b9d      	ldr	r3, [pc, #628]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a9c      	ldr	r2, [pc, #624]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 80015be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d013      	beq.n	80015f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015cc:	f7ff fba2 	bl	8000d14 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d4:	f7ff fb9e 	bl	8000d14 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b64      	cmp	r3, #100	@ 0x64
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e2ae      	b.n	8001b44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015e6:	4b92      	ldr	r3, [pc, #584]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0f0      	beq.n	80015d4 <HAL_RCC_OscConfig+0x2a8>
 80015f2:	e014      	b.n	800161e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f4:	f7ff fb8e 	bl	8000d14 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015fc:	f7ff fb8a 	bl	8000d14 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b64      	cmp	r3, #100	@ 0x64
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e29a      	b.n	8001b44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800160e:	4b88      	ldr	r3, [pc, #544]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_OscConfig+0x2d0>
 800161a:	e000      	b.n	800161e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800161c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d060      	beq.n	80016ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	2b04      	cmp	r3, #4
 800162e:	d005      	beq.n	800163c <HAL_RCC_OscConfig+0x310>
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	2b0c      	cmp	r3, #12
 8001634:	d119      	bne.n	800166a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	2b02      	cmp	r3, #2
 800163a:	d116      	bne.n	800166a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800163c:	4b7c      	ldr	r3, [pc, #496]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001644:	2b00      	cmp	r3, #0
 8001646:	d005      	beq.n	8001654 <HAL_RCC_OscConfig+0x328>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e277      	b.n	8001b44 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001654:	4b76      	ldr	r3, [pc, #472]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	061b      	lsls	r3, r3, #24
 8001662:	4973      	ldr	r1, [pc, #460]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 8001664:	4313      	orrs	r3, r2
 8001666:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001668:	e040      	b.n	80016ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d023      	beq.n	80016ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001672:	4b6f      	ldr	r3, [pc, #444]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a6e      	ldr	r2, [pc, #440]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 8001678:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800167c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167e:	f7ff fb49 	bl	8000d14 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001686:	f7ff fb45 	bl	8000d14 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e255      	b.n	8001b44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001698:	4b65      	ldr	r3, [pc, #404]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0f0      	beq.n	8001686 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a4:	4b62      	ldr	r3, [pc, #392]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	061b      	lsls	r3, r3, #24
 80016b2:	495f      	ldr	r1, [pc, #380]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	604b      	str	r3, [r1, #4]
 80016b8:	e018      	b.n	80016ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a5c      	ldr	r2, [pc, #368]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 80016c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c6:	f7ff fb25 	bl	8000d14 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ce:	f7ff fb21 	bl	8000d14 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e231      	b.n	8001b44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016e0:	4b53      	ldr	r3, [pc, #332]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1f0      	bne.n	80016ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0308 	and.w	r3, r3, #8
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d03c      	beq.n	8001772 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	695b      	ldr	r3, [r3, #20]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d01c      	beq.n	800173a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001700:	4b4b      	ldr	r3, [pc, #300]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 8001702:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001706:	4a4a      	ldr	r2, [pc, #296]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001710:	f7ff fb00 	bl	8000d14 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001718:	f7ff fafc 	bl	8000d14 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e20c      	b.n	8001b44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800172a:	4b41      	ldr	r3, [pc, #260]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 800172c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0ef      	beq.n	8001718 <HAL_RCC_OscConfig+0x3ec>
 8001738:	e01b      	b.n	8001772 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800173a:	4b3d      	ldr	r3, [pc, #244]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 800173c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001740:	4a3b      	ldr	r2, [pc, #236]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 8001742:	f023 0301 	bic.w	r3, r3, #1
 8001746:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174a:	f7ff fae3 	bl	8000d14 <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001752:	f7ff fadf 	bl	8000d14 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e1ef      	b.n	8001b44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001764:	4b32      	ldr	r3, [pc, #200]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 8001766:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1ef      	bne.n	8001752 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0304 	and.w	r3, r3, #4
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 80a6 	beq.w	80018cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001780:	2300      	movs	r3, #0
 8001782:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001784:	4b2a      	ldr	r3, [pc, #168]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 8001786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001788:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d10d      	bne.n	80017ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001790:	4b27      	ldr	r3, [pc, #156]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 8001792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001794:	4a26      	ldr	r2, [pc, #152]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 8001796:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800179a:	6593      	str	r3, [r2, #88]	@ 0x58
 800179c:	4b24      	ldr	r3, [pc, #144]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 800179e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017a8:	2301      	movs	r3, #1
 80017aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ac:	4b21      	ldr	r3, [pc, #132]	@ (8001834 <HAL_RCC_OscConfig+0x508>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d118      	bne.n	80017ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001834 <HAL_RCC_OscConfig+0x508>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001834 <HAL_RCC_OscConfig+0x508>)
 80017be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017c4:	f7ff faa6 	bl	8000d14 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017cc:	f7ff faa2 	bl	8000d14 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e1b2      	b.n	8001b44 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017de:	4b15      	ldr	r3, [pc, #84]	@ (8001834 <HAL_RCC_OscConfig+0x508>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f0      	beq.n	80017cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d108      	bne.n	8001804 <HAL_RCC_OscConfig+0x4d8>
 80017f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 80017f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001802:	e029      	b.n	8001858 <HAL_RCC_OscConfig+0x52c>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2b05      	cmp	r3, #5
 800180a:	d115      	bne.n	8001838 <HAL_RCC_OscConfig+0x50c>
 800180c:	4b08      	ldr	r3, [pc, #32]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 800180e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001812:	4a07      	ldr	r2, [pc, #28]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 8001814:	f043 0304 	orr.w	r3, r3, #4
 8001818:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800181c:	4b04      	ldr	r3, [pc, #16]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 800181e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001822:	4a03      	ldr	r2, [pc, #12]	@ (8001830 <HAL_RCC_OscConfig+0x504>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800182c:	e014      	b.n	8001858 <HAL_RCC_OscConfig+0x52c>
 800182e:	bf00      	nop
 8001830:	40021000 	.word	0x40021000
 8001834:	40007000 	.word	0x40007000
 8001838:	4b9a      	ldr	r3, [pc, #616]	@ (8001aa4 <HAL_RCC_OscConfig+0x778>)
 800183a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800183e:	4a99      	ldr	r2, [pc, #612]	@ (8001aa4 <HAL_RCC_OscConfig+0x778>)
 8001840:	f023 0301 	bic.w	r3, r3, #1
 8001844:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001848:	4b96      	ldr	r3, [pc, #600]	@ (8001aa4 <HAL_RCC_OscConfig+0x778>)
 800184a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800184e:	4a95      	ldr	r2, [pc, #596]	@ (8001aa4 <HAL_RCC_OscConfig+0x778>)
 8001850:	f023 0304 	bic.w	r3, r3, #4
 8001854:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d016      	beq.n	800188e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001860:	f7ff fa58 	bl	8000d14 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001866:	e00a      	b.n	800187e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001868:	f7ff fa54 	bl	8000d14 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001876:	4293      	cmp	r3, r2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e162      	b.n	8001b44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800187e:	4b89      	ldr	r3, [pc, #548]	@ (8001aa4 <HAL_RCC_OscConfig+0x778>)
 8001880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0ed      	beq.n	8001868 <HAL_RCC_OscConfig+0x53c>
 800188c:	e015      	b.n	80018ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800188e:	f7ff fa41 	bl	8000d14 <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001894:	e00a      	b.n	80018ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001896:	f7ff fa3d 	bl	8000d14 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e14b      	b.n	8001b44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018ac:	4b7d      	ldr	r3, [pc, #500]	@ (8001aa4 <HAL_RCC_OscConfig+0x778>)
 80018ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1ed      	bne.n	8001896 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018ba:	7ffb      	ldrb	r3, [r7, #31]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d105      	bne.n	80018cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c0:	4b78      	ldr	r3, [pc, #480]	@ (8001aa4 <HAL_RCC_OscConfig+0x778>)
 80018c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c4:	4a77      	ldr	r2, [pc, #476]	@ (8001aa4 <HAL_RCC_OscConfig+0x778>)
 80018c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018ca:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0320 	and.w	r3, r3, #32
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d03c      	beq.n	8001952 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d01c      	beq.n	800191a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018e0:	4b70      	ldr	r3, [pc, #448]	@ (8001aa4 <HAL_RCC_OscConfig+0x778>)
 80018e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018e6:	4a6f      	ldr	r2, [pc, #444]	@ (8001aa4 <HAL_RCC_OscConfig+0x778>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f0:	f7ff fa10 	bl	8000d14 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018f8:	f7ff fa0c 	bl	8000d14 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e11c      	b.n	8001b44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800190a:	4b66      	ldr	r3, [pc, #408]	@ (8001aa4 <HAL_RCC_OscConfig+0x778>)
 800190c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0ef      	beq.n	80018f8 <HAL_RCC_OscConfig+0x5cc>
 8001918:	e01b      	b.n	8001952 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800191a:	4b62      	ldr	r3, [pc, #392]	@ (8001aa4 <HAL_RCC_OscConfig+0x778>)
 800191c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001920:	4a60      	ldr	r2, [pc, #384]	@ (8001aa4 <HAL_RCC_OscConfig+0x778>)
 8001922:	f023 0301 	bic.w	r3, r3, #1
 8001926:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192a:	f7ff f9f3 	bl	8000d14 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001932:	f7ff f9ef 	bl	8000d14 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e0ff      	b.n	8001b44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001944:	4b57      	ldr	r3, [pc, #348]	@ (8001aa4 <HAL_RCC_OscConfig+0x778>)
 8001946:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1ef      	bne.n	8001932 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 80f3 	beq.w	8001b42 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001960:	2b02      	cmp	r3, #2
 8001962:	f040 80c9 	bne.w	8001af8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001966:	4b4f      	ldr	r3, [pc, #316]	@ (8001aa4 <HAL_RCC_OscConfig+0x778>)
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	f003 0203 	and.w	r2, r3, #3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001976:	429a      	cmp	r2, r3
 8001978:	d12c      	bne.n	80019d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001984:	3b01      	subs	r3, #1
 8001986:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001988:	429a      	cmp	r2, r3
 800198a:	d123      	bne.n	80019d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001996:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001998:	429a      	cmp	r2, r3
 800199a:	d11b      	bne.n	80019d4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019a6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d113      	bne.n	80019d4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019b6:	085b      	lsrs	r3, r3, #1
 80019b8:	3b01      	subs	r3, #1
 80019ba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019bc:	429a      	cmp	r2, r3
 80019be:	d109      	bne.n	80019d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ca:	085b      	lsrs	r3, r3, #1
 80019cc:	3b01      	subs	r3, #1
 80019ce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d06b      	beq.n	8001aac <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	2b0c      	cmp	r3, #12
 80019d8:	d062      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019da:	4b32      	ldr	r3, [pc, #200]	@ (8001aa4 <HAL_RCC_OscConfig+0x778>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e0ac      	b.n	8001b44 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019ea:	4b2e      	ldr	r3, [pc, #184]	@ (8001aa4 <HAL_RCC_OscConfig+0x778>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a2d      	ldr	r2, [pc, #180]	@ (8001aa4 <HAL_RCC_OscConfig+0x778>)
 80019f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019f4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019f6:	f7ff f98d 	bl	8000d14 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019fe:	f7ff f989 	bl	8000d14 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e099      	b.n	8001b44 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a10:	4b24      	ldr	r3, [pc, #144]	@ (8001aa4 <HAL_RCC_OscConfig+0x778>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1f0      	bne.n	80019fe <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a1c:	4b21      	ldr	r3, [pc, #132]	@ (8001aa4 <HAL_RCC_OscConfig+0x778>)
 8001a1e:	68da      	ldr	r2, [r3, #12]
 8001a20:	4b21      	ldr	r3, [pc, #132]	@ (8001aa8 <HAL_RCC_OscConfig+0x77c>)
 8001a22:	4013      	ands	r3, r2
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001a2c:	3a01      	subs	r2, #1
 8001a2e:	0112      	lsls	r2, r2, #4
 8001a30:	4311      	orrs	r1, r2
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a36:	0212      	lsls	r2, r2, #8
 8001a38:	4311      	orrs	r1, r2
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001a3e:	0852      	lsrs	r2, r2, #1
 8001a40:	3a01      	subs	r2, #1
 8001a42:	0552      	lsls	r2, r2, #21
 8001a44:	4311      	orrs	r1, r2
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a4a:	0852      	lsrs	r2, r2, #1
 8001a4c:	3a01      	subs	r2, #1
 8001a4e:	0652      	lsls	r2, r2, #25
 8001a50:	4311      	orrs	r1, r2
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a56:	06d2      	lsls	r2, r2, #27
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	4912      	ldr	r1, [pc, #72]	@ (8001aa4 <HAL_RCC_OscConfig+0x778>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a60:	4b10      	ldr	r3, [pc, #64]	@ (8001aa4 <HAL_RCC_OscConfig+0x778>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a0f      	ldr	r2, [pc, #60]	@ (8001aa4 <HAL_RCC_OscConfig+0x778>)
 8001a66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a6a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa4 <HAL_RCC_OscConfig+0x778>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	4a0c      	ldr	r2, [pc, #48]	@ (8001aa4 <HAL_RCC_OscConfig+0x778>)
 8001a72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a76:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a78:	f7ff f94c 	bl	8000d14 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a80:	f7ff f948 	bl	8000d14 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e058      	b.n	8001b44 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a92:	4b04      	ldr	r3, [pc, #16]	@ (8001aa4 <HAL_RCC_OscConfig+0x778>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0f0      	beq.n	8001a80 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a9e:	e050      	b.n	8001b42 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e04f      	b.n	8001b44 <HAL_RCC_OscConfig+0x818>
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aac:	4b27      	ldr	r3, [pc, #156]	@ (8001b4c <HAL_RCC_OscConfig+0x820>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d144      	bne.n	8001b42 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ab8:	4b24      	ldr	r3, [pc, #144]	@ (8001b4c <HAL_RCC_OscConfig+0x820>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a23      	ldr	r2, [pc, #140]	@ (8001b4c <HAL_RCC_OscConfig+0x820>)
 8001abe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ac2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ac4:	4b21      	ldr	r3, [pc, #132]	@ (8001b4c <HAL_RCC_OscConfig+0x820>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	4a20      	ldr	r2, [pc, #128]	@ (8001b4c <HAL_RCC_OscConfig+0x820>)
 8001aca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ace:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ad0:	f7ff f920 	bl	8000d14 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad8:	f7ff f91c 	bl	8000d14 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e02c      	b.n	8001b44 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aea:	4b18      	ldr	r3, [pc, #96]	@ (8001b4c <HAL_RCC_OscConfig+0x820>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x7ac>
 8001af6:	e024      	b.n	8001b42 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	2b0c      	cmp	r3, #12
 8001afc:	d01f      	beq.n	8001b3e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afe:	4b13      	ldr	r3, [pc, #76]	@ (8001b4c <HAL_RCC_OscConfig+0x820>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a12      	ldr	r2, [pc, #72]	@ (8001b4c <HAL_RCC_OscConfig+0x820>)
 8001b04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0a:	f7ff f903 	bl	8000d14 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b12:	f7ff f8ff 	bl	8000d14 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e00f      	b.n	8001b44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b24:	4b09      	ldr	r3, [pc, #36]	@ (8001b4c <HAL_RCC_OscConfig+0x820>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1f0      	bne.n	8001b12 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001b30:	4b06      	ldr	r3, [pc, #24]	@ (8001b4c <HAL_RCC_OscConfig+0x820>)
 8001b32:	68da      	ldr	r2, [r3, #12]
 8001b34:	4905      	ldr	r1, [pc, #20]	@ (8001b4c <HAL_RCC_OscConfig+0x820>)
 8001b36:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <HAL_RCC_OscConfig+0x824>)
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60cb      	str	r3, [r1, #12]
 8001b3c:	e001      	b.n	8001b42 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3720      	adds	r7, #32
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	feeefffc 	.word	0xfeeefffc

08001b54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e0e7      	b.n	8001d38 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b68:	4b75      	ldr	r3, [pc, #468]	@ (8001d40 <HAL_RCC_ClockConfig+0x1ec>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d910      	bls.n	8001b98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b76:	4b72      	ldr	r3, [pc, #456]	@ (8001d40 <HAL_RCC_ClockConfig+0x1ec>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f023 0207 	bic.w	r2, r3, #7
 8001b7e:	4970      	ldr	r1, [pc, #448]	@ (8001d40 <HAL_RCC_ClockConfig+0x1ec>)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b86:	4b6e      	ldr	r3, [pc, #440]	@ (8001d40 <HAL_RCC_ClockConfig+0x1ec>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d001      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e0cf      	b.n	8001d38 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d010      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	4b66      	ldr	r3, [pc, #408]	@ (8001d44 <HAL_RCC_ClockConfig+0x1f0>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d908      	bls.n	8001bc6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb4:	4b63      	ldr	r3, [pc, #396]	@ (8001d44 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	4960      	ldr	r1, [pc, #384]	@ (8001d44 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d04c      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b03      	cmp	r3, #3
 8001bd8:	d107      	bne.n	8001bea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bda:	4b5a      	ldr	r3, [pc, #360]	@ (8001d44 <HAL_RCC_ClockConfig+0x1f0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d121      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e0a6      	b.n	8001d38 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d107      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bf2:	4b54      	ldr	r3, [pc, #336]	@ (8001d44 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d115      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e09a      	b.n	8001d38 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d107      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c0a:	4b4e      	ldr	r3, [pc, #312]	@ (8001d44 <HAL_RCC_ClockConfig+0x1f0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d109      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e08e      	b.n	8001d38 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c1a:	4b4a      	ldr	r3, [pc, #296]	@ (8001d44 <HAL_RCC_ClockConfig+0x1f0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e086      	b.n	8001d38 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c2a:	4b46      	ldr	r3, [pc, #280]	@ (8001d44 <HAL_RCC_ClockConfig+0x1f0>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f023 0203 	bic.w	r2, r3, #3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	4943      	ldr	r1, [pc, #268]	@ (8001d44 <HAL_RCC_ClockConfig+0x1f0>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c3c:	f7ff f86a 	bl	8000d14 <HAL_GetTick>
 8001c40:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c42:	e00a      	b.n	8001c5a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c44:	f7ff f866 	bl	8000d14 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e06e      	b.n	8001d38 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d44 <HAL_RCC_ClockConfig+0x1f0>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 020c 	and.w	r2, r3, #12
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d1eb      	bne.n	8001c44 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d010      	beq.n	8001c9a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	4b31      	ldr	r3, [pc, #196]	@ (8001d44 <HAL_RCC_ClockConfig+0x1f0>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d208      	bcs.n	8001c9a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c88:	4b2e      	ldr	r3, [pc, #184]	@ (8001d44 <HAL_RCC_ClockConfig+0x1f0>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	492b      	ldr	r1, [pc, #172]	@ (8001d44 <HAL_RCC_ClockConfig+0x1f0>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c9a:	4b29      	ldr	r3, [pc, #164]	@ (8001d40 <HAL_RCC_ClockConfig+0x1ec>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d210      	bcs.n	8001cca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca8:	4b25      	ldr	r3, [pc, #148]	@ (8001d40 <HAL_RCC_ClockConfig+0x1ec>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f023 0207 	bic.w	r2, r3, #7
 8001cb0:	4923      	ldr	r1, [pc, #140]	@ (8001d40 <HAL_RCC_ClockConfig+0x1ec>)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb8:	4b21      	ldr	r3, [pc, #132]	@ (8001d40 <HAL_RCC_ClockConfig+0x1ec>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d001      	beq.n	8001cca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e036      	b.n	8001d38 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0304 	and.w	r3, r3, #4
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d008      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d44 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	4918      	ldr	r1, [pc, #96]	@ (8001d44 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0308 	and.w	r3, r3, #8
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d009      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cf4:	4b13      	ldr	r3, [pc, #76]	@ (8001d44 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	4910      	ldr	r1, [pc, #64]	@ (8001d44 <HAL_RCC_ClockConfig+0x1f0>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d08:	f000 f824 	bl	8001d54 <HAL_RCC_GetSysClockFreq>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d44 <HAL_RCC_ClockConfig+0x1f0>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	091b      	lsrs	r3, r3, #4
 8001d14:	f003 030f 	and.w	r3, r3, #15
 8001d18:	490b      	ldr	r1, [pc, #44]	@ (8001d48 <HAL_RCC_ClockConfig+0x1f4>)
 8001d1a:	5ccb      	ldrb	r3, [r1, r3]
 8001d1c:	f003 031f 	and.w	r3, r3, #31
 8001d20:	fa22 f303 	lsr.w	r3, r2, r3
 8001d24:	4a09      	ldr	r2, [pc, #36]	@ (8001d4c <HAL_RCC_ClockConfig+0x1f8>)
 8001d26:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d28:	4b09      	ldr	r3, [pc, #36]	@ (8001d50 <HAL_RCC_ClockConfig+0x1fc>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7fe ffa1 	bl	8000c74 <HAL_InitTick>
 8001d32:	4603      	mov	r3, r0
 8001d34:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d36:	7afb      	ldrb	r3, [r7, #11]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40022000 	.word	0x40022000
 8001d44:	40021000 	.word	0x40021000
 8001d48:	080049fc 	.word	0x080049fc
 8001d4c:	20000000 	.word	0x20000000
 8001d50:	20000004 	.word	0x20000004

08001d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b089      	sub	sp, #36	@ 0x24
 8001d58:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d62:	4b3e      	ldr	r3, [pc, #248]	@ (8001e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 030c 	and.w	r3, r3, #12
 8001d6a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d6c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <HAL_RCC_GetSysClockFreq+0x34>
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	2b0c      	cmp	r3, #12
 8001d80:	d121      	bne.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d11e      	bne.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d88:	4b34      	ldr	r3, [pc, #208]	@ (8001e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0308 	and.w	r3, r3, #8
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d107      	bne.n	8001da4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d94:	4b31      	ldr	r3, [pc, #196]	@ (8001e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d9a:	0a1b      	lsrs	r3, r3, #8
 8001d9c:	f003 030f 	and.w	r3, r3, #15
 8001da0:	61fb      	str	r3, [r7, #28]
 8001da2:	e005      	b.n	8001db0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001da4:	4b2d      	ldr	r3, [pc, #180]	@ (8001e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	091b      	lsrs	r3, r3, #4
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001db0:	4a2b      	ldr	r2, [pc, #172]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d10d      	bne.n	8001ddc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dc4:	e00a      	b.n	8001ddc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	2b04      	cmp	r3, #4
 8001dca:	d102      	bne.n	8001dd2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001dcc:	4b25      	ldr	r3, [pc, #148]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dce:	61bb      	str	r3, [r7, #24]
 8001dd0:	e004      	b.n	8001ddc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	d101      	bne.n	8001ddc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001dd8:	4b23      	ldr	r3, [pc, #140]	@ (8001e68 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dda:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	2b0c      	cmp	r3, #12
 8001de0:	d134      	bne.n	8001e4c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001de2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d003      	beq.n	8001dfa <HAL_RCC_GetSysClockFreq+0xa6>
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2b03      	cmp	r3, #3
 8001df6:	d003      	beq.n	8001e00 <HAL_RCC_GetSysClockFreq+0xac>
 8001df8:	e005      	b.n	8001e06 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dfc:	617b      	str	r3, [r7, #20]
      break;
 8001dfe:	e005      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e00:	4b19      	ldr	r3, [pc, #100]	@ (8001e68 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e02:	617b      	str	r3, [r7, #20]
      break;
 8001e04:	e002      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	617b      	str	r3, [r7, #20]
      break;
 8001e0a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e0c:	4b13      	ldr	r3, [pc, #76]	@ (8001e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	091b      	lsrs	r3, r3, #4
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	3301      	adds	r3, #1
 8001e18:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e1a:	4b10      	ldr	r3, [pc, #64]	@ (8001e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	0a1b      	lsrs	r3, r3, #8
 8001e20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	fb03 f202 	mul.w	r2, r3, r2
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e30:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e32:	4b0a      	ldr	r3, [pc, #40]	@ (8001e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	0e5b      	lsrs	r3, r3, #25
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e4c:	69bb      	ldr	r3, [r7, #24]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3724      	adds	r7, #36	@ 0x24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	08004a14 	.word	0x08004a14
 8001e64:	00f42400 	.word	0x00f42400
 8001e68:	007a1200 	.word	0x007a1200

08001e6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e70:	4b03      	ldr	r3, [pc, #12]	@ (8001e80 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e72:	681b      	ldr	r3, [r3, #0]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	20000000 	.word	0x20000000

08001e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e88:	f7ff fff0 	bl	8001e6c <HAL_RCC_GetHCLKFreq>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	0a1b      	lsrs	r3, r3, #8
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	4904      	ldr	r1, [pc, #16]	@ (8001eac <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e9a:	5ccb      	ldrb	r3, [r1, r3]
 8001e9c:	f003 031f 	and.w	r3, r3, #31
 8001ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	08004a0c 	.word	0x08004a0c

08001eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001eb4:	f7ff ffda 	bl	8001e6c <HAL_RCC_GetHCLKFreq>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	0adb      	lsrs	r3, r3, #11
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	4904      	ldr	r1, [pc, #16]	@ (8001ed8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ec6:	5ccb      	ldrb	r3, [r1, r3]
 8001ec8:	f003 031f 	and.w	r3, r3, #31
 8001ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	08004a0c 	.word	0x08004a0c

08001edc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ee8:	4b2a      	ldr	r3, [pc, #168]	@ (8001f94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ef4:	f7ff f9b6 	bl	8001264 <HAL_PWREx_GetVoltageRange>
 8001ef8:	6178      	str	r0, [r7, #20]
 8001efa:	e014      	b.n	8001f26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001efc:	4b25      	ldr	r3, [pc, #148]	@ (8001f94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f00:	4a24      	ldr	r2, [pc, #144]	@ (8001f94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f06:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f08:	4b22      	ldr	r3, [pc, #136]	@ (8001f94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f14:	f7ff f9a6 	bl	8001264 <HAL_PWREx_GetVoltageRange>
 8001f18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001f94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1e:	4a1d      	ldr	r2, [pc, #116]	@ (8001f94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f24:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f2c:	d10b      	bne.n	8001f46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b80      	cmp	r3, #128	@ 0x80
 8001f32:	d919      	bls.n	8001f68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2ba0      	cmp	r3, #160	@ 0xa0
 8001f38:	d902      	bls.n	8001f40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	e013      	b.n	8001f68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f40:	2301      	movs	r3, #1
 8001f42:	613b      	str	r3, [r7, #16]
 8001f44:	e010      	b.n	8001f68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b80      	cmp	r3, #128	@ 0x80
 8001f4a:	d902      	bls.n	8001f52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	e00a      	b.n	8001f68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b80      	cmp	r3, #128	@ 0x80
 8001f56:	d102      	bne.n	8001f5e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f58:	2302      	movs	r3, #2
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	e004      	b.n	8001f68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b70      	cmp	r3, #112	@ 0x70
 8001f62:	d101      	bne.n	8001f68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f64:	2301      	movs	r3, #1
 8001f66:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f68:	4b0b      	ldr	r3, [pc, #44]	@ (8001f98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f023 0207 	bic.w	r2, r3, #7
 8001f70:	4909      	ldr	r1, [pc, #36]	@ (8001f98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f78:	4b07      	ldr	r3, [pc, #28]	@ (8001f98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d001      	beq.n	8001f8a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e000      	b.n	8001f8c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40021000 	.word	0x40021000
 8001f98:	40022000 	.word	0x40022000

08001f9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fa8:	2300      	movs	r3, #0
 8001faa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d031      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fbc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001fc0:	d01a      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001fc2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001fc6:	d814      	bhi.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d009      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001fcc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001fd0:	d10f      	bne.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001fd2:	4b5d      	ldr	r3, [pc, #372]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	4a5c      	ldr	r2, [pc, #368]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fdc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fde:	e00c      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 f9de 	bl	80023a8 <RCCEx_PLLSAI1_Config>
 8001fec:	4603      	mov	r3, r0
 8001fee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ff0:	e003      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	74fb      	strb	r3, [r7, #19]
      break;
 8001ff6:	e000      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001ff8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ffa:	7cfb      	ldrb	r3, [r7, #19]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10b      	bne.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002000:	4b51      	ldr	r3, [pc, #324]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002006:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800200e:	494e      	ldr	r1, [pc, #312]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002010:	4313      	orrs	r3, r2
 8002012:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002016:	e001      	b.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002018:	7cfb      	ldrb	r3, [r7, #19]
 800201a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 809e 	beq.w	8002166 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800202a:	2300      	movs	r3, #0
 800202c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800202e:	4b46      	ldr	r3, [pc, #280]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002032:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800203e:	2300      	movs	r3, #0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00d      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002044:	4b40      	ldr	r3, [pc, #256]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002048:	4a3f      	ldr	r2, [pc, #252]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800204a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800204e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002050:	4b3d      	ldr	r3, [pc, #244]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002054:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800205c:	2301      	movs	r3, #1
 800205e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002060:	4b3a      	ldr	r3, [pc, #232]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a39      	ldr	r2, [pc, #228]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002066:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800206a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800206c:	f7fe fe52 	bl	8000d14 <HAL_GetTick>
 8002070:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002072:	e009      	b.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002074:	f7fe fe4e 	bl	8000d14 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d902      	bls.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	74fb      	strb	r3, [r7, #19]
        break;
 8002086:	e005      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002088:	4b30      	ldr	r3, [pc, #192]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0ef      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002094:	7cfb      	ldrb	r3, [r7, #19]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d15a      	bne.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800209a:	4b2b      	ldr	r3, [pc, #172]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800209c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d01e      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d019      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020b6:	4b24      	ldr	r3, [pc, #144]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020c0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020c2:	4b21      	ldr	r3, [pc, #132]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c8:	4a1f      	ldr	r2, [pc, #124]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020e2:	4a19      	ldr	r2, [pc, #100]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d016      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f4:	f7fe fe0e 	bl	8000d14 <HAL_GetTick>
 80020f8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020fa:	e00b      	b.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fc:	f7fe fe0a 	bl	8000d14 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	f241 3288 	movw	r2, #5000	@ 0x1388
 800210a:	4293      	cmp	r3, r2
 800210c:	d902      	bls.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	74fb      	strb	r3, [r7, #19]
            break;
 8002112:	e006      	b.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002114:	4b0c      	ldr	r3, [pc, #48]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0ec      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002122:	7cfb      	ldrb	r3, [r7, #19]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d10b      	bne.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002128:	4b07      	ldr	r3, [pc, #28]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800212a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800212e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002136:	4904      	ldr	r1, [pc, #16]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002138:	4313      	orrs	r3, r2
 800213a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800213e:	e009      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002140:	7cfb      	ldrb	r3, [r7, #19]
 8002142:	74bb      	strb	r3, [r7, #18]
 8002144:	e006      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000
 800214c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002150:	7cfb      	ldrb	r3, [r7, #19]
 8002152:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002154:	7c7b      	ldrb	r3, [r7, #17]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d105      	bne.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800215a:	4b8a      	ldr	r3, [pc, #552]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800215c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215e:	4a89      	ldr	r2, [pc, #548]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002160:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002164:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00a      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002172:	4b84      	ldr	r3, [pc, #528]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002178:	f023 0203 	bic.w	r2, r3, #3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	4980      	ldr	r1, [pc, #512]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002182:	4313      	orrs	r3, r2
 8002184:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00a      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002194:	4b7b      	ldr	r3, [pc, #492]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800219a:	f023 020c 	bic.w	r2, r3, #12
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a2:	4978      	ldr	r1, [pc, #480]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0320 	and.w	r3, r3, #32
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00a      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021b6:	4b73      	ldr	r3, [pc, #460]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021bc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c4:	496f      	ldr	r1, [pc, #444]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00a      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021d8:	4b6a      	ldr	r3, [pc, #424]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021de:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021e6:	4967      	ldr	r1, [pc, #412]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00a      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021fa:	4b62      	ldr	r3, [pc, #392]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002200:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002208:	495e      	ldr	r1, [pc, #376]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800220a:	4313      	orrs	r3, r2
 800220c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00a      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800221c:	4b59      	ldr	r3, [pc, #356]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002222:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222a:	4956      	ldr	r1, [pc, #344]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800222c:	4313      	orrs	r3, r2
 800222e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00a      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800223e:	4b51      	ldr	r3, [pc, #324]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002240:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002244:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224c:	494d      	ldr	r1, [pc, #308]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800224e:	4313      	orrs	r3, r2
 8002250:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d028      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002260:	4b48      	ldr	r3, [pc, #288]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002266:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226e:	4945      	ldr	r1, [pc, #276]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002270:	4313      	orrs	r3, r2
 8002272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800227e:	d106      	bne.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002280:	4b40      	ldr	r3, [pc, #256]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	4a3f      	ldr	r2, [pc, #252]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002286:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800228a:	60d3      	str	r3, [r2, #12]
 800228c:	e011      	b.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002292:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002296:	d10c      	bne.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3304      	adds	r3, #4
 800229c:	2101      	movs	r1, #1
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 f882 	bl	80023a8 <RCCEx_PLLSAI1_Config>
 80022a4:	4603      	mov	r3, r0
 80022a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80022a8:	7cfb      	ldrb	r3, [r7, #19]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80022ae:	7cfb      	ldrb	r3, [r7, #19]
 80022b0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d028      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022be:	4b31      	ldr	r3, [pc, #196]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022cc:	492d      	ldr	r1, [pc, #180]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022dc:	d106      	bne.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022de:	4b29      	ldr	r3, [pc, #164]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	4a28      	ldr	r2, [pc, #160]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022e8:	60d3      	str	r3, [r2, #12]
 80022ea:	e011      	b.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022f4:	d10c      	bne.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	3304      	adds	r3, #4
 80022fa:	2101      	movs	r1, #1
 80022fc:	4618      	mov	r0, r3
 80022fe:	f000 f853 	bl	80023a8 <RCCEx_PLLSAI1_Config>
 8002302:	4603      	mov	r3, r0
 8002304:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002306:	7cfb      	ldrb	r3, [r7, #19]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800230c:	7cfb      	ldrb	r3, [r7, #19]
 800230e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d01c      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800231c:	4b19      	ldr	r3, [pc, #100]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002322:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800232a:	4916      	ldr	r1, [pc, #88]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002336:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800233a:	d10c      	bne.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3304      	adds	r3, #4
 8002340:	2102      	movs	r1, #2
 8002342:	4618      	mov	r0, r3
 8002344:	f000 f830 	bl	80023a8 <RCCEx_PLLSAI1_Config>
 8002348:	4603      	mov	r3, r0
 800234a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800234c:	7cfb      	ldrb	r3, [r7, #19]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002352:	7cfb      	ldrb	r3, [r7, #19]
 8002354:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00a      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002362:	4b08      	ldr	r3, [pc, #32]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002368:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002370:	4904      	ldr	r1, [pc, #16]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002372:	4313      	orrs	r3, r2
 8002374:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002378:	7cbb      	ldrb	r3, [r7, #18]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40021000 	.word	0x40021000

08002388 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800238c:	4b05      	ldr	r3, [pc, #20]	@ (80023a4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a04      	ldr	r2, [pc, #16]	@ (80023a4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002392:	f043 0304 	orr.w	r3, r3, #4
 8002396:	6013      	str	r3, [r2, #0]
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	40021000 	.word	0x40021000

080023a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023b6:	4b74      	ldr	r3, [pc, #464]	@ (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d018      	beq.n	80023f4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80023c2:	4b71      	ldr	r3, [pc, #452]	@ (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	f003 0203 	and.w	r2, r3, #3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d10d      	bne.n	80023ee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
       ||
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d009      	beq.n	80023ee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80023da:	4b6b      	ldr	r3, [pc, #428]	@ (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	091b      	lsrs	r3, r3, #4
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
       ||
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d047      	beq.n	800247e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	73fb      	strb	r3, [r7, #15]
 80023f2:	e044      	b.n	800247e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	d018      	beq.n	800242e <RCCEx_PLLSAI1_Config+0x86>
 80023fc:	2b03      	cmp	r3, #3
 80023fe:	d825      	bhi.n	800244c <RCCEx_PLLSAI1_Config+0xa4>
 8002400:	2b01      	cmp	r3, #1
 8002402:	d002      	beq.n	800240a <RCCEx_PLLSAI1_Config+0x62>
 8002404:	2b02      	cmp	r3, #2
 8002406:	d009      	beq.n	800241c <RCCEx_PLLSAI1_Config+0x74>
 8002408:	e020      	b.n	800244c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800240a:	4b5f      	ldr	r3, [pc, #380]	@ (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d11d      	bne.n	8002452 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800241a:	e01a      	b.n	8002452 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800241c:	4b5a      	ldr	r3, [pc, #360]	@ (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002424:	2b00      	cmp	r3, #0
 8002426:	d116      	bne.n	8002456 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800242c:	e013      	b.n	8002456 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800242e:	4b56      	ldr	r3, [pc, #344]	@ (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10f      	bne.n	800245a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800243a:	4b53      	ldr	r3, [pc, #332]	@ (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d109      	bne.n	800245a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800244a:	e006      	b.n	800245a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	73fb      	strb	r3, [r7, #15]
      break;
 8002450:	e004      	b.n	800245c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002452:	bf00      	nop
 8002454:	e002      	b.n	800245c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002456:	bf00      	nop
 8002458:	e000      	b.n	800245c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800245a:	bf00      	nop
    }

    if(status == HAL_OK)
 800245c:	7bfb      	ldrb	r3, [r7, #15]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10d      	bne.n	800247e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002462:	4b49      	ldr	r3, [pc, #292]	@ (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6819      	ldr	r1, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	3b01      	subs	r3, #1
 8002474:	011b      	lsls	r3, r3, #4
 8002476:	430b      	orrs	r3, r1
 8002478:	4943      	ldr	r1, [pc, #268]	@ (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 800247a:	4313      	orrs	r3, r2
 800247c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800247e:	7bfb      	ldrb	r3, [r7, #15]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d17c      	bne.n	800257e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002484:	4b40      	ldr	r3, [pc, #256]	@ (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a3f      	ldr	r2, [pc, #252]	@ (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 800248a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800248e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002490:	f7fe fc40 	bl	8000d14 <HAL_GetTick>
 8002494:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002496:	e009      	b.n	80024ac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002498:	f7fe fc3c 	bl	8000d14 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d902      	bls.n	80024ac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	73fb      	strb	r3, [r7, #15]
        break;
 80024aa:	e005      	b.n	80024b8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024ac:	4b36      	ldr	r3, [pc, #216]	@ (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1ef      	bne.n	8002498 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d15f      	bne.n	800257e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d110      	bne.n	80024e6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024c4:	4b30      	ldr	r3, [pc, #192]	@ (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80024cc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6892      	ldr	r2, [r2, #8]
 80024d4:	0211      	lsls	r1, r2, #8
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	68d2      	ldr	r2, [r2, #12]
 80024da:	06d2      	lsls	r2, r2, #27
 80024dc:	430a      	orrs	r2, r1
 80024de:	492a      	ldr	r1, [pc, #168]	@ (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	610b      	str	r3, [r1, #16]
 80024e4:	e027      	b.n	8002536 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d112      	bne.n	8002512 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024ec:	4b26      	ldr	r3, [pc, #152]	@ (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80024f4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6892      	ldr	r2, [r2, #8]
 80024fc:	0211      	lsls	r1, r2, #8
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6912      	ldr	r2, [r2, #16]
 8002502:	0852      	lsrs	r2, r2, #1
 8002504:	3a01      	subs	r2, #1
 8002506:	0552      	lsls	r2, r2, #21
 8002508:	430a      	orrs	r2, r1
 800250a:	491f      	ldr	r1, [pc, #124]	@ (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 800250c:	4313      	orrs	r3, r2
 800250e:	610b      	str	r3, [r1, #16]
 8002510:	e011      	b.n	8002536 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002512:	4b1d      	ldr	r3, [pc, #116]	@ (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800251a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6892      	ldr	r2, [r2, #8]
 8002522:	0211      	lsls	r1, r2, #8
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6952      	ldr	r2, [r2, #20]
 8002528:	0852      	lsrs	r2, r2, #1
 800252a:	3a01      	subs	r2, #1
 800252c:	0652      	lsls	r2, r2, #25
 800252e:	430a      	orrs	r2, r1
 8002530:	4915      	ldr	r1, [pc, #84]	@ (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002532:	4313      	orrs	r3, r2
 8002534:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002536:	4b14      	ldr	r3, [pc, #80]	@ (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a13      	ldr	r2, [pc, #76]	@ (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 800253c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002540:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002542:	f7fe fbe7 	bl	8000d14 <HAL_GetTick>
 8002546:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002548:	e009      	b.n	800255e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800254a:	f7fe fbe3 	bl	8000d14 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d902      	bls.n	800255e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	73fb      	strb	r3, [r7, #15]
          break;
 800255c:	e005      	b.n	800256a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800255e:	4b0a      	ldr	r3, [pc, #40]	@ (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0ef      	beq.n	800254a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800256a:	7bfb      	ldrb	r3, [r7, #15]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d106      	bne.n	800257e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002570:	4b05      	ldr	r3, [pc, #20]	@ (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002572:	691a      	ldr	r2, [r3, #16]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	4903      	ldr	r1, [pc, #12]	@ (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 800257a:	4313      	orrs	r3, r2
 800257c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800257e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002580:	4618      	mov	r0, r3
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40021000 	.word	0x40021000

0800258c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e095      	b.n	80026ca <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d108      	bne.n	80025b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025ae:	d009      	beq.n	80025c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	61da      	str	r2, [r3, #28]
 80025b6:	e005      	b.n	80025c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d106      	bne.n	80025e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7fe f9ce 	bl	8000980 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2202      	movs	r2, #2
 80025e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002604:	d902      	bls.n	800260c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	e002      	b.n	8002612 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800260c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002610:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800261a:	d007      	beq.n	800262c <HAL_SPI_Init+0xa0>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002624:	d002      	beq.n	800262c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800263c:	431a      	orrs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	431a      	orrs	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	431a      	orrs	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002664:	431a      	orrs	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800266e:	ea42 0103 	orr.w	r1, r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002676:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	0c1b      	lsrs	r3, r3, #16
 8002688:	f003 0204 	and.w	r2, r3, #4
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002690:	f003 0310 	and.w	r3, r3, #16
 8002694:	431a      	orrs	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80026a8:	ea42 0103 	orr.w	r1, r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b088      	sub	sp, #32
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	60f8      	str	r0, [r7, #12]
 80026da:	60b9      	str	r1, [r7, #8]
 80026dc:	603b      	str	r3, [r7, #0]
 80026de:	4613      	mov	r3, r2
 80026e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <HAL_SPI_Transmit+0x22>
 80026f0:	2302      	movs	r3, #2
 80026f2:	e15f      	b.n	80029b4 <HAL_SPI_Transmit+0x2e2>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026fc:	f7fe fb0a 	bl	8000d14 <HAL_GetTick>
 8002700:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002702:	88fb      	ldrh	r3, [r7, #6]
 8002704:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b01      	cmp	r3, #1
 8002710:	d002      	beq.n	8002718 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002712:	2302      	movs	r3, #2
 8002714:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002716:	e148      	b.n	80029aa <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d002      	beq.n	8002724 <HAL_SPI_Transmit+0x52>
 800271e:	88fb      	ldrh	r3, [r7, #6]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d102      	bne.n	800272a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002728:	e13f      	b.n	80029aa <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2203      	movs	r2, #3
 800272e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	88fa      	ldrh	r2, [r7, #6]
 8002742:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	88fa      	ldrh	r2, [r7, #6]
 8002748:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002774:	d10f      	bne.n	8002796 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002784:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002794:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027a0:	2b40      	cmp	r3, #64	@ 0x40
 80027a2:	d007      	beq.n	80027b4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80027bc:	d94f      	bls.n	800285e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <HAL_SPI_Transmit+0xfa>
 80027c6:	8afb      	ldrh	r3, [r7, #22]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d142      	bne.n	8002852 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027d0:	881a      	ldrh	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027dc:	1c9a      	adds	r2, r3, #2
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	3b01      	subs	r3, #1
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80027f0:	e02f      	b.n	8002852 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d112      	bne.n	8002826 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002804:	881a      	ldrh	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002810:	1c9a      	adds	r2, r3, #2
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800281a:	b29b      	uxth	r3, r3
 800281c:	3b01      	subs	r3, #1
 800281e:	b29a      	uxth	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002824:	e015      	b.n	8002852 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002826:	f7fe fa75 	bl	8000d14 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d803      	bhi.n	800283e <HAL_SPI_Transmit+0x16c>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283c:	d102      	bne.n	8002844 <HAL_SPI_Transmit+0x172>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d106      	bne.n	8002852 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002850:	e0ab      	b.n	80029aa <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002856:	b29b      	uxth	r3, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1ca      	bne.n	80027f2 <HAL_SPI_Transmit+0x120>
 800285c:	e080      	b.n	8002960 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d002      	beq.n	800286c <HAL_SPI_Transmit+0x19a>
 8002866:	8afb      	ldrh	r3, [r7, #22]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d174      	bne.n	8002956 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002870:	b29b      	uxth	r3, r3
 8002872:	2b01      	cmp	r3, #1
 8002874:	d912      	bls.n	800289c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800287a:	881a      	ldrh	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002886:	1c9a      	adds	r2, r3, #2
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002890:	b29b      	uxth	r3, r3
 8002892:	3b02      	subs	r3, #2
 8002894:	b29a      	uxth	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800289a:	e05c      	b.n	8002956 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	330c      	adds	r3, #12
 80028a6:	7812      	ldrb	r2, [r2, #0]
 80028a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ae:	1c5a      	adds	r2, r3, #1
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80028c2:	e048      	b.n	8002956 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d12b      	bne.n	800292a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d912      	bls.n	8002902 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e0:	881a      	ldrh	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ec:	1c9a      	adds	r2, r3, #2
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	3b02      	subs	r3, #2
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002900:	e029      	b.n	8002956 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	330c      	adds	r3, #12
 800290c:	7812      	ldrb	r2, [r2, #0]
 800290e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800291e:	b29b      	uxth	r3, r3
 8002920:	3b01      	subs	r3, #1
 8002922:	b29a      	uxth	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002928:	e015      	b.n	8002956 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800292a:	f7fe f9f3 	bl	8000d14 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	429a      	cmp	r2, r3
 8002938:	d803      	bhi.n	8002942 <HAL_SPI_Transmit+0x270>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002940:	d102      	bne.n	8002948 <HAL_SPI_Transmit+0x276>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d106      	bne.n	8002956 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002954:	e029      	b.n	80029aa <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800295a:	b29b      	uxth	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1b1      	bne.n	80028c4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	6839      	ldr	r1, [r7, #0]
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f000 fcf9 	bl	800335c <SPI_EndRxTxTransaction>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d002      	beq.n	8002976 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2220      	movs	r2, #32
 8002974:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10a      	bne.n	8002994 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800297e:	2300      	movs	r3, #0
 8002980:	613b      	str	r3, [r7, #16]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	613b      	str	r3, [r7, #16]
 8002992:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002998:	2b00      	cmp	r3, #0
 800299a:	d002      	beq.n	80029a2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	77fb      	strb	r3, [r7, #31]
 80029a0:	e003      	b.n	80029aa <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80029b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3720      	adds	r7, #32
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b088      	sub	sp, #32
 80029c0:	af02      	add	r7, sp, #8
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	4613      	mov	r3, r2
 80029ca:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80029cc:	2300      	movs	r3, #0
 80029ce:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d002      	beq.n	80029e2 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80029dc:	2302      	movs	r3, #2
 80029de:	75fb      	strb	r3, [r7, #23]
    goto error;
 80029e0:	e11a      	b.n	8002c18 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029ea:	d112      	bne.n	8002a12 <HAL_SPI_Receive+0x56>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10e      	bne.n	8002a12 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2204      	movs	r2, #4
 80029f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80029fc:	88fa      	ldrh	r2, [r7, #6]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	4613      	mov	r3, r2
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	68b9      	ldr	r1, [r7, #8]
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 f90e 	bl	8002c2a <HAL_SPI_TransmitReceive>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	e107      	b.n	8002c22 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_SPI_Receive+0x64>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e100      	b.n	8002c22 <HAL_SPI_Receive+0x266>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a28:	f7fe f974 	bl	8000d14 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d002      	beq.n	8002a3a <HAL_SPI_Receive+0x7e>
 8002a34:	88fb      	ldrh	r3, [r7, #6]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d102      	bne.n	8002a40 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a3e:	e0eb      	b.n	8002c18 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2204      	movs	r2, #4
 8002a44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	88fa      	ldrh	r2, [r7, #6]
 8002a58:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	88fa      	ldrh	r2, [r7, #6]
 8002a60:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a8a:	d908      	bls.n	8002a9e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a9a:	605a      	str	r2, [r3, #4]
 8002a9c:	e007      	b.n	8002aae <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002aac:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ab6:	d10f      	bne.n	8002ad8 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ac6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002ad6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ae2:	2b40      	cmp	r3, #64	@ 0x40
 8002ae4:	d007      	beq.n	8002af6 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002af4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002afe:	d86f      	bhi.n	8002be0 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002b00:	e034      	b.n	8002b6c <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d117      	bne.n	8002b40 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f103 020c 	add.w	r2, r3, #12
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1c:	7812      	ldrb	r2, [r2, #0]
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002b3e:	e015      	b.n	8002b6c <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b40:	f7fe f8e8 	bl	8000d14 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d803      	bhi.n	8002b58 <HAL_SPI_Receive+0x19c>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b56:	d102      	bne.n	8002b5e <HAL_SPI_Receive+0x1a2>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d106      	bne.n	8002b6c <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002b6a:	e055      	b.n	8002c18 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1c4      	bne.n	8002b02 <HAL_SPI_Receive+0x146>
 8002b78:	e038      	b.n	8002bec <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d115      	bne.n	8002bb4 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b92:	b292      	uxth	r2, r2
 8002b94:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9a:	1c9a      	adds	r2, r3, #2
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002bb2:	e015      	b.n	8002be0 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bb4:	f7fe f8ae 	bl	8000d14 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d803      	bhi.n	8002bcc <HAL_SPI_Receive+0x210>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bca:	d102      	bne.n	8002bd2 <HAL_SPI_Receive+0x216>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d106      	bne.n	8002be0 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002bde:	e01b      	b.n	8002c18 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1c6      	bne.n	8002b7a <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	6839      	ldr	r1, [r7, #0]
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 fb5b 	bl	80032ac <SPI_EndRxTransaction>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d002      	beq.n	8002c02 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	75fb      	strb	r3, [r7, #23]
 8002c0e:	e003      	b.n	8002c18 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002c20:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b08a      	sub	sp, #40	@ 0x28
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
 8002c36:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_SPI_TransmitReceive+0x26>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e20a      	b.n	8003066 <HAL_SPI_TransmitReceive+0x43c>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c58:	f7fe f85c 	bl	8000d14 <HAL_GetTick>
 8002c5c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c64:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002c6c:	887b      	ldrh	r3, [r7, #2]
 8002c6e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002c70:	887b      	ldrh	r3, [r7, #2]
 8002c72:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c74:	7efb      	ldrb	r3, [r7, #27]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d00e      	beq.n	8002c98 <HAL_SPI_TransmitReceive+0x6e>
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c80:	d106      	bne.n	8002c90 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d102      	bne.n	8002c90 <HAL_SPI_TransmitReceive+0x66>
 8002c8a:	7efb      	ldrb	r3, [r7, #27]
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d003      	beq.n	8002c98 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002c90:	2302      	movs	r3, #2
 8002c92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002c96:	e1e0      	b.n	800305a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d005      	beq.n	8002caa <HAL_SPI_TransmitReceive+0x80>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d002      	beq.n	8002caa <HAL_SPI_TransmitReceive+0x80>
 8002ca4:	887b      	ldrh	r3, [r7, #2]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d103      	bne.n	8002cb2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002cb0:	e1d3      	b.n	800305a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	d003      	beq.n	8002cc6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2205      	movs	r2, #5
 8002cc2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	887a      	ldrh	r2, [r7, #2]
 8002cd6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	887a      	ldrh	r2, [r7, #2]
 8002cde:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	887a      	ldrh	r2, [r7, #2]
 8002cec:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	887a      	ldrh	r2, [r7, #2]
 8002cf2:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d08:	d802      	bhi.n	8002d10 <HAL_SPI_TransmitReceive+0xe6>
 8002d0a:	8a3b      	ldrh	r3, [r7, #16]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d908      	bls.n	8002d22 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d1e:	605a      	str	r2, [r3, #4]
 8002d20:	e007      	b.n	8002d32 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002d30:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d3c:	2b40      	cmp	r3, #64	@ 0x40
 8002d3e:	d007      	beq.n	8002d50 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d58:	f240 8081 	bls.w	8002e5e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d002      	beq.n	8002d6a <HAL_SPI_TransmitReceive+0x140>
 8002d64:	8a7b      	ldrh	r3, [r7, #18]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d16d      	bne.n	8002e46 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d6e:	881a      	ldrh	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d7a:	1c9a      	adds	r2, r3, #2
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	3b01      	subs	r3, #1
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d8e:	e05a      	b.n	8002e46 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d11b      	bne.n	8002dd6 <HAL_SPI_TransmitReceive+0x1ac>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d016      	beq.n	8002dd6 <HAL_SPI_TransmitReceive+0x1ac>
 8002da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d113      	bne.n	8002dd6 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db2:	881a      	ldrh	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dbe:	1c9a      	adds	r2, r3, #2
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d11c      	bne.n	8002e1e <HAL_SPI_TransmitReceive+0x1f4>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d016      	beq.n	8002e1e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68da      	ldr	r2, [r3, #12]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfa:	b292      	uxth	r2, r2
 8002dfc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e02:	1c9a      	adds	r2, r3, #2
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002e1e:	f7fd ff79 	bl	8000d14 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d80b      	bhi.n	8002e46 <HAL_SPI_TransmitReceive+0x21c>
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e34:	d007      	beq.n	8002e46 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8002e44:	e109      	b.n	800305a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d19f      	bne.n	8002d90 <HAL_SPI_TransmitReceive+0x166>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d199      	bne.n	8002d90 <HAL_SPI_TransmitReceive+0x166>
 8002e5c:	e0e3      	b.n	8003026 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_SPI_TransmitReceive+0x244>
 8002e66:	8a7b      	ldrh	r3, [r7, #18]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	f040 80cf 	bne.w	800300c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d912      	bls.n	8002e9e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e7c:	881a      	ldrh	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e88:	1c9a      	adds	r2, r3, #2
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	3b02      	subs	r3, #2
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e9c:	e0b6      	b.n	800300c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	330c      	adds	r3, #12
 8002ea8:	7812      	ldrb	r2, [r2, #0]
 8002eaa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ec4:	e0a2      	b.n	800300c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d134      	bne.n	8002f3e <HAL_SPI_TransmitReceive+0x314>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d02f      	beq.n	8002f3e <HAL_SPI_TransmitReceive+0x314>
 8002ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d12c      	bne.n	8002f3e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d912      	bls.n	8002f14 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef2:	881a      	ldrh	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002efe:	1c9a      	adds	r2, r3, #2
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	3b02      	subs	r3, #2
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f12:	e012      	b.n	8002f3a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	330c      	adds	r3, #12
 8002f1e:	7812      	ldrb	r2, [r2, #0]
 8002f20:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f26:	1c5a      	adds	r2, r3, #1
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	3b01      	subs	r3, #1
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d148      	bne.n	8002fde <HAL_SPI_TransmitReceive+0x3b4>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d042      	beq.n	8002fde <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d923      	bls.n	8002fac <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6e:	b292      	uxth	r2, r2
 8002f70:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f76:	1c9a      	adds	r2, r3, #2
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	3b02      	subs	r3, #2
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d81f      	bhi.n	8002fda <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002fa8:	605a      	str	r2, [r3, #4]
 8002faa:	e016      	b.n	8002fda <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f103 020c 	add.w	r2, r3, #12
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb8:	7812      	ldrb	r2, [r2, #0]
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc2:	1c5a      	adds	r2, r3, #1
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002fde:	f7fd fe99 	bl	8000d14 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d803      	bhi.n	8002ff6 <HAL_SPI_TransmitReceive+0x3cc>
 8002fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff4:	d102      	bne.n	8002ffc <HAL_SPI_TransmitReceive+0x3d2>
 8002ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d107      	bne.n	800300c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800300a:	e026      	b.n	800305a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003010:	b29b      	uxth	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	f47f af57 	bne.w	8002ec6 <HAL_SPI_TransmitReceive+0x29c>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800301e:	b29b      	uxth	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	f47f af50 	bne.w	8002ec6 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003026:	69fa      	ldr	r2, [r7, #28]
 8003028:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 f996 	bl	800335c <SPI_EndRxTxTransaction>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d005      	beq.n	8003042 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2220      	movs	r2, #32
 8003040:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003050:	e003      	b.n	800305a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003062:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003066:	4618      	mov	r0, r3
 8003068:	3728      	adds	r7, #40	@ 0x28
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
	...

08003070 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b088      	sub	sp, #32
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	603b      	str	r3, [r7, #0]
 800307c:	4613      	mov	r3, r2
 800307e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003080:	f7fd fe48 	bl	8000d14 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003088:	1a9b      	subs	r3, r3, r2
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	4413      	add	r3, r2
 800308e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003090:	f7fd fe40 	bl	8000d14 <HAL_GetTick>
 8003094:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003096:	4b39      	ldr	r3, [pc, #228]	@ (800317c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	015b      	lsls	r3, r3, #5
 800309c:	0d1b      	lsrs	r3, r3, #20
 800309e:	69fa      	ldr	r2, [r7, #28]
 80030a0:	fb02 f303 	mul.w	r3, r2, r3
 80030a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030a6:	e054      	b.n	8003152 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ae:	d050      	beq.n	8003152 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030b0:	f7fd fe30 	bl	8000d14 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	69fa      	ldr	r2, [r7, #28]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d902      	bls.n	80030c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d13d      	bne.n	8003142 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80030d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030de:	d111      	bne.n	8003104 <SPI_WaitFlagStateUntilTimeout+0x94>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030e8:	d004      	beq.n	80030f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030f2:	d107      	bne.n	8003104 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003102:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003108:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800310c:	d10f      	bne.n	800312e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800312c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e017      	b.n	8003172 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003148:	2300      	movs	r3, #0
 800314a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	3b01      	subs	r3, #1
 8003150:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	4013      	ands	r3, r2
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	429a      	cmp	r2, r3
 8003160:	bf0c      	ite	eq
 8003162:	2301      	moveq	r3, #1
 8003164:	2300      	movne	r3, #0
 8003166:	b2db      	uxtb	r3, r3
 8003168:	461a      	mov	r2, r3
 800316a:	79fb      	ldrb	r3, [r7, #7]
 800316c:	429a      	cmp	r2, r3
 800316e:	d19b      	bne.n	80030a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3720      	adds	r7, #32
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	20000000 	.word	0x20000000

08003180 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b08a      	sub	sp, #40	@ 0x28
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
 800318c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800318e:	2300      	movs	r3, #0
 8003190:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003192:	f7fd fdbf 	bl	8000d14 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800319a:	1a9b      	subs	r3, r3, r2
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	4413      	add	r3, r2
 80031a0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80031a2:	f7fd fdb7 	bl	8000d14 <HAL_GetTick>
 80031a6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	330c      	adds	r3, #12
 80031ae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80031b0:	4b3d      	ldr	r3, [pc, #244]	@ (80032a8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	4613      	mov	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	00da      	lsls	r2, r3, #3
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	0d1b      	lsrs	r3, r3, #20
 80031c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031c2:	fb02 f303 	mul.w	r3, r2, r3
 80031c6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80031c8:	e060      	b.n	800328c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80031d0:	d107      	bne.n	80031e2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d104      	bne.n	80031e2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80031e0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e8:	d050      	beq.n	800328c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031ea:	f7fd fd93 	bl	8000d14 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d902      	bls.n	8003200 <SPI_WaitFifoStateUntilTimeout+0x80>
 80031fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d13d      	bne.n	800327c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800320e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003218:	d111      	bne.n	800323e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003222:	d004      	beq.n	800322e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800322c:	d107      	bne.n	800323e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800323c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003242:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003246:	d10f      	bne.n	8003268 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003266:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e010      	b.n	800329e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	3b01      	subs	r3, #1
 800328a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689a      	ldr	r2, [r3, #8]
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	4013      	ands	r3, r2
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	429a      	cmp	r2, r3
 800329a:	d196      	bne.n	80031ca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3728      	adds	r7, #40	@ 0x28
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	20000000 	.word	0x20000000

080032ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af02      	add	r7, sp, #8
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032c0:	d111      	bne.n	80032e6 <SPI_EndRxTransaction+0x3a>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032ca:	d004      	beq.n	80032d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032d4:	d107      	bne.n	80032e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032e4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2200      	movs	r2, #0
 80032ee:	2180      	movs	r1, #128	@ 0x80
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f7ff febd 	bl	8003070 <SPI_WaitFlagStateUntilTimeout>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d007      	beq.n	800330c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003300:	f043 0220 	orr.w	r2, r3, #32
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e023      	b.n	8003354 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003314:	d11d      	bne.n	8003352 <SPI_EndRxTransaction+0xa6>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800331e:	d004      	beq.n	800332a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003328:	d113      	bne.n	8003352 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	2200      	movs	r2, #0
 8003332:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f7ff ff22 	bl	8003180 <SPI_WaitFifoStateUntilTimeout>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d007      	beq.n	8003352 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003346:	f043 0220 	orr.w	r2, r3, #32
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e000      	b.n	8003354 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af02      	add	r7, sp, #8
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2200      	movs	r2, #0
 8003370:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f7ff ff03 	bl	8003180 <SPI_WaitFifoStateUntilTimeout>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d007      	beq.n	8003390 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003384:	f043 0220 	orr.w	r2, r3, #32
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e027      	b.n	80033e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	2200      	movs	r2, #0
 8003398:	2180      	movs	r1, #128	@ 0x80
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f7ff fe68 	bl	8003070 <SPI_WaitFlagStateUntilTimeout>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d007      	beq.n	80033b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033aa:	f043 0220 	orr.w	r2, r3, #32
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e014      	b.n	80033e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2200      	movs	r2, #0
 80033be:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f7ff fedc 	bl	8003180 <SPI_WaitFifoStateUntilTimeout>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d007      	beq.n	80033de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033d2:	f043 0220 	orr.w	r2, r3, #32
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e000      	b.n	80033e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e040      	b.n	800347c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d106      	bne.n	8003410 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7fd fafa 	bl	8000a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2224      	movs	r2, #36	@ 0x24
 8003414:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0201 	bic.w	r2, r2, #1
 8003424:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342a:	2b00      	cmp	r3, #0
 800342c:	d002      	beq.n	8003434 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 fade 	bl	80039f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f8af 	bl	8003598 <UART_SetConfig>
 800343a:	4603      	mov	r3, r0
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e01b      	b.n	800347c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003452:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689a      	ldr	r2, [r3, #8]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003462:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0201 	orr.w	r2, r2, #1
 8003472:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 fb5d 	bl	8003b34 <UART_CheckIdleState>
 800347a:	4603      	mov	r3, r0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b08a      	sub	sp, #40	@ 0x28
 8003488:	af02      	add	r7, sp, #8
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	603b      	str	r3, [r7, #0]
 8003490:	4613      	mov	r3, r2
 8003492:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003498:	2b20      	cmp	r3, #32
 800349a:	d177      	bne.n	800358c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d002      	beq.n	80034a8 <HAL_UART_Transmit+0x24>
 80034a2:	88fb      	ldrh	r3, [r7, #6]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e070      	b.n	800358e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2221      	movs	r2, #33	@ 0x21
 80034b8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034ba:	f7fd fc2b 	bl	8000d14 <HAL_GetTick>
 80034be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	88fa      	ldrh	r2, [r7, #6]
 80034c4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	88fa      	ldrh	r2, [r7, #6]
 80034cc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034d8:	d108      	bne.n	80034ec <HAL_UART_Transmit+0x68>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d104      	bne.n	80034ec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80034e2:	2300      	movs	r3, #0
 80034e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	61bb      	str	r3, [r7, #24]
 80034ea:	e003      	b.n	80034f4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034f0:	2300      	movs	r3, #0
 80034f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034f4:	e02f      	b.n	8003556 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2200      	movs	r2, #0
 80034fe:	2180      	movs	r1, #128	@ 0x80
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 fbbf 	bl	8003c84 <UART_WaitOnFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d004      	beq.n	8003516 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2220      	movs	r2, #32
 8003510:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e03b      	b.n	800358e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10b      	bne.n	8003534 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	881a      	ldrh	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003528:	b292      	uxth	r2, r2
 800352a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	3302      	adds	r3, #2
 8003530:	61bb      	str	r3, [r7, #24]
 8003532:	e007      	b.n	8003544 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	781a      	ldrb	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	3301      	adds	r3, #1
 8003542:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800354a:	b29b      	uxth	r3, r3
 800354c:	3b01      	subs	r3, #1
 800354e:	b29a      	uxth	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800355c:	b29b      	uxth	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1c9      	bne.n	80034f6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	2200      	movs	r2, #0
 800356a:	2140      	movs	r1, #64	@ 0x40
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f000 fb89 	bl	8003c84 <UART_WaitOnFlagUntilTimeout>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d004      	beq.n	8003582 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2220      	movs	r2, #32
 800357c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e005      	b.n	800358e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2220      	movs	r2, #32
 8003586:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003588:	2300      	movs	r3, #0
 800358a:	e000      	b.n	800358e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800358c:	2302      	movs	r3, #2
  }
}
 800358e:	4618      	mov	r0, r3
 8003590:	3720      	adds	r7, #32
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800359c:	b08a      	sub	sp, #40	@ 0x28
 800359e:	af00      	add	r7, sp, #0
 80035a0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	431a      	orrs	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	431a      	orrs	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	4313      	orrs	r3, r2
 80035be:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	4bb4      	ldr	r3, [pc, #720]	@ (8003898 <UART_SetConfig+0x300>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	6812      	ldr	r2, [r2, #0]
 80035ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035d0:	430b      	orrs	r3, r1
 80035d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4aa9      	ldr	r2, [pc, #676]	@ (800389c <UART_SetConfig+0x304>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d004      	beq.n	8003604 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003600:	4313      	orrs	r3, r2
 8003602:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003614:	430a      	orrs	r2, r1
 8003616:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4aa0      	ldr	r2, [pc, #640]	@ (80038a0 <UART_SetConfig+0x308>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d126      	bne.n	8003670 <UART_SetConfig+0xd8>
 8003622:	4ba0      	ldr	r3, [pc, #640]	@ (80038a4 <UART_SetConfig+0x30c>)
 8003624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003628:	f003 0303 	and.w	r3, r3, #3
 800362c:	2b03      	cmp	r3, #3
 800362e:	d81b      	bhi.n	8003668 <UART_SetConfig+0xd0>
 8003630:	a201      	add	r2, pc, #4	@ (adr r2, 8003638 <UART_SetConfig+0xa0>)
 8003632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003636:	bf00      	nop
 8003638:	08003649 	.word	0x08003649
 800363c:	08003659 	.word	0x08003659
 8003640:	08003651 	.word	0x08003651
 8003644:	08003661 	.word	0x08003661
 8003648:	2301      	movs	r3, #1
 800364a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800364e:	e080      	b.n	8003752 <UART_SetConfig+0x1ba>
 8003650:	2302      	movs	r3, #2
 8003652:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003656:	e07c      	b.n	8003752 <UART_SetConfig+0x1ba>
 8003658:	2304      	movs	r3, #4
 800365a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800365e:	e078      	b.n	8003752 <UART_SetConfig+0x1ba>
 8003660:	2308      	movs	r3, #8
 8003662:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003666:	e074      	b.n	8003752 <UART_SetConfig+0x1ba>
 8003668:	2310      	movs	r3, #16
 800366a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800366e:	e070      	b.n	8003752 <UART_SetConfig+0x1ba>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a8c      	ldr	r2, [pc, #560]	@ (80038a8 <UART_SetConfig+0x310>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d138      	bne.n	80036ec <UART_SetConfig+0x154>
 800367a:	4b8a      	ldr	r3, [pc, #552]	@ (80038a4 <UART_SetConfig+0x30c>)
 800367c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003680:	f003 030c 	and.w	r3, r3, #12
 8003684:	2b0c      	cmp	r3, #12
 8003686:	d82d      	bhi.n	80036e4 <UART_SetConfig+0x14c>
 8003688:	a201      	add	r2, pc, #4	@ (adr r2, 8003690 <UART_SetConfig+0xf8>)
 800368a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368e:	bf00      	nop
 8003690:	080036c5 	.word	0x080036c5
 8003694:	080036e5 	.word	0x080036e5
 8003698:	080036e5 	.word	0x080036e5
 800369c:	080036e5 	.word	0x080036e5
 80036a0:	080036d5 	.word	0x080036d5
 80036a4:	080036e5 	.word	0x080036e5
 80036a8:	080036e5 	.word	0x080036e5
 80036ac:	080036e5 	.word	0x080036e5
 80036b0:	080036cd 	.word	0x080036cd
 80036b4:	080036e5 	.word	0x080036e5
 80036b8:	080036e5 	.word	0x080036e5
 80036bc:	080036e5 	.word	0x080036e5
 80036c0:	080036dd 	.word	0x080036dd
 80036c4:	2300      	movs	r3, #0
 80036c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036ca:	e042      	b.n	8003752 <UART_SetConfig+0x1ba>
 80036cc:	2302      	movs	r3, #2
 80036ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036d2:	e03e      	b.n	8003752 <UART_SetConfig+0x1ba>
 80036d4:	2304      	movs	r3, #4
 80036d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036da:	e03a      	b.n	8003752 <UART_SetConfig+0x1ba>
 80036dc:	2308      	movs	r3, #8
 80036de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036e2:	e036      	b.n	8003752 <UART_SetConfig+0x1ba>
 80036e4:	2310      	movs	r3, #16
 80036e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036ea:	e032      	b.n	8003752 <UART_SetConfig+0x1ba>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a6a      	ldr	r2, [pc, #424]	@ (800389c <UART_SetConfig+0x304>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d12a      	bne.n	800374c <UART_SetConfig+0x1b4>
 80036f6:	4b6b      	ldr	r3, [pc, #428]	@ (80038a4 <UART_SetConfig+0x30c>)
 80036f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003700:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003704:	d01a      	beq.n	800373c <UART_SetConfig+0x1a4>
 8003706:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800370a:	d81b      	bhi.n	8003744 <UART_SetConfig+0x1ac>
 800370c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003710:	d00c      	beq.n	800372c <UART_SetConfig+0x194>
 8003712:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003716:	d815      	bhi.n	8003744 <UART_SetConfig+0x1ac>
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <UART_SetConfig+0x18c>
 800371c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003720:	d008      	beq.n	8003734 <UART_SetConfig+0x19c>
 8003722:	e00f      	b.n	8003744 <UART_SetConfig+0x1ac>
 8003724:	2300      	movs	r3, #0
 8003726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800372a:	e012      	b.n	8003752 <UART_SetConfig+0x1ba>
 800372c:	2302      	movs	r3, #2
 800372e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003732:	e00e      	b.n	8003752 <UART_SetConfig+0x1ba>
 8003734:	2304      	movs	r3, #4
 8003736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800373a:	e00a      	b.n	8003752 <UART_SetConfig+0x1ba>
 800373c:	2308      	movs	r3, #8
 800373e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003742:	e006      	b.n	8003752 <UART_SetConfig+0x1ba>
 8003744:	2310      	movs	r3, #16
 8003746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800374a:	e002      	b.n	8003752 <UART_SetConfig+0x1ba>
 800374c:	2310      	movs	r3, #16
 800374e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a51      	ldr	r2, [pc, #324]	@ (800389c <UART_SetConfig+0x304>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d17a      	bne.n	8003852 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800375c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003760:	2b08      	cmp	r3, #8
 8003762:	d824      	bhi.n	80037ae <UART_SetConfig+0x216>
 8003764:	a201      	add	r2, pc, #4	@ (adr r2, 800376c <UART_SetConfig+0x1d4>)
 8003766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376a:	bf00      	nop
 800376c:	08003791 	.word	0x08003791
 8003770:	080037af 	.word	0x080037af
 8003774:	08003799 	.word	0x08003799
 8003778:	080037af 	.word	0x080037af
 800377c:	0800379f 	.word	0x0800379f
 8003780:	080037af 	.word	0x080037af
 8003784:	080037af 	.word	0x080037af
 8003788:	080037af 	.word	0x080037af
 800378c:	080037a7 	.word	0x080037a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003790:	f7fe fb78 	bl	8001e84 <HAL_RCC_GetPCLK1Freq>
 8003794:	61f8      	str	r0, [r7, #28]
        break;
 8003796:	e010      	b.n	80037ba <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003798:	4b44      	ldr	r3, [pc, #272]	@ (80038ac <UART_SetConfig+0x314>)
 800379a:	61fb      	str	r3, [r7, #28]
        break;
 800379c:	e00d      	b.n	80037ba <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800379e:	f7fe fad9 	bl	8001d54 <HAL_RCC_GetSysClockFreq>
 80037a2:	61f8      	str	r0, [r7, #28]
        break;
 80037a4:	e009      	b.n	80037ba <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037aa:	61fb      	str	r3, [r7, #28]
        break;
 80037ac:	e005      	b.n	80037ba <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80037b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 8107 	beq.w	80039d0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	4613      	mov	r3, r2
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	4413      	add	r3, r2
 80037cc:	69fa      	ldr	r2, [r7, #28]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d305      	bcc.n	80037de <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037d8:	69fa      	ldr	r2, [r7, #28]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d903      	bls.n	80037e6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80037e4:	e0f4      	b.n	80039d0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	2200      	movs	r2, #0
 80037ea:	461c      	mov	r4, r3
 80037ec:	4615      	mov	r5, r2
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	f04f 0300 	mov.w	r3, #0
 80037f6:	022b      	lsls	r3, r5, #8
 80037f8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80037fc:	0222      	lsls	r2, r4, #8
 80037fe:	68f9      	ldr	r1, [r7, #12]
 8003800:	6849      	ldr	r1, [r1, #4]
 8003802:	0849      	lsrs	r1, r1, #1
 8003804:	2000      	movs	r0, #0
 8003806:	4688      	mov	r8, r1
 8003808:	4681      	mov	r9, r0
 800380a:	eb12 0a08 	adds.w	sl, r2, r8
 800380e:	eb43 0b09 	adc.w	fp, r3, r9
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	603b      	str	r3, [r7, #0]
 800381a:	607a      	str	r2, [r7, #4]
 800381c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003820:	4650      	mov	r0, sl
 8003822:	4659      	mov	r1, fp
 8003824:	f7fc fd24 	bl	8000270 <__aeabi_uldivmod>
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
 800382c:	4613      	mov	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003836:	d308      	bcc.n	800384a <UART_SetConfig+0x2b2>
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800383e:	d204      	bcs.n	800384a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	60da      	str	r2, [r3, #12]
 8003848:	e0c2      	b.n	80039d0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003850:	e0be      	b.n	80039d0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800385a:	d16a      	bne.n	8003932 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800385c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003860:	2b08      	cmp	r3, #8
 8003862:	d834      	bhi.n	80038ce <UART_SetConfig+0x336>
 8003864:	a201      	add	r2, pc, #4	@ (adr r2, 800386c <UART_SetConfig+0x2d4>)
 8003866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800386a:	bf00      	nop
 800386c:	08003891 	.word	0x08003891
 8003870:	080038b1 	.word	0x080038b1
 8003874:	080038b9 	.word	0x080038b9
 8003878:	080038cf 	.word	0x080038cf
 800387c:	080038bf 	.word	0x080038bf
 8003880:	080038cf 	.word	0x080038cf
 8003884:	080038cf 	.word	0x080038cf
 8003888:	080038cf 	.word	0x080038cf
 800388c:	080038c7 	.word	0x080038c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003890:	f7fe faf8 	bl	8001e84 <HAL_RCC_GetPCLK1Freq>
 8003894:	61f8      	str	r0, [r7, #28]
        break;
 8003896:	e020      	b.n	80038da <UART_SetConfig+0x342>
 8003898:	efff69f3 	.word	0xefff69f3
 800389c:	40008000 	.word	0x40008000
 80038a0:	40013800 	.word	0x40013800
 80038a4:	40021000 	.word	0x40021000
 80038a8:	40004400 	.word	0x40004400
 80038ac:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038b0:	f7fe fafe 	bl	8001eb0 <HAL_RCC_GetPCLK2Freq>
 80038b4:	61f8      	str	r0, [r7, #28]
        break;
 80038b6:	e010      	b.n	80038da <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038b8:	4b4c      	ldr	r3, [pc, #304]	@ (80039ec <UART_SetConfig+0x454>)
 80038ba:	61fb      	str	r3, [r7, #28]
        break;
 80038bc:	e00d      	b.n	80038da <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038be:	f7fe fa49 	bl	8001d54 <HAL_RCC_GetSysClockFreq>
 80038c2:	61f8      	str	r0, [r7, #28]
        break;
 80038c4:	e009      	b.n	80038da <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038ca:	61fb      	str	r3, [r7, #28]
        break;
 80038cc:	e005      	b.n	80038da <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80038ce:	2300      	movs	r3, #0
 80038d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80038d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d077      	beq.n	80039d0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	005a      	lsls	r2, r3, #1
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	085b      	lsrs	r3, r3, #1
 80038ea:	441a      	add	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	2b0f      	cmp	r3, #15
 80038fa:	d916      	bls.n	800392a <UART_SetConfig+0x392>
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003902:	d212      	bcs.n	800392a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	b29b      	uxth	r3, r3
 8003908:	f023 030f 	bic.w	r3, r3, #15
 800390c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	085b      	lsrs	r3, r3, #1
 8003912:	b29b      	uxth	r3, r3
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	b29a      	uxth	r2, r3
 800391a:	8afb      	ldrh	r3, [r7, #22]
 800391c:	4313      	orrs	r3, r2
 800391e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	8afa      	ldrh	r2, [r7, #22]
 8003926:	60da      	str	r2, [r3, #12]
 8003928:	e052      	b.n	80039d0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003930:	e04e      	b.n	80039d0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003932:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003936:	2b08      	cmp	r3, #8
 8003938:	d827      	bhi.n	800398a <UART_SetConfig+0x3f2>
 800393a:	a201      	add	r2, pc, #4	@ (adr r2, 8003940 <UART_SetConfig+0x3a8>)
 800393c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003940:	08003965 	.word	0x08003965
 8003944:	0800396d 	.word	0x0800396d
 8003948:	08003975 	.word	0x08003975
 800394c:	0800398b 	.word	0x0800398b
 8003950:	0800397b 	.word	0x0800397b
 8003954:	0800398b 	.word	0x0800398b
 8003958:	0800398b 	.word	0x0800398b
 800395c:	0800398b 	.word	0x0800398b
 8003960:	08003983 	.word	0x08003983
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003964:	f7fe fa8e 	bl	8001e84 <HAL_RCC_GetPCLK1Freq>
 8003968:	61f8      	str	r0, [r7, #28]
        break;
 800396a:	e014      	b.n	8003996 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800396c:	f7fe faa0 	bl	8001eb0 <HAL_RCC_GetPCLK2Freq>
 8003970:	61f8      	str	r0, [r7, #28]
        break;
 8003972:	e010      	b.n	8003996 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003974:	4b1d      	ldr	r3, [pc, #116]	@ (80039ec <UART_SetConfig+0x454>)
 8003976:	61fb      	str	r3, [r7, #28]
        break;
 8003978:	e00d      	b.n	8003996 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800397a:	f7fe f9eb 	bl	8001d54 <HAL_RCC_GetSysClockFreq>
 800397e:	61f8      	str	r0, [r7, #28]
        break;
 8003980:	e009      	b.n	8003996 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003982:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003986:	61fb      	str	r3, [r7, #28]
        break;
 8003988:	e005      	b.n	8003996 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800398a:	2300      	movs	r3, #0
 800398c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003994:	bf00      	nop
    }

    if (pclk != 0U)
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d019      	beq.n	80039d0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	085a      	lsrs	r2, r3, #1
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	441a      	add	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	2b0f      	cmp	r3, #15
 80039b4:	d909      	bls.n	80039ca <UART_SetConfig+0x432>
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039bc:	d205      	bcs.n	80039ca <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	60da      	str	r2, [r3, #12]
 80039c8:	e002      	b.n	80039d0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80039dc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3728      	adds	r7, #40	@ 0x28
 80039e4:	46bd      	mov	sp, r7
 80039e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039ea:	bf00      	nop
 80039ec:	00f42400 	.word	0x00f42400

080039f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00a      	beq.n	8003a1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00a      	beq.n	8003a3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00a      	beq.n	8003a5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00a      	beq.n	8003a80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a84:	f003 0310 	and.w	r3, r3, #16
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00a      	beq.n	8003aa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00a      	beq.n	8003ac4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d01a      	beq.n	8003b06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003aee:	d10a      	bne.n	8003b06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00a      	beq.n	8003b28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	605a      	str	r2, [r3, #4]
  }
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b098      	sub	sp, #96	@ 0x60
 8003b38:	af02      	add	r7, sp, #8
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b44:	f7fd f8e6 	bl	8000d14 <HAL_GetTick>
 8003b48:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0308 	and.w	r3, r3, #8
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d12e      	bne.n	8003bb6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b60:	2200      	movs	r2, #0
 8003b62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f88c 	bl	8003c84 <UART_WaitOnFlagUntilTimeout>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d021      	beq.n	8003bb6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b7a:	e853 3f00 	ldrex	r3, [r3]
 8003b7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b86:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b90:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b92:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b98:	e841 2300 	strex	r3, r2, [r1]
 8003b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1e6      	bne.n	8003b72 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e062      	b.n	8003c7c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b04      	cmp	r3, #4
 8003bc2:	d149      	bne.n	8003c58 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bc4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f856 	bl	8003c84 <UART_WaitOnFlagUntilTimeout>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d03c      	beq.n	8003c58 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be6:	e853 3f00 	ldrex	r3, [r3]
 8003bea:	623b      	str	r3, [r7, #32]
   return(result);
 8003bec:	6a3b      	ldr	r3, [r7, #32]
 8003bee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c00:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c04:	e841 2300 	strex	r3, r2, [r1]
 8003c08:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1e6      	bne.n	8003bde <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3308      	adds	r3, #8
 8003c16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	e853 3f00 	ldrex	r3, [r3]
 8003c1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f023 0301 	bic.w	r3, r3, #1
 8003c26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	3308      	adds	r3, #8
 8003c2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c30:	61fa      	str	r2, [r7, #28]
 8003c32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c34:	69b9      	ldr	r1, [r7, #24]
 8003c36:	69fa      	ldr	r2, [r7, #28]
 8003c38:	e841 2300 	strex	r3, r2, [r1]
 8003c3c:	617b      	str	r3, [r7, #20]
   return(result);
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1e5      	bne.n	8003c10 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2220      	movs	r2, #32
 8003c48:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e011      	b.n	8003c7c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2220      	movs	r2, #32
 8003c62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3758      	adds	r7, #88	@ 0x58
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	603b      	str	r3, [r7, #0]
 8003c90:	4613      	mov	r3, r2
 8003c92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c94:	e049      	b.n	8003d2a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9c:	d045      	beq.n	8003d2a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c9e:	f7fd f839 	bl	8000d14 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d302      	bcc.n	8003cb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e048      	b.n	8003d4a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0304 	and.w	r3, r3, #4
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d031      	beq.n	8003d2a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	f003 0308 	and.w	r3, r3, #8
 8003cd0:	2b08      	cmp	r3, #8
 8003cd2:	d110      	bne.n	8003cf6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2208      	movs	r2, #8
 8003cda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 f838 	bl	8003d52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2208      	movs	r2, #8
 8003ce6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e029      	b.n	8003d4a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d04:	d111      	bne.n	8003d2a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 f81e 	bl	8003d52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2220      	movs	r2, #32
 8003d1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e00f      	b.n	8003d4a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	69da      	ldr	r2, [r3, #28]
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	4013      	ands	r3, r2
 8003d34:	68ba      	ldr	r2, [r7, #8]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	bf0c      	ite	eq
 8003d3a:	2301      	moveq	r3, #1
 8003d3c:	2300      	movne	r3, #0
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	461a      	mov	r2, r3
 8003d42:	79fb      	ldrb	r3, [r7, #7]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d0a6      	beq.n	8003c96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b095      	sub	sp, #84	@ 0x54
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d62:	e853 3f00 	ldrex	r3, [r3]
 8003d66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	461a      	mov	r2, r3
 8003d76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d78:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d7a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d80:	e841 2300 	strex	r3, r2, [r1]
 8003d84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1e6      	bne.n	8003d5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	3308      	adds	r3, #8
 8003d92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d94:	6a3b      	ldr	r3, [r7, #32]
 8003d96:	e853 3f00 	ldrex	r3, [r3]
 8003d9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f023 0301 	bic.w	r3, r3, #1
 8003da2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	3308      	adds	r3, #8
 8003daa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003dac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003dae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003db2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003db4:	e841 2300 	strex	r3, r2, [r1]
 8003db8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1e5      	bne.n	8003d8c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d118      	bne.n	8003dfa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	e853 3f00 	ldrex	r3, [r3]
 8003dd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	f023 0310 	bic.w	r3, r3, #16
 8003ddc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	461a      	mov	r2, r3
 8003de4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003de6:	61bb      	str	r3, [r7, #24]
 8003de8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dea:	6979      	ldr	r1, [r7, #20]
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	e841 2300 	strex	r3, r2, [r1]
 8003df2:	613b      	str	r3, [r7, #16]
   return(result);
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1e6      	bne.n	8003dc8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003e0e:	bf00      	nop
 8003e10:	3754      	adds	r7, #84	@ 0x54
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
	...

08003e1c <siprintf>:
 8003e1c:	b40e      	push	{r1, r2, r3}
 8003e1e:	b500      	push	{lr}
 8003e20:	b09c      	sub	sp, #112	@ 0x70
 8003e22:	ab1d      	add	r3, sp, #116	@ 0x74
 8003e24:	9002      	str	r0, [sp, #8]
 8003e26:	9006      	str	r0, [sp, #24]
 8003e28:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003e2c:	4809      	ldr	r0, [pc, #36]	@ (8003e54 <siprintf+0x38>)
 8003e2e:	9107      	str	r1, [sp, #28]
 8003e30:	9104      	str	r1, [sp, #16]
 8003e32:	4909      	ldr	r1, [pc, #36]	@ (8003e58 <siprintf+0x3c>)
 8003e34:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e38:	9105      	str	r1, [sp, #20]
 8003e3a:	6800      	ldr	r0, [r0, #0]
 8003e3c:	9301      	str	r3, [sp, #4]
 8003e3e:	a902      	add	r1, sp, #8
 8003e40:	f000 f994 	bl	800416c <_svfiprintf_r>
 8003e44:	9b02      	ldr	r3, [sp, #8]
 8003e46:	2200      	movs	r2, #0
 8003e48:	701a      	strb	r2, [r3, #0]
 8003e4a:	b01c      	add	sp, #112	@ 0x70
 8003e4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e50:	b003      	add	sp, #12
 8003e52:	4770      	bx	lr
 8003e54:	2000000c 	.word	0x2000000c
 8003e58:	ffff0208 	.word	0xffff0208

08003e5c <memset>:
 8003e5c:	4402      	add	r2, r0
 8003e5e:	4603      	mov	r3, r0
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d100      	bne.n	8003e66 <memset+0xa>
 8003e64:	4770      	bx	lr
 8003e66:	f803 1b01 	strb.w	r1, [r3], #1
 8003e6a:	e7f9      	b.n	8003e60 <memset+0x4>

08003e6c <__errno>:
 8003e6c:	4b01      	ldr	r3, [pc, #4]	@ (8003e74 <__errno+0x8>)
 8003e6e:	6818      	ldr	r0, [r3, #0]
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	2000000c 	.word	0x2000000c

08003e78 <__libc_init_array>:
 8003e78:	b570      	push	{r4, r5, r6, lr}
 8003e7a:	4d0d      	ldr	r5, [pc, #52]	@ (8003eb0 <__libc_init_array+0x38>)
 8003e7c:	4c0d      	ldr	r4, [pc, #52]	@ (8003eb4 <__libc_init_array+0x3c>)
 8003e7e:	1b64      	subs	r4, r4, r5
 8003e80:	10a4      	asrs	r4, r4, #2
 8003e82:	2600      	movs	r6, #0
 8003e84:	42a6      	cmp	r6, r4
 8003e86:	d109      	bne.n	8003e9c <__libc_init_array+0x24>
 8003e88:	4d0b      	ldr	r5, [pc, #44]	@ (8003eb8 <__libc_init_array+0x40>)
 8003e8a:	4c0c      	ldr	r4, [pc, #48]	@ (8003ebc <__libc_init_array+0x44>)
 8003e8c:	f000 fc66 	bl	800475c <_init>
 8003e90:	1b64      	subs	r4, r4, r5
 8003e92:	10a4      	asrs	r4, r4, #2
 8003e94:	2600      	movs	r6, #0
 8003e96:	42a6      	cmp	r6, r4
 8003e98:	d105      	bne.n	8003ea6 <__libc_init_array+0x2e>
 8003e9a:	bd70      	pop	{r4, r5, r6, pc}
 8003e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ea0:	4798      	blx	r3
 8003ea2:	3601      	adds	r6, #1
 8003ea4:	e7ee      	b.n	8003e84 <__libc_init_array+0xc>
 8003ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eaa:	4798      	blx	r3
 8003eac:	3601      	adds	r6, #1
 8003eae:	e7f2      	b.n	8003e96 <__libc_init_array+0x1e>
 8003eb0:	08004a80 	.word	0x08004a80
 8003eb4:	08004a80 	.word	0x08004a80
 8003eb8:	08004a80 	.word	0x08004a80
 8003ebc:	08004a84 	.word	0x08004a84

08003ec0 <__retarget_lock_acquire_recursive>:
 8003ec0:	4770      	bx	lr

08003ec2 <__retarget_lock_release_recursive>:
 8003ec2:	4770      	bx	lr

08003ec4 <_free_r>:
 8003ec4:	b538      	push	{r3, r4, r5, lr}
 8003ec6:	4605      	mov	r5, r0
 8003ec8:	2900      	cmp	r1, #0
 8003eca:	d041      	beq.n	8003f50 <_free_r+0x8c>
 8003ecc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ed0:	1f0c      	subs	r4, r1, #4
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	bfb8      	it	lt
 8003ed6:	18e4      	addlt	r4, r4, r3
 8003ed8:	f000 f8e0 	bl	800409c <__malloc_lock>
 8003edc:	4a1d      	ldr	r2, [pc, #116]	@ (8003f54 <_free_r+0x90>)
 8003ede:	6813      	ldr	r3, [r2, #0]
 8003ee0:	b933      	cbnz	r3, 8003ef0 <_free_r+0x2c>
 8003ee2:	6063      	str	r3, [r4, #4]
 8003ee4:	6014      	str	r4, [r2, #0]
 8003ee6:	4628      	mov	r0, r5
 8003ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003eec:	f000 b8dc 	b.w	80040a8 <__malloc_unlock>
 8003ef0:	42a3      	cmp	r3, r4
 8003ef2:	d908      	bls.n	8003f06 <_free_r+0x42>
 8003ef4:	6820      	ldr	r0, [r4, #0]
 8003ef6:	1821      	adds	r1, r4, r0
 8003ef8:	428b      	cmp	r3, r1
 8003efa:	bf01      	itttt	eq
 8003efc:	6819      	ldreq	r1, [r3, #0]
 8003efe:	685b      	ldreq	r3, [r3, #4]
 8003f00:	1809      	addeq	r1, r1, r0
 8003f02:	6021      	streq	r1, [r4, #0]
 8003f04:	e7ed      	b.n	8003ee2 <_free_r+0x1e>
 8003f06:	461a      	mov	r2, r3
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	b10b      	cbz	r3, 8003f10 <_free_r+0x4c>
 8003f0c:	42a3      	cmp	r3, r4
 8003f0e:	d9fa      	bls.n	8003f06 <_free_r+0x42>
 8003f10:	6811      	ldr	r1, [r2, #0]
 8003f12:	1850      	adds	r0, r2, r1
 8003f14:	42a0      	cmp	r0, r4
 8003f16:	d10b      	bne.n	8003f30 <_free_r+0x6c>
 8003f18:	6820      	ldr	r0, [r4, #0]
 8003f1a:	4401      	add	r1, r0
 8003f1c:	1850      	adds	r0, r2, r1
 8003f1e:	4283      	cmp	r3, r0
 8003f20:	6011      	str	r1, [r2, #0]
 8003f22:	d1e0      	bne.n	8003ee6 <_free_r+0x22>
 8003f24:	6818      	ldr	r0, [r3, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	6053      	str	r3, [r2, #4]
 8003f2a:	4408      	add	r0, r1
 8003f2c:	6010      	str	r0, [r2, #0]
 8003f2e:	e7da      	b.n	8003ee6 <_free_r+0x22>
 8003f30:	d902      	bls.n	8003f38 <_free_r+0x74>
 8003f32:	230c      	movs	r3, #12
 8003f34:	602b      	str	r3, [r5, #0]
 8003f36:	e7d6      	b.n	8003ee6 <_free_r+0x22>
 8003f38:	6820      	ldr	r0, [r4, #0]
 8003f3a:	1821      	adds	r1, r4, r0
 8003f3c:	428b      	cmp	r3, r1
 8003f3e:	bf04      	itt	eq
 8003f40:	6819      	ldreq	r1, [r3, #0]
 8003f42:	685b      	ldreq	r3, [r3, #4]
 8003f44:	6063      	str	r3, [r4, #4]
 8003f46:	bf04      	itt	eq
 8003f48:	1809      	addeq	r1, r1, r0
 8003f4a:	6021      	streq	r1, [r4, #0]
 8003f4c:	6054      	str	r4, [r2, #4]
 8003f4e:	e7ca      	b.n	8003ee6 <_free_r+0x22>
 8003f50:	bd38      	pop	{r3, r4, r5, pc}
 8003f52:	bf00      	nop
 8003f54:	200002b4 	.word	0x200002b4

08003f58 <sbrk_aligned>:
 8003f58:	b570      	push	{r4, r5, r6, lr}
 8003f5a:	4e0f      	ldr	r6, [pc, #60]	@ (8003f98 <sbrk_aligned+0x40>)
 8003f5c:	460c      	mov	r4, r1
 8003f5e:	6831      	ldr	r1, [r6, #0]
 8003f60:	4605      	mov	r5, r0
 8003f62:	b911      	cbnz	r1, 8003f6a <sbrk_aligned+0x12>
 8003f64:	f000 fba6 	bl	80046b4 <_sbrk_r>
 8003f68:	6030      	str	r0, [r6, #0]
 8003f6a:	4621      	mov	r1, r4
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	f000 fba1 	bl	80046b4 <_sbrk_r>
 8003f72:	1c43      	adds	r3, r0, #1
 8003f74:	d103      	bne.n	8003f7e <sbrk_aligned+0x26>
 8003f76:	f04f 34ff 	mov.w	r4, #4294967295
 8003f7a:	4620      	mov	r0, r4
 8003f7c:	bd70      	pop	{r4, r5, r6, pc}
 8003f7e:	1cc4      	adds	r4, r0, #3
 8003f80:	f024 0403 	bic.w	r4, r4, #3
 8003f84:	42a0      	cmp	r0, r4
 8003f86:	d0f8      	beq.n	8003f7a <sbrk_aligned+0x22>
 8003f88:	1a21      	subs	r1, r4, r0
 8003f8a:	4628      	mov	r0, r5
 8003f8c:	f000 fb92 	bl	80046b4 <_sbrk_r>
 8003f90:	3001      	adds	r0, #1
 8003f92:	d1f2      	bne.n	8003f7a <sbrk_aligned+0x22>
 8003f94:	e7ef      	b.n	8003f76 <sbrk_aligned+0x1e>
 8003f96:	bf00      	nop
 8003f98:	200002b0 	.word	0x200002b0

08003f9c <_malloc_r>:
 8003f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fa0:	1ccd      	adds	r5, r1, #3
 8003fa2:	f025 0503 	bic.w	r5, r5, #3
 8003fa6:	3508      	adds	r5, #8
 8003fa8:	2d0c      	cmp	r5, #12
 8003faa:	bf38      	it	cc
 8003fac:	250c      	movcc	r5, #12
 8003fae:	2d00      	cmp	r5, #0
 8003fb0:	4606      	mov	r6, r0
 8003fb2:	db01      	blt.n	8003fb8 <_malloc_r+0x1c>
 8003fb4:	42a9      	cmp	r1, r5
 8003fb6:	d904      	bls.n	8003fc2 <_malloc_r+0x26>
 8003fb8:	230c      	movs	r3, #12
 8003fba:	6033      	str	r3, [r6, #0]
 8003fbc:	2000      	movs	r0, #0
 8003fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004098 <_malloc_r+0xfc>
 8003fc6:	f000 f869 	bl	800409c <__malloc_lock>
 8003fca:	f8d8 3000 	ldr.w	r3, [r8]
 8003fce:	461c      	mov	r4, r3
 8003fd0:	bb44      	cbnz	r4, 8004024 <_malloc_r+0x88>
 8003fd2:	4629      	mov	r1, r5
 8003fd4:	4630      	mov	r0, r6
 8003fd6:	f7ff ffbf 	bl	8003f58 <sbrk_aligned>
 8003fda:	1c43      	adds	r3, r0, #1
 8003fdc:	4604      	mov	r4, r0
 8003fde:	d158      	bne.n	8004092 <_malloc_r+0xf6>
 8003fe0:	f8d8 4000 	ldr.w	r4, [r8]
 8003fe4:	4627      	mov	r7, r4
 8003fe6:	2f00      	cmp	r7, #0
 8003fe8:	d143      	bne.n	8004072 <_malloc_r+0xd6>
 8003fea:	2c00      	cmp	r4, #0
 8003fec:	d04b      	beq.n	8004086 <_malloc_r+0xea>
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	4639      	mov	r1, r7
 8003ff2:	4630      	mov	r0, r6
 8003ff4:	eb04 0903 	add.w	r9, r4, r3
 8003ff8:	f000 fb5c 	bl	80046b4 <_sbrk_r>
 8003ffc:	4581      	cmp	r9, r0
 8003ffe:	d142      	bne.n	8004086 <_malloc_r+0xea>
 8004000:	6821      	ldr	r1, [r4, #0]
 8004002:	1a6d      	subs	r5, r5, r1
 8004004:	4629      	mov	r1, r5
 8004006:	4630      	mov	r0, r6
 8004008:	f7ff ffa6 	bl	8003f58 <sbrk_aligned>
 800400c:	3001      	adds	r0, #1
 800400e:	d03a      	beq.n	8004086 <_malloc_r+0xea>
 8004010:	6823      	ldr	r3, [r4, #0]
 8004012:	442b      	add	r3, r5
 8004014:	6023      	str	r3, [r4, #0]
 8004016:	f8d8 3000 	ldr.w	r3, [r8]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	bb62      	cbnz	r2, 8004078 <_malloc_r+0xdc>
 800401e:	f8c8 7000 	str.w	r7, [r8]
 8004022:	e00f      	b.n	8004044 <_malloc_r+0xa8>
 8004024:	6822      	ldr	r2, [r4, #0]
 8004026:	1b52      	subs	r2, r2, r5
 8004028:	d420      	bmi.n	800406c <_malloc_r+0xd0>
 800402a:	2a0b      	cmp	r2, #11
 800402c:	d917      	bls.n	800405e <_malloc_r+0xc2>
 800402e:	1961      	adds	r1, r4, r5
 8004030:	42a3      	cmp	r3, r4
 8004032:	6025      	str	r5, [r4, #0]
 8004034:	bf18      	it	ne
 8004036:	6059      	strne	r1, [r3, #4]
 8004038:	6863      	ldr	r3, [r4, #4]
 800403a:	bf08      	it	eq
 800403c:	f8c8 1000 	streq.w	r1, [r8]
 8004040:	5162      	str	r2, [r4, r5]
 8004042:	604b      	str	r3, [r1, #4]
 8004044:	4630      	mov	r0, r6
 8004046:	f000 f82f 	bl	80040a8 <__malloc_unlock>
 800404a:	f104 000b 	add.w	r0, r4, #11
 800404e:	1d23      	adds	r3, r4, #4
 8004050:	f020 0007 	bic.w	r0, r0, #7
 8004054:	1ac2      	subs	r2, r0, r3
 8004056:	bf1c      	itt	ne
 8004058:	1a1b      	subne	r3, r3, r0
 800405a:	50a3      	strne	r3, [r4, r2]
 800405c:	e7af      	b.n	8003fbe <_malloc_r+0x22>
 800405e:	6862      	ldr	r2, [r4, #4]
 8004060:	42a3      	cmp	r3, r4
 8004062:	bf0c      	ite	eq
 8004064:	f8c8 2000 	streq.w	r2, [r8]
 8004068:	605a      	strne	r2, [r3, #4]
 800406a:	e7eb      	b.n	8004044 <_malloc_r+0xa8>
 800406c:	4623      	mov	r3, r4
 800406e:	6864      	ldr	r4, [r4, #4]
 8004070:	e7ae      	b.n	8003fd0 <_malloc_r+0x34>
 8004072:	463c      	mov	r4, r7
 8004074:	687f      	ldr	r7, [r7, #4]
 8004076:	e7b6      	b.n	8003fe6 <_malloc_r+0x4a>
 8004078:	461a      	mov	r2, r3
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	42a3      	cmp	r3, r4
 800407e:	d1fb      	bne.n	8004078 <_malloc_r+0xdc>
 8004080:	2300      	movs	r3, #0
 8004082:	6053      	str	r3, [r2, #4]
 8004084:	e7de      	b.n	8004044 <_malloc_r+0xa8>
 8004086:	230c      	movs	r3, #12
 8004088:	6033      	str	r3, [r6, #0]
 800408a:	4630      	mov	r0, r6
 800408c:	f000 f80c 	bl	80040a8 <__malloc_unlock>
 8004090:	e794      	b.n	8003fbc <_malloc_r+0x20>
 8004092:	6005      	str	r5, [r0, #0]
 8004094:	e7d6      	b.n	8004044 <_malloc_r+0xa8>
 8004096:	bf00      	nop
 8004098:	200002b4 	.word	0x200002b4

0800409c <__malloc_lock>:
 800409c:	4801      	ldr	r0, [pc, #4]	@ (80040a4 <__malloc_lock+0x8>)
 800409e:	f7ff bf0f 	b.w	8003ec0 <__retarget_lock_acquire_recursive>
 80040a2:	bf00      	nop
 80040a4:	200002ac 	.word	0x200002ac

080040a8 <__malloc_unlock>:
 80040a8:	4801      	ldr	r0, [pc, #4]	@ (80040b0 <__malloc_unlock+0x8>)
 80040aa:	f7ff bf0a 	b.w	8003ec2 <__retarget_lock_release_recursive>
 80040ae:	bf00      	nop
 80040b0:	200002ac 	.word	0x200002ac

080040b4 <__ssputs_r>:
 80040b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040b8:	688e      	ldr	r6, [r1, #8]
 80040ba:	461f      	mov	r7, r3
 80040bc:	42be      	cmp	r6, r7
 80040be:	680b      	ldr	r3, [r1, #0]
 80040c0:	4682      	mov	sl, r0
 80040c2:	460c      	mov	r4, r1
 80040c4:	4690      	mov	r8, r2
 80040c6:	d82d      	bhi.n	8004124 <__ssputs_r+0x70>
 80040c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80040cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80040d0:	d026      	beq.n	8004120 <__ssputs_r+0x6c>
 80040d2:	6965      	ldr	r5, [r4, #20]
 80040d4:	6909      	ldr	r1, [r1, #16]
 80040d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040da:	eba3 0901 	sub.w	r9, r3, r1
 80040de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80040e2:	1c7b      	adds	r3, r7, #1
 80040e4:	444b      	add	r3, r9
 80040e6:	106d      	asrs	r5, r5, #1
 80040e8:	429d      	cmp	r5, r3
 80040ea:	bf38      	it	cc
 80040ec:	461d      	movcc	r5, r3
 80040ee:	0553      	lsls	r3, r2, #21
 80040f0:	d527      	bpl.n	8004142 <__ssputs_r+0x8e>
 80040f2:	4629      	mov	r1, r5
 80040f4:	f7ff ff52 	bl	8003f9c <_malloc_r>
 80040f8:	4606      	mov	r6, r0
 80040fa:	b360      	cbz	r0, 8004156 <__ssputs_r+0xa2>
 80040fc:	6921      	ldr	r1, [r4, #16]
 80040fe:	464a      	mov	r2, r9
 8004100:	f000 fae8 	bl	80046d4 <memcpy>
 8004104:	89a3      	ldrh	r3, [r4, #12]
 8004106:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800410a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800410e:	81a3      	strh	r3, [r4, #12]
 8004110:	6126      	str	r6, [r4, #16]
 8004112:	6165      	str	r5, [r4, #20]
 8004114:	444e      	add	r6, r9
 8004116:	eba5 0509 	sub.w	r5, r5, r9
 800411a:	6026      	str	r6, [r4, #0]
 800411c:	60a5      	str	r5, [r4, #8]
 800411e:	463e      	mov	r6, r7
 8004120:	42be      	cmp	r6, r7
 8004122:	d900      	bls.n	8004126 <__ssputs_r+0x72>
 8004124:	463e      	mov	r6, r7
 8004126:	6820      	ldr	r0, [r4, #0]
 8004128:	4632      	mov	r2, r6
 800412a:	4641      	mov	r1, r8
 800412c:	f000 faa8 	bl	8004680 <memmove>
 8004130:	68a3      	ldr	r3, [r4, #8]
 8004132:	1b9b      	subs	r3, r3, r6
 8004134:	60a3      	str	r3, [r4, #8]
 8004136:	6823      	ldr	r3, [r4, #0]
 8004138:	4433      	add	r3, r6
 800413a:	6023      	str	r3, [r4, #0]
 800413c:	2000      	movs	r0, #0
 800413e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004142:	462a      	mov	r2, r5
 8004144:	f000 fad4 	bl	80046f0 <_realloc_r>
 8004148:	4606      	mov	r6, r0
 800414a:	2800      	cmp	r0, #0
 800414c:	d1e0      	bne.n	8004110 <__ssputs_r+0x5c>
 800414e:	6921      	ldr	r1, [r4, #16]
 8004150:	4650      	mov	r0, sl
 8004152:	f7ff feb7 	bl	8003ec4 <_free_r>
 8004156:	230c      	movs	r3, #12
 8004158:	f8ca 3000 	str.w	r3, [sl]
 800415c:	89a3      	ldrh	r3, [r4, #12]
 800415e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004162:	81a3      	strh	r3, [r4, #12]
 8004164:	f04f 30ff 	mov.w	r0, #4294967295
 8004168:	e7e9      	b.n	800413e <__ssputs_r+0x8a>
	...

0800416c <_svfiprintf_r>:
 800416c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004170:	4698      	mov	r8, r3
 8004172:	898b      	ldrh	r3, [r1, #12]
 8004174:	061b      	lsls	r3, r3, #24
 8004176:	b09d      	sub	sp, #116	@ 0x74
 8004178:	4607      	mov	r7, r0
 800417a:	460d      	mov	r5, r1
 800417c:	4614      	mov	r4, r2
 800417e:	d510      	bpl.n	80041a2 <_svfiprintf_r+0x36>
 8004180:	690b      	ldr	r3, [r1, #16]
 8004182:	b973      	cbnz	r3, 80041a2 <_svfiprintf_r+0x36>
 8004184:	2140      	movs	r1, #64	@ 0x40
 8004186:	f7ff ff09 	bl	8003f9c <_malloc_r>
 800418a:	6028      	str	r0, [r5, #0]
 800418c:	6128      	str	r0, [r5, #16]
 800418e:	b930      	cbnz	r0, 800419e <_svfiprintf_r+0x32>
 8004190:	230c      	movs	r3, #12
 8004192:	603b      	str	r3, [r7, #0]
 8004194:	f04f 30ff 	mov.w	r0, #4294967295
 8004198:	b01d      	add	sp, #116	@ 0x74
 800419a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800419e:	2340      	movs	r3, #64	@ 0x40
 80041a0:	616b      	str	r3, [r5, #20]
 80041a2:	2300      	movs	r3, #0
 80041a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80041a6:	2320      	movs	r3, #32
 80041a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80041ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80041b0:	2330      	movs	r3, #48	@ 0x30
 80041b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004350 <_svfiprintf_r+0x1e4>
 80041b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80041ba:	f04f 0901 	mov.w	r9, #1
 80041be:	4623      	mov	r3, r4
 80041c0:	469a      	mov	sl, r3
 80041c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041c6:	b10a      	cbz	r2, 80041cc <_svfiprintf_r+0x60>
 80041c8:	2a25      	cmp	r2, #37	@ 0x25
 80041ca:	d1f9      	bne.n	80041c0 <_svfiprintf_r+0x54>
 80041cc:	ebba 0b04 	subs.w	fp, sl, r4
 80041d0:	d00b      	beq.n	80041ea <_svfiprintf_r+0x7e>
 80041d2:	465b      	mov	r3, fp
 80041d4:	4622      	mov	r2, r4
 80041d6:	4629      	mov	r1, r5
 80041d8:	4638      	mov	r0, r7
 80041da:	f7ff ff6b 	bl	80040b4 <__ssputs_r>
 80041de:	3001      	adds	r0, #1
 80041e0:	f000 80a7 	beq.w	8004332 <_svfiprintf_r+0x1c6>
 80041e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80041e6:	445a      	add	r2, fp
 80041e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80041ea:	f89a 3000 	ldrb.w	r3, [sl]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f000 809f 	beq.w	8004332 <_svfiprintf_r+0x1c6>
 80041f4:	2300      	movs	r3, #0
 80041f6:	f04f 32ff 	mov.w	r2, #4294967295
 80041fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041fe:	f10a 0a01 	add.w	sl, sl, #1
 8004202:	9304      	str	r3, [sp, #16]
 8004204:	9307      	str	r3, [sp, #28]
 8004206:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800420a:	931a      	str	r3, [sp, #104]	@ 0x68
 800420c:	4654      	mov	r4, sl
 800420e:	2205      	movs	r2, #5
 8004210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004214:	484e      	ldr	r0, [pc, #312]	@ (8004350 <_svfiprintf_r+0x1e4>)
 8004216:	f7fb ffdb 	bl	80001d0 <memchr>
 800421a:	9a04      	ldr	r2, [sp, #16]
 800421c:	b9d8      	cbnz	r0, 8004256 <_svfiprintf_r+0xea>
 800421e:	06d0      	lsls	r0, r2, #27
 8004220:	bf44      	itt	mi
 8004222:	2320      	movmi	r3, #32
 8004224:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004228:	0711      	lsls	r1, r2, #28
 800422a:	bf44      	itt	mi
 800422c:	232b      	movmi	r3, #43	@ 0x2b
 800422e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004232:	f89a 3000 	ldrb.w	r3, [sl]
 8004236:	2b2a      	cmp	r3, #42	@ 0x2a
 8004238:	d015      	beq.n	8004266 <_svfiprintf_r+0xfa>
 800423a:	9a07      	ldr	r2, [sp, #28]
 800423c:	4654      	mov	r4, sl
 800423e:	2000      	movs	r0, #0
 8004240:	f04f 0c0a 	mov.w	ip, #10
 8004244:	4621      	mov	r1, r4
 8004246:	f811 3b01 	ldrb.w	r3, [r1], #1
 800424a:	3b30      	subs	r3, #48	@ 0x30
 800424c:	2b09      	cmp	r3, #9
 800424e:	d94b      	bls.n	80042e8 <_svfiprintf_r+0x17c>
 8004250:	b1b0      	cbz	r0, 8004280 <_svfiprintf_r+0x114>
 8004252:	9207      	str	r2, [sp, #28]
 8004254:	e014      	b.n	8004280 <_svfiprintf_r+0x114>
 8004256:	eba0 0308 	sub.w	r3, r0, r8
 800425a:	fa09 f303 	lsl.w	r3, r9, r3
 800425e:	4313      	orrs	r3, r2
 8004260:	9304      	str	r3, [sp, #16]
 8004262:	46a2      	mov	sl, r4
 8004264:	e7d2      	b.n	800420c <_svfiprintf_r+0xa0>
 8004266:	9b03      	ldr	r3, [sp, #12]
 8004268:	1d19      	adds	r1, r3, #4
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	9103      	str	r1, [sp, #12]
 800426e:	2b00      	cmp	r3, #0
 8004270:	bfbb      	ittet	lt
 8004272:	425b      	neglt	r3, r3
 8004274:	f042 0202 	orrlt.w	r2, r2, #2
 8004278:	9307      	strge	r3, [sp, #28]
 800427a:	9307      	strlt	r3, [sp, #28]
 800427c:	bfb8      	it	lt
 800427e:	9204      	strlt	r2, [sp, #16]
 8004280:	7823      	ldrb	r3, [r4, #0]
 8004282:	2b2e      	cmp	r3, #46	@ 0x2e
 8004284:	d10a      	bne.n	800429c <_svfiprintf_r+0x130>
 8004286:	7863      	ldrb	r3, [r4, #1]
 8004288:	2b2a      	cmp	r3, #42	@ 0x2a
 800428a:	d132      	bne.n	80042f2 <_svfiprintf_r+0x186>
 800428c:	9b03      	ldr	r3, [sp, #12]
 800428e:	1d1a      	adds	r2, r3, #4
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	9203      	str	r2, [sp, #12]
 8004294:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004298:	3402      	adds	r4, #2
 800429a:	9305      	str	r3, [sp, #20]
 800429c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004360 <_svfiprintf_r+0x1f4>
 80042a0:	7821      	ldrb	r1, [r4, #0]
 80042a2:	2203      	movs	r2, #3
 80042a4:	4650      	mov	r0, sl
 80042a6:	f7fb ff93 	bl	80001d0 <memchr>
 80042aa:	b138      	cbz	r0, 80042bc <_svfiprintf_r+0x150>
 80042ac:	9b04      	ldr	r3, [sp, #16]
 80042ae:	eba0 000a 	sub.w	r0, r0, sl
 80042b2:	2240      	movs	r2, #64	@ 0x40
 80042b4:	4082      	lsls	r2, r0
 80042b6:	4313      	orrs	r3, r2
 80042b8:	3401      	adds	r4, #1
 80042ba:	9304      	str	r3, [sp, #16]
 80042bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042c0:	4824      	ldr	r0, [pc, #144]	@ (8004354 <_svfiprintf_r+0x1e8>)
 80042c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80042c6:	2206      	movs	r2, #6
 80042c8:	f7fb ff82 	bl	80001d0 <memchr>
 80042cc:	2800      	cmp	r0, #0
 80042ce:	d036      	beq.n	800433e <_svfiprintf_r+0x1d2>
 80042d0:	4b21      	ldr	r3, [pc, #132]	@ (8004358 <_svfiprintf_r+0x1ec>)
 80042d2:	bb1b      	cbnz	r3, 800431c <_svfiprintf_r+0x1b0>
 80042d4:	9b03      	ldr	r3, [sp, #12]
 80042d6:	3307      	adds	r3, #7
 80042d8:	f023 0307 	bic.w	r3, r3, #7
 80042dc:	3308      	adds	r3, #8
 80042de:	9303      	str	r3, [sp, #12]
 80042e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042e2:	4433      	add	r3, r6
 80042e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80042e6:	e76a      	b.n	80041be <_svfiprintf_r+0x52>
 80042e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80042ec:	460c      	mov	r4, r1
 80042ee:	2001      	movs	r0, #1
 80042f0:	e7a8      	b.n	8004244 <_svfiprintf_r+0xd8>
 80042f2:	2300      	movs	r3, #0
 80042f4:	3401      	adds	r4, #1
 80042f6:	9305      	str	r3, [sp, #20]
 80042f8:	4619      	mov	r1, r3
 80042fa:	f04f 0c0a 	mov.w	ip, #10
 80042fe:	4620      	mov	r0, r4
 8004300:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004304:	3a30      	subs	r2, #48	@ 0x30
 8004306:	2a09      	cmp	r2, #9
 8004308:	d903      	bls.n	8004312 <_svfiprintf_r+0x1a6>
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0c6      	beq.n	800429c <_svfiprintf_r+0x130>
 800430e:	9105      	str	r1, [sp, #20]
 8004310:	e7c4      	b.n	800429c <_svfiprintf_r+0x130>
 8004312:	fb0c 2101 	mla	r1, ip, r1, r2
 8004316:	4604      	mov	r4, r0
 8004318:	2301      	movs	r3, #1
 800431a:	e7f0      	b.n	80042fe <_svfiprintf_r+0x192>
 800431c:	ab03      	add	r3, sp, #12
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	462a      	mov	r2, r5
 8004322:	4b0e      	ldr	r3, [pc, #56]	@ (800435c <_svfiprintf_r+0x1f0>)
 8004324:	a904      	add	r1, sp, #16
 8004326:	4638      	mov	r0, r7
 8004328:	f3af 8000 	nop.w
 800432c:	1c42      	adds	r2, r0, #1
 800432e:	4606      	mov	r6, r0
 8004330:	d1d6      	bne.n	80042e0 <_svfiprintf_r+0x174>
 8004332:	89ab      	ldrh	r3, [r5, #12]
 8004334:	065b      	lsls	r3, r3, #25
 8004336:	f53f af2d 	bmi.w	8004194 <_svfiprintf_r+0x28>
 800433a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800433c:	e72c      	b.n	8004198 <_svfiprintf_r+0x2c>
 800433e:	ab03      	add	r3, sp, #12
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	462a      	mov	r2, r5
 8004344:	4b05      	ldr	r3, [pc, #20]	@ (800435c <_svfiprintf_r+0x1f0>)
 8004346:	a904      	add	r1, sp, #16
 8004348:	4638      	mov	r0, r7
 800434a:	f000 f879 	bl	8004440 <_printf_i>
 800434e:	e7ed      	b.n	800432c <_svfiprintf_r+0x1c0>
 8004350:	08004a44 	.word	0x08004a44
 8004354:	08004a4e 	.word	0x08004a4e
 8004358:	00000000 	.word	0x00000000
 800435c:	080040b5 	.word	0x080040b5
 8004360:	08004a4a 	.word	0x08004a4a

08004364 <_printf_common>:
 8004364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004368:	4616      	mov	r6, r2
 800436a:	4698      	mov	r8, r3
 800436c:	688a      	ldr	r2, [r1, #8]
 800436e:	690b      	ldr	r3, [r1, #16]
 8004370:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004374:	4293      	cmp	r3, r2
 8004376:	bfb8      	it	lt
 8004378:	4613      	movlt	r3, r2
 800437a:	6033      	str	r3, [r6, #0]
 800437c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004380:	4607      	mov	r7, r0
 8004382:	460c      	mov	r4, r1
 8004384:	b10a      	cbz	r2, 800438a <_printf_common+0x26>
 8004386:	3301      	adds	r3, #1
 8004388:	6033      	str	r3, [r6, #0]
 800438a:	6823      	ldr	r3, [r4, #0]
 800438c:	0699      	lsls	r1, r3, #26
 800438e:	bf42      	ittt	mi
 8004390:	6833      	ldrmi	r3, [r6, #0]
 8004392:	3302      	addmi	r3, #2
 8004394:	6033      	strmi	r3, [r6, #0]
 8004396:	6825      	ldr	r5, [r4, #0]
 8004398:	f015 0506 	ands.w	r5, r5, #6
 800439c:	d106      	bne.n	80043ac <_printf_common+0x48>
 800439e:	f104 0a19 	add.w	sl, r4, #25
 80043a2:	68e3      	ldr	r3, [r4, #12]
 80043a4:	6832      	ldr	r2, [r6, #0]
 80043a6:	1a9b      	subs	r3, r3, r2
 80043a8:	42ab      	cmp	r3, r5
 80043aa:	dc26      	bgt.n	80043fa <_printf_common+0x96>
 80043ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80043b0:	6822      	ldr	r2, [r4, #0]
 80043b2:	3b00      	subs	r3, #0
 80043b4:	bf18      	it	ne
 80043b6:	2301      	movne	r3, #1
 80043b8:	0692      	lsls	r2, r2, #26
 80043ba:	d42b      	bmi.n	8004414 <_printf_common+0xb0>
 80043bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80043c0:	4641      	mov	r1, r8
 80043c2:	4638      	mov	r0, r7
 80043c4:	47c8      	blx	r9
 80043c6:	3001      	adds	r0, #1
 80043c8:	d01e      	beq.n	8004408 <_printf_common+0xa4>
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	6922      	ldr	r2, [r4, #16]
 80043ce:	f003 0306 	and.w	r3, r3, #6
 80043d2:	2b04      	cmp	r3, #4
 80043d4:	bf02      	ittt	eq
 80043d6:	68e5      	ldreq	r5, [r4, #12]
 80043d8:	6833      	ldreq	r3, [r6, #0]
 80043da:	1aed      	subeq	r5, r5, r3
 80043dc:	68a3      	ldr	r3, [r4, #8]
 80043de:	bf0c      	ite	eq
 80043e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043e4:	2500      	movne	r5, #0
 80043e6:	4293      	cmp	r3, r2
 80043e8:	bfc4      	itt	gt
 80043ea:	1a9b      	subgt	r3, r3, r2
 80043ec:	18ed      	addgt	r5, r5, r3
 80043ee:	2600      	movs	r6, #0
 80043f0:	341a      	adds	r4, #26
 80043f2:	42b5      	cmp	r5, r6
 80043f4:	d11a      	bne.n	800442c <_printf_common+0xc8>
 80043f6:	2000      	movs	r0, #0
 80043f8:	e008      	b.n	800440c <_printf_common+0xa8>
 80043fa:	2301      	movs	r3, #1
 80043fc:	4652      	mov	r2, sl
 80043fe:	4641      	mov	r1, r8
 8004400:	4638      	mov	r0, r7
 8004402:	47c8      	blx	r9
 8004404:	3001      	adds	r0, #1
 8004406:	d103      	bne.n	8004410 <_printf_common+0xac>
 8004408:	f04f 30ff 	mov.w	r0, #4294967295
 800440c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004410:	3501      	adds	r5, #1
 8004412:	e7c6      	b.n	80043a2 <_printf_common+0x3e>
 8004414:	18e1      	adds	r1, r4, r3
 8004416:	1c5a      	adds	r2, r3, #1
 8004418:	2030      	movs	r0, #48	@ 0x30
 800441a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800441e:	4422      	add	r2, r4
 8004420:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004424:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004428:	3302      	adds	r3, #2
 800442a:	e7c7      	b.n	80043bc <_printf_common+0x58>
 800442c:	2301      	movs	r3, #1
 800442e:	4622      	mov	r2, r4
 8004430:	4641      	mov	r1, r8
 8004432:	4638      	mov	r0, r7
 8004434:	47c8      	blx	r9
 8004436:	3001      	adds	r0, #1
 8004438:	d0e6      	beq.n	8004408 <_printf_common+0xa4>
 800443a:	3601      	adds	r6, #1
 800443c:	e7d9      	b.n	80043f2 <_printf_common+0x8e>
	...

08004440 <_printf_i>:
 8004440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004444:	7e0f      	ldrb	r7, [r1, #24]
 8004446:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004448:	2f78      	cmp	r7, #120	@ 0x78
 800444a:	4691      	mov	r9, r2
 800444c:	4680      	mov	r8, r0
 800444e:	460c      	mov	r4, r1
 8004450:	469a      	mov	sl, r3
 8004452:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004456:	d807      	bhi.n	8004468 <_printf_i+0x28>
 8004458:	2f62      	cmp	r7, #98	@ 0x62
 800445a:	d80a      	bhi.n	8004472 <_printf_i+0x32>
 800445c:	2f00      	cmp	r7, #0
 800445e:	f000 80d2 	beq.w	8004606 <_printf_i+0x1c6>
 8004462:	2f58      	cmp	r7, #88	@ 0x58
 8004464:	f000 80b9 	beq.w	80045da <_printf_i+0x19a>
 8004468:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800446c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004470:	e03a      	b.n	80044e8 <_printf_i+0xa8>
 8004472:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004476:	2b15      	cmp	r3, #21
 8004478:	d8f6      	bhi.n	8004468 <_printf_i+0x28>
 800447a:	a101      	add	r1, pc, #4	@ (adr r1, 8004480 <_printf_i+0x40>)
 800447c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004480:	080044d9 	.word	0x080044d9
 8004484:	080044ed 	.word	0x080044ed
 8004488:	08004469 	.word	0x08004469
 800448c:	08004469 	.word	0x08004469
 8004490:	08004469 	.word	0x08004469
 8004494:	08004469 	.word	0x08004469
 8004498:	080044ed 	.word	0x080044ed
 800449c:	08004469 	.word	0x08004469
 80044a0:	08004469 	.word	0x08004469
 80044a4:	08004469 	.word	0x08004469
 80044a8:	08004469 	.word	0x08004469
 80044ac:	080045ed 	.word	0x080045ed
 80044b0:	08004517 	.word	0x08004517
 80044b4:	080045a7 	.word	0x080045a7
 80044b8:	08004469 	.word	0x08004469
 80044bc:	08004469 	.word	0x08004469
 80044c0:	0800460f 	.word	0x0800460f
 80044c4:	08004469 	.word	0x08004469
 80044c8:	08004517 	.word	0x08004517
 80044cc:	08004469 	.word	0x08004469
 80044d0:	08004469 	.word	0x08004469
 80044d4:	080045af 	.word	0x080045af
 80044d8:	6833      	ldr	r3, [r6, #0]
 80044da:	1d1a      	adds	r2, r3, #4
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6032      	str	r2, [r6, #0]
 80044e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80044e8:	2301      	movs	r3, #1
 80044ea:	e09d      	b.n	8004628 <_printf_i+0x1e8>
 80044ec:	6833      	ldr	r3, [r6, #0]
 80044ee:	6820      	ldr	r0, [r4, #0]
 80044f0:	1d19      	adds	r1, r3, #4
 80044f2:	6031      	str	r1, [r6, #0]
 80044f4:	0606      	lsls	r6, r0, #24
 80044f6:	d501      	bpl.n	80044fc <_printf_i+0xbc>
 80044f8:	681d      	ldr	r5, [r3, #0]
 80044fa:	e003      	b.n	8004504 <_printf_i+0xc4>
 80044fc:	0645      	lsls	r5, r0, #25
 80044fe:	d5fb      	bpl.n	80044f8 <_printf_i+0xb8>
 8004500:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004504:	2d00      	cmp	r5, #0
 8004506:	da03      	bge.n	8004510 <_printf_i+0xd0>
 8004508:	232d      	movs	r3, #45	@ 0x2d
 800450a:	426d      	negs	r5, r5
 800450c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004510:	4859      	ldr	r0, [pc, #356]	@ (8004678 <_printf_i+0x238>)
 8004512:	230a      	movs	r3, #10
 8004514:	e011      	b.n	800453a <_printf_i+0xfa>
 8004516:	6821      	ldr	r1, [r4, #0]
 8004518:	6833      	ldr	r3, [r6, #0]
 800451a:	0608      	lsls	r0, r1, #24
 800451c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004520:	d402      	bmi.n	8004528 <_printf_i+0xe8>
 8004522:	0649      	lsls	r1, r1, #25
 8004524:	bf48      	it	mi
 8004526:	b2ad      	uxthmi	r5, r5
 8004528:	2f6f      	cmp	r7, #111	@ 0x6f
 800452a:	4853      	ldr	r0, [pc, #332]	@ (8004678 <_printf_i+0x238>)
 800452c:	6033      	str	r3, [r6, #0]
 800452e:	bf14      	ite	ne
 8004530:	230a      	movne	r3, #10
 8004532:	2308      	moveq	r3, #8
 8004534:	2100      	movs	r1, #0
 8004536:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800453a:	6866      	ldr	r6, [r4, #4]
 800453c:	60a6      	str	r6, [r4, #8]
 800453e:	2e00      	cmp	r6, #0
 8004540:	bfa2      	ittt	ge
 8004542:	6821      	ldrge	r1, [r4, #0]
 8004544:	f021 0104 	bicge.w	r1, r1, #4
 8004548:	6021      	strge	r1, [r4, #0]
 800454a:	b90d      	cbnz	r5, 8004550 <_printf_i+0x110>
 800454c:	2e00      	cmp	r6, #0
 800454e:	d04b      	beq.n	80045e8 <_printf_i+0x1a8>
 8004550:	4616      	mov	r6, r2
 8004552:	fbb5 f1f3 	udiv	r1, r5, r3
 8004556:	fb03 5711 	mls	r7, r3, r1, r5
 800455a:	5dc7      	ldrb	r7, [r0, r7]
 800455c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004560:	462f      	mov	r7, r5
 8004562:	42bb      	cmp	r3, r7
 8004564:	460d      	mov	r5, r1
 8004566:	d9f4      	bls.n	8004552 <_printf_i+0x112>
 8004568:	2b08      	cmp	r3, #8
 800456a:	d10b      	bne.n	8004584 <_printf_i+0x144>
 800456c:	6823      	ldr	r3, [r4, #0]
 800456e:	07df      	lsls	r7, r3, #31
 8004570:	d508      	bpl.n	8004584 <_printf_i+0x144>
 8004572:	6923      	ldr	r3, [r4, #16]
 8004574:	6861      	ldr	r1, [r4, #4]
 8004576:	4299      	cmp	r1, r3
 8004578:	bfde      	ittt	le
 800457a:	2330      	movle	r3, #48	@ 0x30
 800457c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004580:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004584:	1b92      	subs	r2, r2, r6
 8004586:	6122      	str	r2, [r4, #16]
 8004588:	f8cd a000 	str.w	sl, [sp]
 800458c:	464b      	mov	r3, r9
 800458e:	aa03      	add	r2, sp, #12
 8004590:	4621      	mov	r1, r4
 8004592:	4640      	mov	r0, r8
 8004594:	f7ff fee6 	bl	8004364 <_printf_common>
 8004598:	3001      	adds	r0, #1
 800459a:	d14a      	bne.n	8004632 <_printf_i+0x1f2>
 800459c:	f04f 30ff 	mov.w	r0, #4294967295
 80045a0:	b004      	add	sp, #16
 80045a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045a6:	6823      	ldr	r3, [r4, #0]
 80045a8:	f043 0320 	orr.w	r3, r3, #32
 80045ac:	6023      	str	r3, [r4, #0]
 80045ae:	4833      	ldr	r0, [pc, #204]	@ (800467c <_printf_i+0x23c>)
 80045b0:	2778      	movs	r7, #120	@ 0x78
 80045b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80045b6:	6823      	ldr	r3, [r4, #0]
 80045b8:	6831      	ldr	r1, [r6, #0]
 80045ba:	061f      	lsls	r7, r3, #24
 80045bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80045c0:	d402      	bmi.n	80045c8 <_printf_i+0x188>
 80045c2:	065f      	lsls	r7, r3, #25
 80045c4:	bf48      	it	mi
 80045c6:	b2ad      	uxthmi	r5, r5
 80045c8:	6031      	str	r1, [r6, #0]
 80045ca:	07d9      	lsls	r1, r3, #31
 80045cc:	bf44      	itt	mi
 80045ce:	f043 0320 	orrmi.w	r3, r3, #32
 80045d2:	6023      	strmi	r3, [r4, #0]
 80045d4:	b11d      	cbz	r5, 80045de <_printf_i+0x19e>
 80045d6:	2310      	movs	r3, #16
 80045d8:	e7ac      	b.n	8004534 <_printf_i+0xf4>
 80045da:	4827      	ldr	r0, [pc, #156]	@ (8004678 <_printf_i+0x238>)
 80045dc:	e7e9      	b.n	80045b2 <_printf_i+0x172>
 80045de:	6823      	ldr	r3, [r4, #0]
 80045e0:	f023 0320 	bic.w	r3, r3, #32
 80045e4:	6023      	str	r3, [r4, #0]
 80045e6:	e7f6      	b.n	80045d6 <_printf_i+0x196>
 80045e8:	4616      	mov	r6, r2
 80045ea:	e7bd      	b.n	8004568 <_printf_i+0x128>
 80045ec:	6833      	ldr	r3, [r6, #0]
 80045ee:	6825      	ldr	r5, [r4, #0]
 80045f0:	6961      	ldr	r1, [r4, #20]
 80045f2:	1d18      	adds	r0, r3, #4
 80045f4:	6030      	str	r0, [r6, #0]
 80045f6:	062e      	lsls	r6, r5, #24
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	d501      	bpl.n	8004600 <_printf_i+0x1c0>
 80045fc:	6019      	str	r1, [r3, #0]
 80045fe:	e002      	b.n	8004606 <_printf_i+0x1c6>
 8004600:	0668      	lsls	r0, r5, #25
 8004602:	d5fb      	bpl.n	80045fc <_printf_i+0x1bc>
 8004604:	8019      	strh	r1, [r3, #0]
 8004606:	2300      	movs	r3, #0
 8004608:	6123      	str	r3, [r4, #16]
 800460a:	4616      	mov	r6, r2
 800460c:	e7bc      	b.n	8004588 <_printf_i+0x148>
 800460e:	6833      	ldr	r3, [r6, #0]
 8004610:	1d1a      	adds	r2, r3, #4
 8004612:	6032      	str	r2, [r6, #0]
 8004614:	681e      	ldr	r6, [r3, #0]
 8004616:	6862      	ldr	r2, [r4, #4]
 8004618:	2100      	movs	r1, #0
 800461a:	4630      	mov	r0, r6
 800461c:	f7fb fdd8 	bl	80001d0 <memchr>
 8004620:	b108      	cbz	r0, 8004626 <_printf_i+0x1e6>
 8004622:	1b80      	subs	r0, r0, r6
 8004624:	6060      	str	r0, [r4, #4]
 8004626:	6863      	ldr	r3, [r4, #4]
 8004628:	6123      	str	r3, [r4, #16]
 800462a:	2300      	movs	r3, #0
 800462c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004630:	e7aa      	b.n	8004588 <_printf_i+0x148>
 8004632:	6923      	ldr	r3, [r4, #16]
 8004634:	4632      	mov	r2, r6
 8004636:	4649      	mov	r1, r9
 8004638:	4640      	mov	r0, r8
 800463a:	47d0      	blx	sl
 800463c:	3001      	adds	r0, #1
 800463e:	d0ad      	beq.n	800459c <_printf_i+0x15c>
 8004640:	6823      	ldr	r3, [r4, #0]
 8004642:	079b      	lsls	r3, r3, #30
 8004644:	d413      	bmi.n	800466e <_printf_i+0x22e>
 8004646:	68e0      	ldr	r0, [r4, #12]
 8004648:	9b03      	ldr	r3, [sp, #12]
 800464a:	4298      	cmp	r0, r3
 800464c:	bfb8      	it	lt
 800464e:	4618      	movlt	r0, r3
 8004650:	e7a6      	b.n	80045a0 <_printf_i+0x160>
 8004652:	2301      	movs	r3, #1
 8004654:	4632      	mov	r2, r6
 8004656:	4649      	mov	r1, r9
 8004658:	4640      	mov	r0, r8
 800465a:	47d0      	blx	sl
 800465c:	3001      	adds	r0, #1
 800465e:	d09d      	beq.n	800459c <_printf_i+0x15c>
 8004660:	3501      	adds	r5, #1
 8004662:	68e3      	ldr	r3, [r4, #12]
 8004664:	9903      	ldr	r1, [sp, #12]
 8004666:	1a5b      	subs	r3, r3, r1
 8004668:	42ab      	cmp	r3, r5
 800466a:	dcf2      	bgt.n	8004652 <_printf_i+0x212>
 800466c:	e7eb      	b.n	8004646 <_printf_i+0x206>
 800466e:	2500      	movs	r5, #0
 8004670:	f104 0619 	add.w	r6, r4, #25
 8004674:	e7f5      	b.n	8004662 <_printf_i+0x222>
 8004676:	bf00      	nop
 8004678:	08004a55 	.word	0x08004a55
 800467c:	08004a66 	.word	0x08004a66

08004680 <memmove>:
 8004680:	4288      	cmp	r0, r1
 8004682:	b510      	push	{r4, lr}
 8004684:	eb01 0402 	add.w	r4, r1, r2
 8004688:	d902      	bls.n	8004690 <memmove+0x10>
 800468a:	4284      	cmp	r4, r0
 800468c:	4623      	mov	r3, r4
 800468e:	d807      	bhi.n	80046a0 <memmove+0x20>
 8004690:	1e43      	subs	r3, r0, #1
 8004692:	42a1      	cmp	r1, r4
 8004694:	d008      	beq.n	80046a8 <memmove+0x28>
 8004696:	f811 2b01 	ldrb.w	r2, [r1], #1
 800469a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800469e:	e7f8      	b.n	8004692 <memmove+0x12>
 80046a0:	4402      	add	r2, r0
 80046a2:	4601      	mov	r1, r0
 80046a4:	428a      	cmp	r2, r1
 80046a6:	d100      	bne.n	80046aa <memmove+0x2a>
 80046a8:	bd10      	pop	{r4, pc}
 80046aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80046b2:	e7f7      	b.n	80046a4 <memmove+0x24>

080046b4 <_sbrk_r>:
 80046b4:	b538      	push	{r3, r4, r5, lr}
 80046b6:	4d06      	ldr	r5, [pc, #24]	@ (80046d0 <_sbrk_r+0x1c>)
 80046b8:	2300      	movs	r3, #0
 80046ba:	4604      	mov	r4, r0
 80046bc:	4608      	mov	r0, r1
 80046be:	602b      	str	r3, [r5, #0]
 80046c0:	f7fc fa3a 	bl	8000b38 <_sbrk>
 80046c4:	1c43      	adds	r3, r0, #1
 80046c6:	d102      	bne.n	80046ce <_sbrk_r+0x1a>
 80046c8:	682b      	ldr	r3, [r5, #0]
 80046ca:	b103      	cbz	r3, 80046ce <_sbrk_r+0x1a>
 80046cc:	6023      	str	r3, [r4, #0]
 80046ce:	bd38      	pop	{r3, r4, r5, pc}
 80046d0:	200002a8 	.word	0x200002a8

080046d4 <memcpy>:
 80046d4:	440a      	add	r2, r1
 80046d6:	4291      	cmp	r1, r2
 80046d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80046dc:	d100      	bne.n	80046e0 <memcpy+0xc>
 80046de:	4770      	bx	lr
 80046e0:	b510      	push	{r4, lr}
 80046e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046ea:	4291      	cmp	r1, r2
 80046ec:	d1f9      	bne.n	80046e2 <memcpy+0xe>
 80046ee:	bd10      	pop	{r4, pc}

080046f0 <_realloc_r>:
 80046f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046f4:	4680      	mov	r8, r0
 80046f6:	4615      	mov	r5, r2
 80046f8:	460c      	mov	r4, r1
 80046fa:	b921      	cbnz	r1, 8004706 <_realloc_r+0x16>
 80046fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004700:	4611      	mov	r1, r2
 8004702:	f7ff bc4b 	b.w	8003f9c <_malloc_r>
 8004706:	b92a      	cbnz	r2, 8004714 <_realloc_r+0x24>
 8004708:	f7ff fbdc 	bl	8003ec4 <_free_r>
 800470c:	2400      	movs	r4, #0
 800470e:	4620      	mov	r0, r4
 8004710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004714:	f000 f81a 	bl	800474c <_malloc_usable_size_r>
 8004718:	4285      	cmp	r5, r0
 800471a:	4606      	mov	r6, r0
 800471c:	d802      	bhi.n	8004724 <_realloc_r+0x34>
 800471e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004722:	d8f4      	bhi.n	800470e <_realloc_r+0x1e>
 8004724:	4629      	mov	r1, r5
 8004726:	4640      	mov	r0, r8
 8004728:	f7ff fc38 	bl	8003f9c <_malloc_r>
 800472c:	4607      	mov	r7, r0
 800472e:	2800      	cmp	r0, #0
 8004730:	d0ec      	beq.n	800470c <_realloc_r+0x1c>
 8004732:	42b5      	cmp	r5, r6
 8004734:	462a      	mov	r2, r5
 8004736:	4621      	mov	r1, r4
 8004738:	bf28      	it	cs
 800473a:	4632      	movcs	r2, r6
 800473c:	f7ff ffca 	bl	80046d4 <memcpy>
 8004740:	4621      	mov	r1, r4
 8004742:	4640      	mov	r0, r8
 8004744:	f7ff fbbe 	bl	8003ec4 <_free_r>
 8004748:	463c      	mov	r4, r7
 800474a:	e7e0      	b.n	800470e <_realloc_r+0x1e>

0800474c <_malloc_usable_size_r>:
 800474c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004750:	1f18      	subs	r0, r3, #4
 8004752:	2b00      	cmp	r3, #0
 8004754:	bfbc      	itt	lt
 8004756:	580b      	ldrlt	r3, [r1, r0]
 8004758:	18c0      	addlt	r0, r0, r3
 800475a:	4770      	bx	lr

0800475c <_init>:
 800475c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475e:	bf00      	nop
 8004760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004762:	bc08      	pop	{r3}
 8004764:	469e      	mov	lr, r3
 8004766:	4770      	bx	lr

08004768 <_fini>:
 8004768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476a:	bf00      	nop
 800476c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800476e:	bc08      	pop	{r3}
 8004770:	469e      	mov	lr, r3
 8004772:	4770      	bx	lr
